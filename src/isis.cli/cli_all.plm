cli.pex
TRUE		'0FFH'
FALSE		'0'
CR		'0DH'
BOOLEAN		'byte'
FOREVER		'while(1)'
# tweaked assembly file
monitor		'monitr'

deblank		p(a str)a
delimit		p(a ptr)a
error		p(a error$num)
exit		p
file$error	p(a satatus,a ptr,b callExit)
force$upper	p(a bufferPtr)
load		p(a path$p,a load$offset,a switch,a entry$p,a status$p)
memck		pa
monitr		p
read		p(a conn,a buff$p,a count,a actual$p,a status$p)
reportError	p(a status)
rescan		p(a conn,a status$p)
seek		p(a conn,a mode,a block$p,a byte$p,a status$p)
seq		p(a s1,a s2,b cnt)b
uppercase	p(b ch)b
wdelimit	p(a ptr)a
write		p(a conn,a buff$p,a count,a status$p)

dblank.pl3
DEBLANK: DO;

deblank: procedure(ptr) address public;
	declare ptr address;
	declare c based ptr byte;

	do while (c = ' ');
		ptr = ptr + 1;
	end;
	return ptr;
end;

end;
dlimit.pl3
DELIMIT: DO;

delimit: procedure(ptr) address public;
	declare ptr address;
	declare c based ptr byte;

	do while (c = ':' or c = '.' or ('0' <= c and c <= '9') or ('A' <= c and c <= 'Z'));
		ptr = ptr + 1;
	end;
	return ptr;
end;
end;
filerr.pl3
FILEERROR: DO;
$include(filerr.ipx)

file$error: procedure(status, ptr, callExit) public;
	declare (status, ptr) address, callExit byte;
	declare actual address;

	if status <> 0 then
	do;
		ptr = deblank(ptr);
		call write(0, .(' '), 1, .actual);
		call write(0, ptr, wdelimit(ptr) - ptr, .actual);
		call write(0, .(','), 1, .actual);
		call reportError(status);
		if callExit then
			call exit;
	end;
end;
end;
forupp.pl3
FORCEUPPER: DO;
$include(forupp.ipx)


forceupper: procedure(bufferPtr) public;
	declare bufferPtr address, ch based bufferPtr byte;

	do while ch <> CR;
		ch = uppercase(ch);
		bufferPtr = bufferPtr + 1;
	end;
end;
end;
meq.pl3
MEQ: DO;

meq: procedure(mPtr, fptr) byte public;
	declare (mPtr, fptr) address;
	declare m based mPtr (10) byte;
	declare f based fptr (10) byte;
	declare i byte;

	do i = 0 to 9;
		if m(i) = '?' then
		do;
			if f(i) = 0 then
				return 0;
		end;
		else if m(i) <> '*' then
		do;
			if m(i) <> f(i) then
				return 0;
		end;
	end;
	return 0ffh;
end;
end;

reperr.pl3
REPORTERROR: DO;
$include(reperr.ipx)

declare msg(*) byte DATA(0, 0,
	2, 'ILLEGAL AFTN ARGUMENT', 0,
	4, 'INCORRECTLY SPECIFIED FILE', 0,
	5, 'UNRECOGNIZED DEVICE NAME', 0,
	6, 'ATTEMPT TO WRITE TO INPUT DEVICE', 0,
	8, 'ATTEMPT TO READ FROM OUTPUT DEVICE', 0,
	9, 'DISK DIRECTORY FULL', 0,
	0AH, 'NOT ON SAME DISK', 0,
	0BH, 'FILE ALREADY EXISTS', 0,
	0CH, 'FILE IS ALREADY OPEN', 0,
	0DH, 'NO SUCH FILE', 0,
	0EH, 'WRITE PROTECTED', 0,
	11H, 'NOT A DISK FILE', 0,
	12H, 'ILLEGAL ISIS COMMAND', 0,
	13H, 'ATTEMPTED SEEK ON NON-DISK FILE', 0,
	14H, 'ATTEMPTED BACK SEEK TOO FAR', 0,
	15H, 'CAN', 27H, 'T RESCAN', 0,
	16H, 'ILLEGAL ACCESS MODE TO OPEN', 0,
	17H, 'MISSING FILENAME', 0,
	19H, 'ILLEGAL ECHO FILE', 0,
	1AH, 'ILLEGAL ATTRIBUTE IDENTIFIER', 0,
	1BH, 'ILLEGAL SEEK COMMAND', 0,
	1CH, 'MISSING EXTENSION', 0,
	1FH, 'CAN', 27H, 'T SEEK ON WRITE ONLY FILE', 0,
	20H, 'CAN', 27H, 'T DELETE OPEN FILE', 0,
	23H, 'SEEK PAST EOF', 0,
	0C9H, 'UNRECOGNIZED SWITCH', 0,
	0CAH, 'UNRECOGNIZED DELIMITER', 0,
	0CBH, 'INVALID SYNTAX', 0,
	0CCH, 'PREMATURE EOF', 0,
	0CEH, 'ILLEGAL DISKETTE LABEL', 0,
	0D0H, 'CHECKSUM ERROR', 0,
	0D1H, 'RELO FILE SEQUENCE ERROR', 0,
	0D2H, 'INSUFFICIENT MEMORY', 0,
	0D3H, 'RECORD TOO LONG', 0,
	0D4H, 'ILLEGAL RELO RECORD', 0,
	0D5H, 'FIXUP BOUNDS ERROR', 0,
	0D6H, 'ILLEGAL SUBMIT PARAMETER', 0,
	0D7H, 'ARGUMENT TOO LONG', 0,
	0D8H, 'TOO MANY PARAMETERS', 0,
	0D9H, 'OBJECT RECORD TOO SHORT', 0,
	0DAH, 'ILLEGAL RECORD FORMAT', 0,
	0DBH, 'PHASE ERROR', 0,
	0EAH, 'CANNOT FORMAT FROM TARGET DRIVE', 0,
        0EBH, 'NON-DISK DEVICE', 0
	);

reportError: procedure(errNum) public;
	declare errNum address;
	declare numberBuffer(3) byte, i address, status address;
 

	if errNum <> 0 then
	do;
		i = 0;
		do while i < size(msg);
			if errNum = msg(i) and msg(i + 1) <> 0 then
			do;
				i = i + 1;
				call write(0, .(' '), 1, .status);
				do while msg(i) <> 0;
					call write(0, .msg(i), 1, .status);
					i = i + 1;
				end;
				call write(0, .(0dh, 0ah), 2, .status);
				return;
			end;
			else
			do;
				do while msg(i) <> 0;
					i = i + 1;
				end;
				i = i + 1;
			end;
		end;
	call error(errNum);
	end;
end;
end;

seq.pl3
SEQ: DO;
seq: procedure(s1, s2, cnt) byte public;
	declare (s1,s2) address, cnt byte;
	declare s1a based s1(1) byte;
	declare s2a based s2(1) byte;
	declare i byte;
	cnt = cnt - 1;
	do i = 0 to cnt;
		if s1a(i) <> s2a(i) then
			return 0;
	end;
	return 0ffh;
end;
end;

upcase.pl3
UPPERCASE: DO;
uppercase: procedure(char) byte public;
	declare char byte;
	if char < 'a' then
		return char;
	if char > 'z' then
		return char;
	return char and 0dfh;
end;
end;

wdlmt.pl3
WDELIMIT: DO;
wdelimit: procedure(ptr) address public;
	declare ptr address;
	declare ch based ptr byte;

	do while (ch = ':' or ch = '.' or ch = '*' or ch = '?' or
		  ('0' <= ch and ch <= '9') or ('A' <= ch and ch <= 'Z'));
		ptr = ptr + 1;
	end;
	return ptr;
end;
end;

cli.pl3
CLI:
DO;
DECLARE VERSION$LEVEL LITERALLY '04H',
	EDIT$LEVEL LITERALLY '00H';
declare cpyrite(*) byte data('(C) 1975,1976,1977,1978,1979,1980 INTEL CORP');
DECLARE VERSION(*) BYTE DATA(VERSION$LEVEL,EDIT$LEVEL);
$include(cli.ipx)
$LIST
DECLARE BUFFER(128) BYTE;
DECLARE DEBUG BOOLEAN;
DECLARE BUFFER$PTR ADDRESS, CHAR BASED BUFFER$PTR BYTE;
DECLARE (PATHNAME$PTR,ACTUAL,STATUS,ENTRY,RETSW) ADDRESS;

/* *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
   *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

   BEGINNING OF PROGRAM.

   *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
   *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-* */

STACKPTR = MEMCK;
OUTPUT(0FCH) = 0FCH; /* ENABLE CONSOLE INTERRUPTS 0 AHD 1 */
ENABLE;
OUTPUT(0FDH) = 20H; /* SEND END OF INTERRUPT COMMAND */
BUFFER$PTR = .(':CI: ');
CALL RESCAN(1,.STATUS);
IF STATUS = 0 THEN
DO;
  CALL READ(1,.BUFFER,LENGTH(BUFFER),.ACTUAL,.STATUS);
  CALL FILE$ERROR(STATUS,BUFFER$PTR,TRUE);
END;
DO FOREVER;
  CALL WRITE(0,.('-'),1,.STATUS);
  CALL READ(1,.BUFFER,LENGTH(BUFFER),.ACTUAL,.STATUS);
  CALL FILE$ERROR(STATUS,BUFFER$PTR,TRUE);
  BUFFER(ACTUAL) = CR;
  CALL FORCE$UPPER(.BUFFER);
  BUFFER$PTR = DEBLANK(.BUFFER);
  IF CHAR = ';' THEN CHAR = CR;
  IF CHAR <> CR THEN
  DO;
    /* NOW CHECK FDR DEBUG MODE (PATHNAHE PRECEDED BY 'DEBUG' */
    DEBUG = FALSE; /* ASSUME NORMAL CASE, NOT DEBUGGING */
    IF SEQ(.('DEBUG'),BUFFER$PTR,5)
    AND (DELIMIT(BUFFER$PTR)=BUFFER$PTR+5) THEN
    DO;
      BUFFER$PTR = DEBLANK(DELIMIT(BUFFER$PTR+5));
      DEBUG = TRUE;
      IF CHAR = CR THEN CALL MONITOR;
    END;
    PATHNAME$PTR = BUFFER$PTR;
    BUFFER$PTR = DELIMIT(DEBLANK(BUFFER$PTR));
    CALL RESCAN(1,.STATUS);
    CALL READ(1,.BUFFER,BUFFER$PTR-.BUFFER,.ACTUAL,.STATUS);
    CALL FORCE$UPPER(PATHNAME$PTR);
    IF DEBUG THEN RETSW = 2; ELSE RETSW = 1;
    CALL LOAD(PATHNAME$PTR,0,RETSW,.ENTRY,.STATUS);
    CALL FILE$ERROR(STATUS,PATHNAME$PTR,FALSE);
    CALL READ(1,.BUFFER,LENGTH(BUFFER),.ACTUAL,.STATUS);
  END;
END;
END;
EOF
monitr.asm

; MONITOR: DO;
	name MONITOR
; monitor: procedure public;
	public monitr
;  declare sp address;
;  declare wrd based sp address;
;  sp = stackptr;
	extrn @P0096		; hl = de - 0a
	dseg
?SP:	ds	2
	cseg
monitr:
        LXI     H,0
        DAD     SP
        SHLD    ?SP
;  wrd = 8;
        MVI     A,8H
        MOV     M,A
        INX     H
        MVI     M,0
;  stackptr = stackptr - 2;
        LXI     H,0
        DAD     SP
        ; DCX     H		; compiler puts optimised - 2
        ; DCX     H
	xchg			; source has older non optimised version
	mvi	a,2		; I could not get either compiler to generate
	call	@P0096		; this code hence I reverted to asm file
        SPHL
;  sp = stackptr;
        LXI     H,0
        DAD     SP
        SHLD    ?SP
;  wrd = 0;
        MVI     A,0H
        MOV     M,A
        INX     H
        MVI     M,0
;  end;
        RET
;  end;
	end

makefile
TARGET=isis.cli
NAME=CLI
STACK=68
# common makefile info
ISIS=..\..\thames
V4=../../plm80v4/
V3=../../plm80v3/
F0=./
TOOLS=..\..\tools
PEXFILE=cli.pex

PLMFLAGS=code optimize

OBJS=	cli.obj dblank.obj dlimit.obj filerr.obj forupp.obj monitr.obj seq.obj\
	reperr.obj upcase.obj wdlmt.obj 

.SUFFIXES: .asm .pl3
.pl3.obj:
	@SET ISIS_F0=$(F0)
	@SET ISIS_F1=$(V3)
	$(ISIS) :F1:PLM80 $< $(PLMFLAGS)
	@find $*.lst "     0 PROGRAM ERROR(S)" >nul || (del $*.obj & exit /b 1)

.asm.obj:
	@SET ISIS_F0=$(F0)
	@SET ISIS_F1=$(V4)
	$(ISIS) :F1:ASM80 $< 
	@find $*.lst "ASSEMBLY COMPLETE,   NO ERRORS" >nul || (del $*.obj & exit /b 1)

.pl3.ipx:
	@SET ISIS_F0=$(F0)
	@SET ISIS_F1=$(V3)
	@SET ISIS_F3=$(F3)
	$(TOOLS)\ngenpex $(PEXFILE) $<
all:	.depend
all:
	$(MAKE) $(TARGET)

$(TARGET): $(OBJS)
	@SET ISIS_F0=.
	@SET ISIS_F1=$(V3)
	$(ISIS) :F1:LINK "&" < <<
$(OBJS: =,&
),:f1:system.lib,:f1:plm80.lib TO $*.rel MAP print($*.lmp)
<<NOKEEP
	$(ISIS) :F1:LOCATE $*.rel to $@ print($*.map) code(3680H) name($(NAME)) stacksize($(STACK)) map symbols publics purge
	@del $*.rel
	@(find $*.map "UNSATISFIED EXTERNAL" >NUL && exit /b 1) || exit /b 0

$(OBJS): makefile

filerr.ipx forupp.ipx reperr.ipx cli.ipx : $(PEXFILE)

.depend: cli_all.plm
	..\..\unpack.pl
	..\..\mkdepend.pl
	date /t >.depend

verify: all
	fc /b $(TARGET) $(TARGET).ref

clean:
       	del *.*~ *.obj *.lst *~ *.map *.imp

vclean: clean
	del *.ipx .depend *.pex

gitprep: vclean
	del *.asm *.pl3 $(TARGET) makefile
	..\..\unpack.pl

