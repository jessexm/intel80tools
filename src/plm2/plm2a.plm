plm2a: DO;
$nolist
declare lit literally 'literally',
	true lit '0ffh',
	false lit '0',
	boolean lit 'byte',
	cr lit '0dh',
	lf lit '0ah';

$include(:f3:data.inc)
$include(t2code.inc)
$include(:f3:info.inc)
$include(:f3:flags.inc)
declare ERR200 lit '200',	/*  LIMIT EXCEEDED */
	ERR205 lit '205',	/*  ILLEGAL NESTING OF BLOCKS, ENDS NOT BALANCED */
	ERR204 lit '204',	/*  LIMIT EXCEEDED: NUMBER OF ACTIVE */

	CF$XCHG lit '14',
	CF$6 lit '6',
	CF$SPHL lit '22',
	CF$INXSP lit '116',
	CF$POP lit '4',
	CF$PUSH lit '23',
	CF$EI lit '149',
	CF$INX lit '24',
	CF$DCX lit '25';

declare	tx2Buf(512) byte external,
	tx1Buf(512) byte external,
	blkCurInfo(20) address external,
	wB488(20) address external,
	wB4B0(20) address external,
	wB4D8(20) address external,
	extProcId(20) byte external,
	procChainNext(20) byte external,
	wB528(10) address external,
	wB53C(10) address external,
	tx2opc(255) byte external,
	tx2Aux1b(255) byte external,
	tx2Aux2b(255) byte external,
	tx2op1(255) address external,
	tx2op2(255) address external,
	tx2op3(255) address external,
	tx2Auxw(255) address external,
	bC045(9) byte external,
	bC04E(9) byte external,
	boC057(9) byte external,
	boC060(9) byte external,
	boC069(9) byte external,
	boC072(9) byte external,
	boC07B(9) byte external,
	wC084(9) address external,
	wC096(9) address external,
	bC0A8(9) byte external,
	bC0B1 byte external,
	bC0B2 byte external,
	bC0B3(2) byte external,
	bC0B5(2) byte external,
	bC0B7(2) byte external,
	bC0B9(2) byte external,
	bC0BB(2) byte external,
	bC0BD(2) byte external,
	bC0BF(2) byte external,
	bC0C1(2) byte external,
	bC0C3(125) byte external,
	bC140(126) byte external,
	tx2qp byte external,
	bC1BF byte external,
	tx2qEnd byte external,
	pc address external,
	wC1C3 address external,
	wC1C5 address external,
	wC1C7 address external,
	blkSP byte external,
	blkOverCnt byte external,
	procCallDepth byte external,
	boC1CC byte external,
	boC1CD byte external,
	eofSeen byte external,
	wC1CF address external,
	curOp byte external,
	bC1D2 byte external,
	padC1D3 byte external,
	curExtProcId byte external,
	procChainId byte external,
	wC1D6 address external,
	boC1D8 byte external,
	bC1D9 byte external,
	cfrag1 byte external,
	bC1DB byte external,
	wC1DC(5) address external,
	bC1E6 byte external,
	buf$C1E7(34) byte external,
	bC209(1) byte external,
	boC20F byte external,
	finalise label external;

/* use none standard fill definition */
$include(fill.aex)
$include(:f3:fwrite.aex)
$include(:f3:fread.aex)
$include(:f3:movmem.aex)
$include(:f3:gitype.pex)
$include(:f3:giparo.pex)
$include(:f3:sibsev.pex)
$include(:f3:tiflag.pex)
$include(:f3:sidim.pex)
$include(:f3:gidim.pex)
$include(:f3:gieid.pex)
$include(:f3:gipid.pex)
$include(:f3:gilnkv.pex)

$list

declare unused(*) BYTE public DATA(2, 2, 3, 4, 3, 4, 2, 2, 3, 4, 2, 3, 2, 3, 3, 3, 3,
			2, 2, 3, 4, 2, 3, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 3,
			2, 3, 2, 2, 3, 2, 2, 1, 2, 2, 3, 4),

	b3FCD(*) BYTE public DATA(0, 2, 4, 7, 0Bh, 0Eh, 12h, 14h, 16h, 19h, 1Dh, 1Fh,
			22h, 24h, 27h, 2Ah, 2Dh, 30h, 32h, 34h, 37h, 3Bh, 3Dh,
			40h, 42h, 45h, 47h, 49h, 4Bh, 4Dh, 50h, 52h, 54h, 56h,
			59h, 5Bh, 5Eh, 60h, 62h, 65h, 67h, 69h, 6Ah, 6Ch, 6Eh,
			71h, 24h, 24h, 24h, 24h, 13h, 13h, 18h, 18h, 18h, 18h,
			16h, 2Ch, 15h, 1Fh, 1Fh, 20h, 20h, 19h, 19h, 19h, 19h,
			8, 8, 9, 9, 6, 7, 25h, 25h, 25h, 25h, 25h, 0Ah, 0Ah,
			0Bh, 0Bh, 14h, 14h, 14h, 14h, 14h, 39h, 1Ah, 1Ah, 1Ah,
			1Ah),

	b4029(*) BYTE public DATA(0, 0, 0, 0, 26h, 30h, 30h, 26h, 30h, 20h, 30h, 12h,
			12h, 12h, 0, 10h, 10h, 10h, 10h, 10h, 10h, 60h, 0,
			26h, 20h, 20h, 0, 0, 0, 0, 0, 0, 10h, 80h, 80h, 80h,
			90h, 90h, 40h, 0A0h, 0A0h, 0A0h, 80h, 0B0h, 90h, 80h,
			0B0h, 90h, 80h, 0B0h, 90h, 80h, 0B0h, 90h, 80h, 0B0h,
			90h, 20h, 30h, 30h, 30h, 10h, 10h, 70h, 70h, 30h, 30h,
			30h, 30h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20h, 20h, 0, 0, 20h,
			0, 0, 2Ch, 40h, 0, 10h, 10h, 60h, 20h, 0, 0, 0A0h,
			0A0h, 0A0h, 0A0h, 32h, 16h, 10h, 20h, 0, 10h, 10h,
			10h, 10h, 10h, 60h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 70h, 60h, 60h, 70h, 50h, 70h, 60h, 60h,
			0E0h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 80h, 80h, 80h, 80h, 80h, 80h,
			0, 0, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h,
			80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h,
			80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h,
			80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h,
			80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h,
			80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h,
			80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h,
			80h, 80h, 80h, 80h, 80h, 80h),

	b4128(*) BYTE public DATA(0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8,
			9, 0Ah),

	b413B(*) BYTE public DATA(0, 2, 4, 6, 8, 0Ah, 0Ch, 10h, 11h, 0Eh, 12h, 0, 2,
			4, 6, 8, 0Ah, 0Ch, 10h, 11h, 0Eh, 12h, 0, 2, 4, 6,
			8, 0Ah, 0Ch, 10h, 11h, 0Eh, 12h, 0, 2, 4, 6, 8, 0Ah,
			0Ch, 10h, 11h, 0Eh, 12h, 0, 2, 4, 6, 8, 0Ah, 0Ch, 10h,
			11h, 0Eh, 12h, 0Ch, 11h, 12h, 0Ch, 11h, 12h, 2, 6,
			0, 4, 6, 8, 0Ah, 0Ch, 0Eh, 10h, 11h, 12h, 0Dh, 0Fh,
			7, 9, 0Bh, 1, 5, 3),

	b418C(*) BYTE public DATA(90h, 91h, 94h, 95h, 98h, 99h, 9Ah, 9Ch, 0A0h, 0A1h,
			9Dh, 6Ch, 6Dh, 70h, 71h, 74h, 75h, 76h, 78h, 7Ch, 7Dh,
			79h, 0, 0, 0, 0, 0, 0, 64h, 65h, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 68h, 69h, 0, 0, 0, 0, 58h, 0, 0, 59h, 5Ah,
			54h, 55h, 0, 0, 0, 0, 60h, 0, 0, 61h, 62h, 5Ch, 5Dh,
			0, 0, 0, 0, 84h, 0, 0, 85h, 86h, 80h, 81h, 0, 0, 0,
			0, 8Ch, 0, 0, 8Dh, 8Eh, 88h, 89h, 0, 0, 0, 0, 0, 0,
			0, 10h, 11h, 12h, 14h, 15h, 16h, 17h, 0, 1, 4, 5, 8,
			9, 0Ah, 0Ch, 0Dh, 0Eh, 0Fh, 0, 30h, 0, 31h, 0, 0, 0,
			0, 0, 0, 0, 0, 28h, 0, 29h, 0, 0, 0, 0, 0, 0, 0, 18h,
			19h, 1Ch, 1Dh, 20h, 21h, 22h, 24h, 25h, 26h, 27h, 44h,
			45h, 48h, 49h, 4Ch, 4Dh, 4Eh, 50h, 51h, 52h, 53h, 0A8h,
			0A9h, 0ACh, 0ADh, 0B0h, 0B1h, 0B2h, 0B4h, 0B5h, 0B6h,
			0B7h, 34h, 36h, 35h, 38h, 39h, 3Ah, 0, 0, 0, 0, 0,
			3Ch, 3Dh, 3Eh, 40h, 41h, 42h, 0, 0, 0, 0, 0, 0, 2Ch,
			0, 0, 2Dh, 2Eh, 0, 0, 0, 0, 0, 0A4h, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0),

	b425D(*) BYTE public DATA(8, 1Ch, 0Ch, 0, 0Bh, 11h, 1, 0Ah, 0Fh, 10h, 0Dh, 9,
			2, 3, 4, 5, 6, 7, 0, 1Eh, 12h, 0Eh),

	b4273(*) BYTE public DATA(3, 3, 3, 3, 3, 3, 0Ch, 0Dh, 0Eh, 0Fh, 10h, 11h, 0,
			0, 0, 0, 0, 0, 0, 0, 12h, 7, 4, 4, 2, 0Ah, 15h, 0,
			0, 0, 0, 8, 9, 0, 0, 0, 0Bh, 6, 12h, 12h, 12h, 12h,
			12h, 12h, 5, 1, 1, 1, 13h, 13h, 13h, 1, 1, 1, 13h,
			13h, 13h, 14h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 1, 1, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch,
			0Ch, 0Ch, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0,
			0Eh, 0Eh, 0Eh, 0Eh, 0Fh, 0Fh, 0Fh, 0Fh, 0, 0Fh, 0Fh,
			0Fh, 0Fh, 0Eh, 0Eh, 0Eh, 0Eh, 0, 10h, 10h, 10h, 10h,
			10h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
			0),

	b42F9(*) BYTE public DATA(0, 0, 0, 0, 0, 0, 0, 0, 0, 10h, 0, 0, 0, 0, 0, 0, 0,
			0, 10h, 0, 20h, 0, 0, 13h, 0, 0, 0, 0, 0, 0, 0, 0,
			50h, 0, 0, 0, 10h, 10h, 20h, 10h, 10h, 10h, 0, 50h,
			50h, 0, 50h, 50h, 0, 50h, 50h, 0, 50h, 50h, 0, 50h,
			50h, 40h, 0, 10h, 10h, 20h, 20h, 60h, 60h, 60h, 60h,
			60h, 60h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 40h, 40h, 0, 0, 10h, 0, 0, 21h, 10h,
			0, 10h, 10h, 10h, 40h, 0, 0, 10h, 10h, 10h, 10h, 12h,
			0, 0, 40h, 0, 0, 0, 0, 0, 0, 10h, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),

	b43F8(*) BYTE public DATA(0, 20h, 40h, 60h, 81h, 81h, 84h, 83h, 83h, 1, 83h,
			82h, 83h, 81h, 81h, 82h, 83h, 83h, 1, 83h, 81h, 82h,
			81h, 81h, 81h, 81h, 81h, 81h, 21h, 22h, 23h, 24h, 82h,
			81h, 82h, 83h, 1, 2, 2, 21h, 22h, 23h, 1, 2, 1, 2,
			3, 2, 4, 5, 4, 4, 5, 4, 3, 4, 3, 21h, 85h, 83h, 83h,
			84h, 83h, 3, 23h, 88h, 89h, 8Dh, 91h, 1, 2, 3, 4, 5,
			4, 3, 2, 5, 4, 3, 2, 4, 5, 6, 6, 5, 4, 3, 62h, 41h,
			1, 2, 2, 2, 1, 8Ah, 82h, 83h, 1, 1, 84h, 61h, 0Ch,
			0Eh, 41h, 42h, 61h, 62h, 3, 2, 1, 62h, 61h, 0, 0, 0,
			0, 0, 84h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 20h, 20h, 20h, 20h, 20h, 22h, 23h, 23h, 23h, 23h,
			6, 6, 6, 1, 1, 1, 2, 20h, 60h, 3, 20h, 40h, 0, 0, 0,
			0, 0, 0, 60h, 60h, 40h, 0, 80h, 84h, 7, 7, 4, 5, 0,
			0, 84h, 84h, 84h, 84h, 84h, 84h, 84h, 84h, 84h, 84h,
			84h, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
			7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
			5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 43h, 43h, 43h, 63h,
			63h, 63h, 23h, 23h, 23h, 23h, 23h, 23h, 23h, 23h, 23h,
			23h, 23h, 23h, 3, 3, 23h, 23h, 23h, 23h, 23h, 23h),

	b44F7(*) BYTE public DATA(55h, 55h, 55h, 55h, 55h, 55h, 50h, 5Ch, 5Dh, 5Eh, 5,
			50h, 5Ch, 5Dh, 0EDh, 0CDh, 0DEh, 0DCh, 0DEh, 0DCh,
			0DEh, 0DCh, 85h, 85h, 85h, 5, 15h, 25h, 35h, 0C5h,
			0D5h, 0E5h, 5, 15h, 25h, 35h, 0C5h, 0D5h, 0E5h, 0C5h,
			0D5h, 0E5h, 0FEh, 85h, 40h, 0B0h, 0B1h, 0B2h, 0BCh,
			0BDh, 80h, 81h, 82h, 8Ch, 8Dh, 5Eh, 15h, 25h, 35h,
			0C5h, 0D5h, 0E5h, 0C5h, 0D5h, 0E5h, 5, 5, 0E5h, 5,
			0E5h, 5, 0E5h, 5, 0E5h, 5, 5, 5, 5, 5, 5, 5, 5, 5,
			5, 5, 5, 5, 5, 0B1h, 0E1h, 0D1h, 0B1h, 0E1h, 0D1h,
			81h, 1, 81h, 1, 81h, 1, 0B1h, 0E1h, 0D1h, 5, 5, 0C5h,
			0D5h, 0E5h, 95h, 0B5h, 0A5h, 5, 0C5h, 0D5h, 0E5h, 95h,
			0A5h, 0B5h, 0C5h, 0D5h, 0E5h, 95h, 0A5h, 0B5h, 5, 15h,
			25h, 35h, 5, 15h, 25h, 35h, 0C5h, 0D5h, 0E5h, 65h,
			75h, 85h, 95h, 0A5h, 0B5h, 0C5h, 0D5h, 0E5h, 65h, 75h,
			85h, 95h, 0A5h, 0B5h, 0BCh, 0BDh, 9Eh, 0AEh, 8Ch, 8Dh,
			6Eh, 7Eh, 6Ah, 7Bh, 8Ah, 86h, 87h, 68h, 78h, 89h, 8Ah,
			6Bh, 7Bh, 0E6h, 0E7h, 0C8h, 0D8h, 0E9h, 0EAh, 0CBh,
			0DBh, 0A6h, 0B7h, 0A8h, 0A9h, 0BAh, 0ABh, 0C5h, 0D5h,
			0E5h, 0C5h, 0D5h, 0E5h, 0C5h, 0D5h, 0E5h, 0C5h, 0D5h,
			0E5h, 0C5h, 0D5h, 0E5h, 0C5h, 0D5h, 0E5h, 5, 0C5h,
			0D5h, 0E5h, 0E5h, 55h, 0EDh, 0CEh, 0DEh, 0ECh, 0A0h,
			0B0h, 0BDh, 0AEh, 0Ah, 0Bh, 0DBh, 0EAh, 80h, 50h, 10h,
			20h, 30h, 9Ah, 0BAh, 0CAh, 8, 5, 1, 2, 3, 0A9h, 0ABh,
			0ACh, 0A0h, 0B0h, 0BDh, 0AEh, 0Ah, 0Bh, 0DBh, 0EAh,
			80h, 50h, 10h, 20h, 30h, 9Ah, 0BAh, 0CAh, 8, 5, 1,
			2, 3, 0A9h, 0ABh, 0ACh, 0E0h, 0EDh, 0Dh, 0CDh, 0Eh,
			0DEh, 0D0h, 0DCh, 0Eh, 0DEh, 0D0h, 0DCh, 8, 5, 1, 2,
			3, 0A9h, 0ABh, 0ACh, 0Bh, 0DBh, 0A0h, 0AEh, 0A9h, 0ABh,
			0ACh, 0Bh, 0DBh, 0A0h, 0AEh, 0Eh, 0DEh, 0D0h, 0DCh,
			8, 5, 1, 2, 3, 8, 5, 1, 2, 3, 0A9h, 0ABh, 0ACh, 0Bh,
			0DBh, 0A0h, 0AEh, 0Eh, 0DEh, 0D0h, 0DCh, 9Ah, 0BAh,
			0CAh, 0B0h, 0BDh, 0Ah, 0EAh, 0E0h, 0EDh, 0Dh, 0CDh,
			80h, 50h, 10h, 20h, 30h, 80h, 50h, 10h, 20h, 30h, 9Ah,
			0BAh, 0CAh, 0B0h, 0BDh, 0Ah, 0EAh, 0E0h, 0EDh, 0Dh,
			0CDh, 8, 5, 1, 2, 3, 0A9h, 0ABh, 0ACh, 0Bh, 0DBh, 0A0h,
			0AEh, 0Eh, 0DEh, 0D0h, 0DCh, 80h, 50h, 10h, 20h, 30h,
			9Ah, 0BAh, 0CAh, 0B0h, 0BDh, 0Ah, 0EAh, 0E0h, 0EDh,
			0Dh, 0CDh, 8, 5, 1, 2, 3, 0A9h, 0ABh, 0ACh, 0Bh, 0DBh,
			0A0h, 0AEh, 0Eh, 0DEh, 0D0h, 0DCh, 80h, 50h, 10h, 20h,
			30h, 9Ah, 0BAh, 0CAh, 0B0h, 0BDh, 0Ah, 0EAh, 0E0h,
			0EDh, 0Dh, 0CDh, 8, 5, 1, 2, 3, 0A9h, 0ABh, 0ACh, 0Bh,
			0DBh, 0A0h, 0AEh, 0Eh, 0DEh, 0D0h, 0DCh, 80h, 50h,
			10h, 20h, 30h, 9Ah, 0BAh, 0CAh, 0B0h, 0BDh, 0Ah, 0EAh,
			0E0h, 0EDh, 0Dh, 0CDh, 8, 5, 1, 2, 3, 0A9h, 0ABh, 0ACh,
			0Bh, 0DBh, 0A0h, 0AEh, 0Eh, 0DEh, 0D0h, 0DCh, 80h,
			50h, 10h, 20h, 30h, 9Ah, 0BAh, 0CAh, 0B0h, 0BDh, 0Ah,
			0EAh, 0E0h, 0EDh, 0Dh, 0CDh, 0CDh, 35h, 0E5h, 15h,
			25h, 35h, 0C5h, 0D5h, 0E5h, 0C5h, 0D5h, 0E5h, 0E5h,
			65h, 75h, 85h, 95h, 0A5h, 0B5h, 65h, 75h, 85h, 65h,
			75h, 85h),

	b46EB(*) BYTE public DATA(18h, 26h, 18h, 18h, 18h, 18h, 0, 12h, 12h, 12h, 2Eh,
			27h, 27h, 27h, 2Dh, 2Ah, 2Dh, 2Ah, 2Bh, 28h, 2Ch, 29h,
			0, 0, 0, 12h, 7, 5, 2, 7, 5, 2, 12h, 7, 5, 2, 7, 5,
			2, 7, 5, 2, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12h, 12h, 2, 12h, 2,
			12h, 2, 12h, 2, 12h, 12h, 12h, 12h, 12h, 12h, 12h,
			12h, 12h, 12h, 12h, 12h, 12h, 12h, 0Ah, 9, 0Bh, 0Ah,
			9, 0Bh, 17h, 17h, 17h, 17h, 17h, 17h, 23h, 22h, 24h,
			12h, 12h, 1Eh, 1Eh, 1Dh, 1Fh, 20h, 1Ch, 12h, 12h, 12h,
			12h, 12h, 12h, 2, 12h, 12h, 12h, 0Dh, 10h, 13h, 12h,
			7, 5, 2, 12h, 7, 5, 2, 7, 5, 2, 7, 5, 2, 7, 5, 2, 7,
			5, 2, 7, 5, 2, 7, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1Ch,
			20h, 1Ch, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
			2, 2, 1Ch, 20h, 1Ch, 1Ch, 20h, 1Ch, 7, 5, 2, 7, 5,
			2, 7, 5, 2, 7, 5, 2, 7, 5, 2, 7, 5, 2, 0, 0, 0, 0,
			0, 0, 2, 2, 2, 2, 1Ch, 20h, 20h, 1Ch, 1Ch, 20h, 20h,
			1Ch, 12h, 12h, 12h, 12h, 12h, 1Ah, 21h, 1Ch, 12h, 12h,
			12h, 12h, 12h, 1Ah, 21h, 1Ch, 1Ch, 20h, 20h, 1Ch, 1Ch,
			20h, 20h, 1Ch, 12h, 12h, 12h, 12h, 12h, 1Ah, 21h, 1Ch,
			12h, 12h, 12h, 12h, 12h, 1Ah, 21h, 1Ch, 1Bh, 1Dh, 19h,
			1Dh, 1Bh, 1Dh, 19h, 1Dh, 1Bh, 1Dh, 19h, 1Dh, 12h, 12h,
			12h, 12h, 12h, 1Ah, 21h, 1Ch, 20h, 20h, 1Ch, 1Ch, 1Ah,
			21h, 1Ch, 20h, 20h, 1Ch, 1Ch, 1Bh, 1Dh, 19h, 1Dh, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 1Ah, 21h, 1Ch, 20h, 20h,
			1Ch, 1Ch, 1Bh, 1Dh, 19h, 1Dh, 1Ah, 21h, 1Ch, 20h, 20h,
			1Ch, 1Ch, 1Bh, 1Dh, 19h, 1Dh, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 1Ah, 21h, 1Ch, 20h, 20h, 1Ch, 1Ch, 1Bh, 1Dh,
			19h, 1Dh, 12h, 12h, 12h, 12h, 12h, 0Eh, 16h, 11h, 15h,
			15h, 11h, 11h, 0Fh, 14h, 0Ch, 14h, 12h, 12h, 12h, 12h,
			12h, 0Eh, 16h, 11h, 15h, 15h, 11h, 11h, 0Fh, 14h, 0Ch,
			14h, 12h, 12h, 12h, 12h, 12h, 0Eh, 16h, 11h, 15h, 15h,
			11h, 11h, 0Fh, 14h, 0Ch, 14h, 12h, 12h, 12h, 12h, 12h,
			0Eh, 16h, 11h, 15h, 15h, 11h, 11h, 0Fh, 14h, 0Ch, 14h,
			12h, 12h, 12h, 12h, 12h, 0Eh, 16h, 11h, 15h, 15h, 11h,
			11h, 0Fh, 14h, 0Ch, 14h, 12h, 12h, 12h, 12h, 12h, 0Eh,
			16h, 11h, 15h, 15h, 11h, 11h, 0Fh, 14h, 0Ch, 14h, 12h,
			12h, 12h, 12h, 12h, 0Eh, 16h, 11h, 15h, 15h, 11h, 11h,
			0Fh, 14h, 0Ch, 14h, 12h, 12h, 12h, 12h, 12h, 0Eh, 16h,
			11h, 15h, 15h, 11h, 11h, 0Fh, 14h, 0Ch, 14h, 25h, 26h,
			26h, 0, 0, 0, 0, 0, 0, 7, 5, 2, 2, 7, 5, 2, 7, 5, 2,
			7, 5, 2, 7, 5, 2),

	w48DF(*) ADDRESS public DATA(0, 1, 1000h, 1000h, 2000h, 2000h, 2000h, 4000h, 4000h,
			5000h, 6008h, 6000h, 5080h, 8040h, 0D088h, 3010h, 8008h,
			9008h, 8000h, 8001h, 9000h, 0A008h, 0D088h, 0C000h,
			0F000h, 5080h, 0D088h, 3010h, 9008h, 9000h, 0A000h,
			0B008h, 0A008h, 0D088h, 0D000h, 0E008h, 0E000h, 0E000h,
			0F000h, 0F000h, 0B000h, 0B000h, 0B000h, 0E000h, 0E000h,
			0E000h, 0C000h),

	w493D(*) ADDRESS public DATA(123h, 123h, 124h, 126h, 134h, 143h, 163h, 423h, 623h,
			624h, 634h, 634h, 4026h, 4123h, 4126h, 4106h, 4123h,
			4126h, 4123h, 4123h, 4126h, 4136h, 4326h, 4623h, 4666h,
			6024h, 6124h, 6104h, 6124h, 6124h, 6134h, 6114h, 6134h,
			6324h, 6624h, 6634h, 6634h, 6663h, 6664h, 6666h, 5146h,
			5164h, 5154h, 5346h, 5364h, 5354h, 5623h),

	b499B(*) BYTE public DATA(10h, 10h, 20h, 20h, 10h, 10h, 2, 2, 5, 5, 5, 5, 1,
			3, 1, 6, 3, 3, 3, 1Ch, 10h, 4, 2, 2, 20h, 20h, 20h,
			0Eh, 7, 4, 8, 7, 7, 6, 6, 6, 20h, 10h, 10h, 10h, 20h,
			20h, 10h, 10h, 3, 7, 7, 3, 7, 7, 3, 1, 1, 1, 1, 1,
			1, 1, 6, 3, 1, 0Eh, 4, 2, 6, 0Dh, 1, 1, 1, 1, 1, 4,
			1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 3, 3, 3, 1Ch, 2, 1, 1),

	b4A21(*) BYTE public DATA(3Fh, 40h, 44h, 43h, 41h, 42h, 60h, 6Ch, 6Ch, 6Ch, 61h,
			64h, 5Fh, 5Fh, 0EBh, 0EFh, 0EBh, 0EFh, 0EBh, 0EFh,
			0EBh, 0EFh, 21h, 22h, 23h, 24h, 24h, 24h, 24h, 27h,
			27h, 27h, 25h, 25h, 25h, 25h, 28h, 28h, 28h, 29h, 29h,
			29h, 3Bh, 26h, 3Ch, 3Dh, 3Dh, 3Dh, 3Eh, 3Eh, 14h, 14h,
			14h, 14h, 14h, 16h, 17h, 17h, 17h, 17h, 17h, 17h, 17h,
			17h, 17h, 4Ch, 45h, 1Ch, 46h, 1Dh, 47h, 1Eh, 48h, 1Fh,
			49h, 4Ah, 4Bh, 4Dh, 4Eh, 4Fh, 50h, 51h, 52h, 53h, 54h,
			55h, 56h, 57h, 0FEh, 0FBh, 0FAh, 0FEh, 0FBh, 0FAh,
			0F7h, 0F8h, 0F7h, 0F8h, 0F7h, 0F8h, 0FEh, 0FBh, 0FAh,
			5Eh, 5Ah, 0F9h, 0FAh, 0FBh, 0FCh, 0FEh, 0FDh, 5Bh,
			62h, 62h, 62h, 9, 9, 12h, 63h, 63h, 63h, 5Ch, 5Ch,
			5Dh, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3,
			3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 58h, 58h, 6Fh, 6Fh, 59h,
			59h, 59h, 59h, 0E5h, 0E6h, 0E7h, 59h, 59h, 59h, 59h,
			65h, 65h, 65h, 65h, 59h, 59h, 59h, 59h, 65h, 65h, 65h,
			65h, 0E5h, 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 2, 2, 2, 68h,
			68h, 68h, 69h, 69h, 69h, 3, 3, 3, 6Ah, 6Ah, 6Ah, 6Bh,
			6Bh, 6Bh, 1Bh, 20h, 20h, 20h, 1Bh, 1Bh, 39h, 39h, 39h,
			39h, 0F3h, 0F4h, 0F5h, 0F6h, 0F3h, 0F4h, 0F5h, 0F6h,
			2Ah, 2Bh, 2Ch, 2Ch, 2Ch, 0F0h, 0F1h, 0F2h, 2Ah, 2Bh,
			2Ch, 2Ch, 2Ch, 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h,
			0F6h, 0F3h, 0F4h, 0F5h, 0F6h, 2Ah, 2Bh, 2Ch, 2Ch, 2Ch,
			0F0h, 0F1h, 0F2h, 2Ah, 2Bh, 2Ch, 2Ch, 2Ch, 0F0h, 0F1h,
			0F2h, 0EDh, 0EBh, 0EEh, 0EFh, 0EDh, 0EBh, 0EEh, 0EFh,
			0EDh, 0EBh, 0EEh, 0EFh, 2Ah, 2Bh, 2Ch, 2Ch, 2Ch, 0F0h,
			0F1h, 0F2h, 0F4h, 0F5h, 0F3h, 0F6h, 0F0h, 0F1h, 0F2h,
			0F4h, 0F5h, 0F3h, 0F6h, 0EDh, 0EBh, 0EEh, 0EFh, 2Ah,
			2Bh, 2Ch, 2Ch, 2Ch, 2Ah, 2Bh, 2Ch, 2Ch, 2Ch, 0B2h,
			0B3h, 0B4h, 0B5h, 0B6h, 0B7h, 0B8h, 0AEh, 0AFh, 0B0h,
			0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h, 0B8h, 0AEh,
			0AFh, 0B0h, 0B1h, 2Ah, 2Bh, 2Ch, 2Ch, 2Ch, 2Ah, 2Bh,
			2Ch, 2Ch, 2Ch, 0F0h, 0F1h, 0F2h, 0F4h, 0F5h, 0F3h,
			0F6h, 0EDh, 0EBh, 0EEh, 0EFh, 2Dh, 2Eh, 2Fh, 2Fh, 2Fh,
			0D3h, 0D4h, 0D5h, 0D6h, 0D7h, 0D8h, 0D9h, 0CFh, 0D0h,
			0D1h, 0D2h, 2Dh, 2Eh, 2Fh, 2Fh, 2Fh, 0D3h, 0D4h, 0D5h,
			0D6h, 0D7h, 0D8h, 0D9h, 0CFh, 0D0h, 0D1h, 0D2h, 36h,
			37h, 38h, 38h, 38h, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h,
			0E4h, 0DAh, 0DBh, 0DCh, 0DDh, 36h, 37h, 38h, 38h, 38h,
			0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0DAh, 0DBh,
			0DCh, 0DDh, 30h, 31h, 32h, 32h, 32h, 0BDh, 0BEh, 0BFh,
			0C0h, 0C1h, 0C2h, 0C3h, 0B9h, 0BAh, 0BBh, 0BCh, 30h,
			31h, 32h, 32h, 32h, 0BDh, 0BEh, 0BFh, 0C0h, 0C1h, 0C2h,
			0C3h, 0B9h, 0BAh, 0BBh, 0BCh, 33h, 34h, 35h, 35h, 35h,
			0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0C4h, 0C5h,
			0C6h, 0C7h, 33h, 34h, 35h, 35h, 35h, 0C8h, 0C9h, 0CAh,
			0CBh, 0CCh, 0CDh, 0CEh, 0C4h, 0C5h, 0C6h, 0C7h, 66h,
			0, 1, 17h, 17h, 17h, 17h, 17h, 17h, 2, 2, 2, 70h, 2,
			2, 2, 3, 3, 3, 2, 2, 2, 3, 3, 3),

	b4C15(*) BYTE public DATA(21h, 42h, 42h, 43h, 41h, 24h, 34h, 43h, 42h, 42h, 42h,
			43h, 45h, 45h, 52h, 53h, 50h, 50h, 0, 0, 60h, 10h,
			70h, 70h),

	b4C2D(*) BYTE public DATA(79h, 1, 61h, 61h, 61h, 61h, 89h, 88h, 89h, 1, 89h,
			89h, 49h, 89h, 89h, 89h, 69h, 89h, 8Fh, 6Fh, 80h, 60h,
			80h, 80h),

	b4C45(*) BYTE public DATA(63h, 0, 37h, 46h, 4, 5, 6, 3Bh, 3Ch, 3, 3Ah, 3, 4,
			4, 6, 3Ah, 3Bh, 3Bh, 5, 6, 3, 4, 5, 4, 5, 6, 5, 5,
			7, 7, 8, 8, 9, 9, 0Bh, 0Bh, 0Ch, 3Bh, 3Ch, 3Ch, 3Ch,
			3Dh, 3Eh, 3Eh, 3Fh, 3Fh, 40h, 40h, 3, 2, 2, 39h, 1,
			2, 4, 4, 38h, 39h, 1, 38h, 3, 4, 4, 5, 7, 8, 3Bh, 3Ch,
			3, 3, 3Ah, 1, 38h, 3, 5, 6, 7, 9, 0Ah, 3Ch, 3Dh, 3Eh,
			2, 39h, 1, 2, 3, 4, 38h, 39h, 2, 2, 4, 4, 5, 39h, 39h,
			1, 2, 4, 2, 4, 5, 6, 8, 9, 39h, 3Bh, 3Ch, 3Dh, 38h),

	b4CB4(*) BYTE public DATA(63h, 0, 1, 32h, 1, 2, 2, 1, 2, 1, 1, 1, 0Bh, 0Dh, 0Dh,
			1, 0Bh, 0Dh, 1, 0Bh, 1, 0Bh, 0Dh, 1, 0Bh, 0Dh, 11h,
			13h, 11h, 13h, 11h, 1Bh, 19h, 1Bh, 19h, 1Bh, 19h, 1,
			0Bh, 11h, 13h, 0Dh, 11h, 13h, 11h, 1Bh, 19h, 1Bh, 1,
			2, 1, 1, 1, 2, 1, 2, 1, 2, 2Fh, 2Fh, 2Fh, 2Dh, 2Fh,
			2Dh, 2Dh, 2Dh, 2Dh, 2Dh, 2Dh, 2Fh, 2Dh, 3, 3, 3, 29h,
			29h, 29h, 29h, 29h, 29h, 29h, 29h, 3, 3, 1, 1, 1, 1,
			1, 1, 1Dh, 1Fh, 1Dh, 1Fh, 1Dh, 1Dh, 1Fh, 3, 3, 3, 2Bh,
			2Bh, 2Bh, 2Bh, 2Bh, 2Bh, 2Bh, 2Bh, 2Bh, 2Bh, 3),

	b4D23(*) BYTE public DATA(1, 47h, 47h, 47h, 0, 0, 0, 0, 0, 0, 0, 0, 49h, 49h,
			49h, 0, 47h, 1, 47h, 47h, 0, 0, 0, 0, 0, 0, 0, 0, 31h,
			49h, 49h, 0, 47h, 47h, 1, 61h, 0, 0, 0, 0, 0, 0, 0,
			0, 49h, 31h, 63h, 0, 47h, 47h, 61h, 1, 0, 0, 0, 0,
			0, 0, 0, 0, 49h, 63h, 31h, 0, 9, 0Dh, 0Ch, 0Bh, 1,
			0, 30h, 30h, 30h, 0, 0, 0, 0Eh, 13h, 12h, 0, 32h, 32h,
			32h, 32h, 0, 1, 0, 0, 0, 0, 0, 0, 30h, 30h, 30h, 0,
			34h, 35h, 35h, 35h, 0, 0, 1, 52h, 52h, 0, 0, 0, 36h,
			37h, 37h, 0, 34h, 64h, 64h, 64h, 0, 0, 52h, 1, 61h,
			0, 0, 0, 65h, 65h, 65h, 0, 3Ah, 3Ah, 3Ah, 3Ah, 0, 0,
			52h, 61h, 1, 0, 0, 0, 3Ch, 3Ch, 3Ch, 0, 38h, 39h, 39h,
			39h, 0, 0, 2, 53h, 53h, 1, 52h, 52h, 4Ah, 4Ah, 4Bh,
			0, 38h, 6Ah, 6Ah, 6Ah, 0, 0, 53h, 2, 6Eh, 52h, 1, 61h,
			65h, 65h, 66h, 0, 3Bh, 3Bh, 3Bh, 3Bh, 0, 0, 53h, 6Eh,
			2, 52h, 61h, 1, 45h, 45h, 3Eh, 0, 48h, 2, 48h, 48h,
			0, 0, 0, 0, 0, 0, 0, 0, 1, 52h, 52h, 0, 48h, 48h, 2,
			6Eh, 0, 0, 0, 0, 0, 0, 0, 0, 52h, 1, 61h, 0, 48h, 48h,
			6Eh, 2, 0, 0, 0, 0, 0, 0, 0, 0, 52h, 61h, 1, 0, 0Ah,
			11h, 10h, 0Fh, 0, 0, 0, 0, 0, 30h, 30h, 30h, 16h, 15h,
			14h, 1, 33h, 33h, 33h, 33h, 0, 0, 0, 0, 0, 0, 0, 0,
			30h, 30h, 30h, 0, 0, 0, 0, 0, 0, 0, 30h, 30h, 30h,
			30h, 30h, 30h, 0, 0, 0, 0, 4Bh, 4Ch, 4Ch, 4Ch, 0, 0,
			4Ah, 4Ah, 4Bh, 0, 0, 0, 4Dh, 4Dh, 4Dh, 0, 66h, 67h,
			67h, 67h, 0, 0, 65h, 65h, 66h, 0, 0, 0, 68h, 68h, 68h,
			0, 3Dh, 3Fh, 3Fh, 3Fh, 0, 0, 44h, 44h, 3Dh, 0, 0, 0,
			40h, 40h, 40h, 0, 50h, 51h, 51h, 51h, 0, 0, 4Fh, 4Fh,
			50h, 4Ah, 4Ah, 4Bh, 4Dh, 4Dh, 4Eh, 0, 6Ch, 6Dh, 6Dh,
			6Dh, 0, 0, 6Bh, 6Bh, 6Ch, 65h, 65h, 66h, 68h, 68h,
			69h, 0, 42h, 43h, 43h, 43h, 0, 0, 46h, 46h, 42h, 44h,
			44h, 3Dh, 40h, 40h, 41h, 0, 47h, 1, 47h, 47h, 0, 0,
			0, 0, 0, 0, 0, 0, 1, 52h, 52h, 0, 47h, 47h, 1, 61h,
			0, 0, 0, 0, 0, 0, 0, 0, 52h, 1, 61h, 0, 47h, 47h, 61h,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 52h, 61h, 1, 0, 8, 8, 8,
			7, 0, 3, 0, 0, 0, 0, 0, 0, 6, 5, 4, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 19h, 18h, 17h, 19h, 18h, 17h, 0, 0, 0, 0, 2Dh, 2Fh,
			2Eh, 2Eh, 0, 0, 2Bh, 2Ah, 2Ch, 1Dh, 1Ch, 1Eh, 23h,
			22h, 24h, 0, 59h, 60h, 5Fh, 5Fh, 0, 0, 58h, 58h, 58h,
			54h, 54h, 54h, 5Dh, 5Ch, 5Eh, 0, 28h, 28h, 27h, 27h,
			0, 0, 29h, 26h, 25h, 19h, 18h, 17h, 1Dh, 1Ch, 1Eh,
			0, 59h, 58h, 58h, 58h, 0, 0, 0, 0, 0, 0, 0, 0, 54h,
			54h, 54h, 0, 55h, 54h, 54h, 54h, 0, 0, 0, 0, 0, 0,
			0, 0, 54h, 54h, 54h, 0, 1Fh, 21h, 20h, 20h, 0, 0, 1Dh,
			1Ch, 1Eh, 0, 0, 0, 23h, 22h, 22h, 0, 55h, 5Bh, 5Ah,
			5Ah, 0, 0, 54h, 54h, 54h, 0, 0, 0, 5Dh, 5Ch, 5Ch, 0,
			1Bh, 1Bh, 1Ah, 1Ah, 0, 0, 19h, 18h, 17h, 0, 0, 0, 1Dh,
			1Ch, 1Ch, 0, 55h, 54h, 54h, 54h, 0, 0, 0, 0, 0, 0,
			0, 0, 56h, 56h, 56h, 0, 54h, 55h, 55h, 55h, 0, 0, 0,
			0, 0, 0, 0, 0, 57h, 57h, 57h, 0),

	b4FA3(*) BYTE public DATA(17h, 16h, 16h, 16h, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2,
			2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5,
			5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6,
			7, 8, 8, 9, 9, 9, 9, 9, 9, 0Ah, 0Ah, 0Bh, 0Ch, 0Ch,
			0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Dh, 0Dh, 0Dh, 0Eh, 0Eh, 0Fh,
			10h, 10h, 10h, 10h, 10h, 10h, 10h, 10h, 11h, 11h, 12h,
			12h, 12h, 12h, 12h, 12h, 13h, 13h, 13h, 13h, 13h, 13h,
			13h, 14h, 14h, 14h, 14h, 14h, 14h, 14h, 14h, 14h, 14h,
			14h, 14h, 14h, 14h),

	b5012(*) BYTE public DATA(6, 8, 0Ah, 3Ah, 0Ah, 6, 7, 0Fh, 6Dh, 9, 12h, 11h, 10h,
			10h, 0Dh, 0Ch, 0Bh, 0Bh, 4, 4, 0Eh, 5, 0, 0),

	w502A(*) ADDRESS public DATA(0, 1, 2, 3, 4, 8, 9, 0Ah, 10h, 0FDh, 0FEh, 0FFh, 0FFFDh,
			0FFFEh, 0FFFFh),

	b5048(*) BYTE public DATA(0, 2Ah, 0, 2Ah, 0, 32h, 0, 32h, 0, 2Ah, 2Ah, 0, 2Ah,
			0, 5Ah, 2, 0Ah, 0, 2, 0, 9, 9, 11h, 11h, 19h, 71h,
			59h, 69h, 51h, 61h, 1, 1, 1, 0, 1, 1, 0, 0Ah, 0Ah,
			12h, 12h, 1Ah, 72h, 5Ah, 6Ah, 52h, 62h, 2, 2, 2, 0,
			0, 11h, 21h, 29h, 39h, 41h, 9, 9, 0, 9, 9, 0, 8, 0,
			59h, 59h, 71h, 71h, 0, 0, 0, 0, 1, 1, 1, 5Bh, 73h,
			0, 1, 1, 1, 59h, 71h, 0, 2, 0Ah, 12h, 2, 0Ah, 12h,
			0, 1, 0, 1, 0, 1, 0, 1, 1, 0),

	b50AD(*) BYTE public DATA(0FFh, 22h, 0FFh, 22h, 0FFh, 22h, 0FFh, 22h, 0FFh, 22h,
			62h, 0FFh, 22h, 0FFh, 4, 4, 4, 0FFh, 50h, 0FFh, 64h,
			85h, 64h, 85h, 64h, 64h, 0A5h, 64h, 0A5h, 64h, 64h,
			5, 4, 0FFh, 64h, 5, 0FFh, 64h, 85h, 64h, 85h, 64h,
			64h, 0A5h, 64h, 0A5h, 64h, 64h, 5, 4, 0FFh, 4, 4, 4,
			4, 4, 4, 64h, 4, 0FFh, 64h, 4, 0FFh, 4, 0FFh, 25h,
			24h, 64h, 4, 4, 0FFh, 4, 0FFh, 64h, 5, 4, 24h, 4, 0FFh,
			64h, 5, 4, 25h, 64h, 0FFh, 14h, 14h, 14h, 4, 4, 4,
			0FFh, 4, 0FFh, 4, 0FFh, 4, 0FFh, 14h, 4, 0FFh),

	b5112(*) BYTE public DATA(5Ah, 61h, 69h, 92h, 92h, 92h, 91h, 91h, 91h, 5Dh, 0D3h,
			0D3h, 0DCh, 9Bh, 9Bh, 98h, 98h, 1Ah),

	b5124(*) BYTE public DATA(2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0Eh, 1, 1, 1, 1,
			1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 1, 1, 1,
			1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 6, 1, 0, 0, 0,
			0, 3, 0, 9, 9, 8, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 9, 0Bh, 0Bh, 81h,
			99h, 91h, 91h, 91h, 81h, 89h, 89h, 89h, 8Ah, 80h, 80h,
			80h, 80h, 80h, 80h, 90h, 0A1h, 0A3h, 0A0h, 0A1h, 0A2h,
			0B0h, 0A0h, 0A0h, 0A0h, 0A0h, 0A0h, 0A3h, 0A3h, 0,
			0, 0, 0, 0, 0, 0, 0, 41h, 41h, 41h, 40h, 0, 0, 0, 0,
			0, 0C0h, 0C0h, 0C0h, 0C0h, 0C0h, 0D8h, 41h, 41h, 41h,
			0C0h),

	b51E3(*) BYTE public DATA(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 12h, 14h, 22h, 33h, 47h, 47h, 41h, 49h, 4Fh, 0,
			5Ch, 5Eh, 60h),

	b5202(*) BYTE public DATA(0, 0, 0, 0, 0, 0, 1, 3, 5, 7, 9, 0Ch, 0Eh, 0, 0, 0,
			0, 0, 0, 14h, 25h, 33h, 3Ch, 3Fh, 41h, 49h, 4Fh, 55h,
			0, 0, 62h),

	b5221(*) BYTE public DATA(0, 4Dh, 0, 55h, 0, 5Dh, 0, 66h, 0, 6Fh, 6Fh, 0, 77h,
			0, 0B6h, 8Dh, 0B6h, 0, 41h, 0, 2Dh, 2Dh, 2Eh, 2Eh,
			2Fh, 30h, 30h, 31h, 31h, 32h, 41h, 41h, 12h, 0, 1Fh,
			1Fh, 0, 30h, 30h, 31h, 31h, 32h, 2Dh, 2Dh, 2Eh, 2Eh,
			2Fh, 41h, 41h, 41h, 0, 0ADh, 42h, 43h, 44h, 2Ch, 46h,
			41h, 12h, 0, 41h, 12h, 0, 0ADh, 0, 41h, 12h, 41h, 12h,
			0ADh, 0, 0ADh, 0, 41h, 41h, 12h, 0ADh, 0ADh, 0, 41h,
			41h, 12h, 20h, 20h, 0, 4Ah, 4Bh, 4Ch, 7Fh, 80h, 81h,
			0, 0Dh, 0, 0Eh, 0, 0Fh, 0, 10h, 11h, 0),

	b5286(*) BYTE public DATA(0Ch, 9, 0, 1, 8, 0, 0),

	b528D(*) BYTE public DATA(0, 0, 0, 0, 0, 0, 2, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1,
			8, 4, 4, 4, 5, 5, 5, 6, 6, 6, 0Ah, 9, 8, 3, 3, 1, 1,
			6, 2, 2, 0, 0, 0Bh),

	b52B5(*) BYTE public DATA(0, 1, 2, 3, 4, 8, 1, 2, 3, 1, 2, 3, 1, 2, 3, 4, 8,
			4, 1, 2, 3, 1, 2, 3, 1, 2, 3, 8, 8, 0Ah, 0Ah, 9, 0Ah,
			9, 9, 0Ah, 9, 0Ah, 9, 9),

	b52DD(*) BYTE public DATA(0, 1, 2, 3, 4, 0, 0, 0, 5, 26h, 25h, 0, 0Ch, 0Dh, 0Eh,
			0Fh, 0, 0, 0, 10h, 21h, 20h, 0, 6, 7, 8, 0, 0, 0, 0,
			0, 24h, 23h, 0, 9, 0Ah, 0Bh, 0, 0, 0, 0, 0, 1Fh, 1Eh,
			0, 12h, 13h, 14h, 0, 0, 0, 0, 0, 0, 0, 0, 15h, 16h,
			17h, 0, 0, 0, 0, 0, 0, 0, 0, 18h, 19h, 1Ah, 0, 0, 0,
			0, 0, 22h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 11h, 0, 0, 0, 0, 0, 1Dh, 0, 0, 0, 0, 0, 0, 0,
			0, 1Ch, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1Bh, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 27h, 0);



wrFragData: procedure public;
	if not (PRINT or OBJECT) then
	do;
		if buf$C1E7(0) = 9Ah or buf$C1E7(0) = 9Bh or buf$C1E7(0) = 0A3h then
			programErrCnt = programErrCnt + 1;  
		return;
	end;
	call fwrite(.tx1File, .buf$C1E7, bC1E6);
end;


putTx1Byte: procedure(arg1b) public;
	declare arg1b byte;
	buf$C1E7(bC1E6) = arg1b;
	bC1E6 = bC1E6 + 1;
end;


putTx1Word: procedure(arg1w) public;
	declare arg1w address;
	call putTx1Byte(low(arg1w));
	call putTx1Byte(high(arg1w));
end;

encodeFragData: procedure(arg1b) public;
	declare arg1b byte;

	sub$5410: procedure;
		declare (bC214, bC215) byte;

		sub$545D: procedure;
			declare j byte;
			j = wC1DC(bC214);
			if wC1DC(0) <= 12 then
			do;
				if bC1E6 = bC215 then
					call putTx1Byte(j);
				else	
					buf$C1E7(bC215)  = ROL(buf$C1E7(bC215), 4) or j;
			end;
			bC214 = bC214 + 1;  
			if j > 7 then
			do;
				if j = 8 or j = 13 or j = 10 then
					call putTx1Byte(wC1DC(bC214));
				else
					call putTx1Word(wC1DC(bC214));

				bC214 = bC214 + 1;  
				if j >= 10 and j < 12 then
				do;
					call putTx1Word(wC1DC(bC214));
					bC214 = bC214 + 1;  
				end;
				else if j = 12 then
				do;
					call putTx1Word(wC1DC(bC214));
					call putTx1Word(wC1DC(bC214+1));
					bC214 = bC214 + 2;
				end;
			end;
		end sub$545D;

/* sub$5410 */	bC214 = 0;
		bC215 = bC1E6;
		if (shr(b4029(arg1b), 4) and 7) <> 0 then
		do;
			call sub$545D;
			if wC1DC(bC214) <> 0 or wC1DC(0) <= 12 then
				call sub$545D;
		end;
	end sub$5410;

/* encodeFragData */
	bC1E6 = 0;
	call putTx1Byte(arg1b);
	if rol(b4029(arg1b), 1) then
		call putTx1Byte(curOp);
	call sub$5410;
	call FILL(10, .wC1DC(0), 0);
	call wrFragData;
end;



emitTopItem: procedure public;
	bC1E6 = 0;
	if not PRINT then
		if tx2opc(tx2qp) = T2$LINEINFO or tx2opc(tx2qp) = T2$INCLUDE then
			return;
	call putTx1Byte(tx2opc(tx2qp));
	if rol(b4029(tx2opc(tx2qp)), 1) then
	do;
		call putTx1Byte(tx2op2(tx2qp));
		call putTx1Word(tx2op1(tx2qp));
	end;
	else 
		do case b5124(tx2opc(tx2qp)) and 3;
			;
			call putTx1Word(tx2op1(tx2qp));
			do;
				call putTx1Word(tx2op1(tx2qp));
				call putTx1Word(tx2op2(tx2qp));
			end;
			do;
				call putTx1Word(tx2op1(tx2qp));
				call putTx1Word(tx2op2(tx2qp));
				call putTx1Word(tx2op3(tx2qp));
			end;
		end;
	call wrFragData;
end;

tx2SyntaxError: procedure(arg1b) public;
	declare arg1b byte;
	tx2opc(tx2qp) = T2$SYNTAXERROR;
	tx2op1(tx2qp) = arg1b;
end;

sub$5679: procedure(arg1b) byte public;
	declare arg1b byte;
	if arg1b = 0 then
		return shr(b44F7(wC1D6), 4);
	else
		return b44F7(wC1D6) and 0fh;
end;

sub$56A0: procedure(arg1b, arg2b) public;
	declare arg1b byte, arg2b byte;
	tx2opc(arg2b) = tx2opc(arg1b);
	tx2Aux1b(arg2b) = tx2Aux1b(arg1b);
	tx2Aux2b(arg2b) = tx2Aux2b(arg1b);
	tx2op1(arg2b) = tx2op1(arg1b);
	tx2op2(arg2b) = tx2op2(arg1b);
	tx2op3(arg2b) = tx2op3(arg1b);
	tx2Auxw(arg2b) = tx2Auxw(arg1b);
end;


sub$5748: procedure(arg1b) byte public;
	declare arg1b byte;
	if arg1b = 8 then
		return 2;
	else
		return arg1b + 2;
end;

sub$575E: procedure(arg1w) address public;
	declare arg1w address;
	declare i byte;

	curInfo$p = arg1w;
	i = getType;
	if i = BYTE$T then
		return 1;
	if i = ADDRESS$T then
		return 2;
	if i = STRUCT$T then
		return getParentOffset;
	/*  fall though appears suspect */
end;

sub$5795: procedure(arg1w) public;
	declare arg1w address;
	declare (p, q) address;
	p = arg1w + shl(wC1C3, 1);
	q = shr(p, 1) + (p and 1) + 2;
	if curOp = T2$RETURNWORD then
		q = q - 2;
	if q > 7 then
	do;
		if bC0B5(0) = 3 then
			call encodeFragData(CF$XCHG);
		wC1DC(0) = 9;
		wC1DC(1) = p;
		call encodeFragData(CF$6);
		call encodeFragData(CF$SPHL);
		if bC0B5(0) = 3 then
		do;
			call encodeFragData(CF$XCHG);
			pc = pc + 7;
		end;
		else 
			pc = pc + 5;
	end;
	else
	do;
		if p then
		do;
			call encodeFragData(CF$INXSP);
			pc = pc + 1;  
		end;
		do while p > 1;
			if bC0B5(0) = 3 then
				wC1DC(0) = 2;	/*  pop d */
			else
				wC1DC(0) = 3;	/*  pop h */
			wC1DC(1) = 8;
			call encodeFragData(CF$POP);
			pc = pc + 1;  
			p = p - 2;
		end;
	end;
	if arg1w > 0ff00h then
		wC1C3 = shr(-arg1w, 1);
	else
		wC1C3 = 0;
end;

enterBlk: procedure byte public;
	if blkSP < 14h then
	do;
		blkSP = blkSP + 1;  
		return TRUE;
	end;
	else
	do;
		if blkOverCnt = 0 then
		do;
		  call tx2SyntaxError(ERR204);	/*  LIMIT EXCEEDED: NUMBER OF ACTIVE */
						/*  PROCEDURES AND DO CASE GROUPS */
		  call emitTopItem;
		end;
		blkOverCnt = blkOverCnt + 1;  
		return FALSE;
	end;
end;



exitBlk: procedure byte public;
	if blkOverCnt > 0 then
	do; 
		blkOverCnt = blkOverCnt - 1;  
		return FALSE;
	end;
	else if blkSP > 0 then
	do; 
		blkSP = blkSP - 1;  
		return TRUE;
	end;
	else
	do;
		call tx2SyntaxError(ERR205);	/*  ILLEGAL NESTING OF BLOCKS, ENDS NOT BALANCED */
		call emitTopItem;
		return FALSE;
	end;
end;


sub$58F5: procedure(arg1b) public;
	declare arg1b byte;
	fatalErrorCode = arg1b;
	buf$C1E7(0) = 9ah;
	buf$C1E7(1) = fatalErrorCode;
	buf$C1E7(2) = 0;
	bC1E6 = 3;
	call wrFragData;

	do while blkSP > 0;
		if exitBlk then
		do;
			if procChainId > blkSP then
			do;
				curInfo$p = blkCurInfo(procChainId);
				call setDimension(pc);
				call setBaseVal(wC1C5);
				procChainId = procChainNext(procChainId);
				pc = wB488(procChainId);
				wC1C5 = wB4D8(procChainId);
			end;
		end;
	end;
	goto finalise;
end;


sub$597E: procedure public;
	declare (i, j, k, m, n) byte;
	bC0B2 = 0;
	bC0B1 = 0;
	do i = 0 to 3;
		boC069(i) = FALSE;
		boC072(i) = FALSE;
		boC07B(i) = FALSE;
		k = bC04E(i);
		n = b5124(tx2opc(k)) and 0c0h;
		if k <> 0 then
		do;
			boC060(i) = TRUE;
			if bC0B5(0) = i or bC0B5(1) = i then
			do;
				boC069(i) = TRUE;
				if i > 0 then
					bC0B2 = bC0B2 + 1;  
			end;
			if n = 0 or n = 80h then
			do;
				if tx2op3(k) = 0 then
				do;
					if tx2Aux1b(k) = bC045(i)
					  or (tx2Aux1b(k) = 0 and bC045(i) = 6) then
					do;
						if tx2Auxw(k) > 1 or boC069(i)
						  or (bC0B7(0) <> k and k <> bC0B7(1)) then
							boC072(i) = TRUE;
					end;
				end;
			end;
		end;
		else 
			boC060(i) = boC057(i);
	end;

	do i = 0 to 3;
		if boC072(i) then
		do;
			boC07B(i) = TRUE;
			m = boC069(i);
			j = 3;
			do while j > i;
				if boC072(j) then
				do;
					if bC04E(j) = bC04E(i) then
					do;
						boC072(j) = FALSE;
						if i <> 0 then
						do;
							boC072(i) = FALSE;
							m = m or  boC069(j);
						end;
					end;
				end;
				j = j - 1;
			end;
			if i <> 0 and not m then
				bC0B1 = bC0B1 + 1;  
		end;
	end;
end;


sub$5B96: procedure(arg1b, arg2b) public;
	declare arg1b byte, arg2b byte;
	bC04E(arg2b) = bC04E(arg1b);
	bC045(arg2b) = bC045(arg1b);
	wC084(arg2b) = wC084(arg1b);
	bC0A8(arg2b) = bC0A8(arg1b);
	wC096(arg2b) = wC096(arg1b);
	boC057(arg2b) = boC057(arg1b);
end;


sub$5C1D: procedure(arg1b) public;
	declare arg1b byte;
	declare i byte;
	call sub$597E;
	i, bC140(wC1C3) = bC04E(arg1b);
	if boC072(arg1b) then
		tx2op3(i) = wC1C3;

	if arg1b <> 0 then
		bC0C3(wC1C3) = shl(bC045(arg1b), 4) or (bC0A8(arg1b) and 0fh);
	else
		bC0C3(wC1C3) = 0B0h;
end;

sub$5C97: procedure(arg1b) public;
	declare arg1b byte;
	declare i byte;
	i, bC04E(arg1b) = bC140(wC1C3);
	if wC1C3 = tx2op3(i) then
		tx2op3(i) = 0;

	boC057(arg1b) = 0;
	bC045(arg1b) = shr(bC0C3(wC1C3), 4);
	bC0A8(arg1b) = bC0C3(wC1C3) and 0fh;
	if bC0A8(arg1b) > 7 then
		bC0A8(arg1b) = bC0A8(arg1b) or  0f0h;
end;


sub$5D27: procedure(arg1b) public;
	declare arg1b byte;
	if wC1C5 < shl(wC1C3 := wC1C3 + 1, 1) then
		wC1C5 = shl(wC1C3, 1);
	call sub$5C1D(arg1b);
	wC1DC(0) = arg1b;
	wC1DC(1) = 0Ah;
	wC1DC(2)= wC1C3;
	call encodeFragData(CF$PUSH);
	pc = pc + 1;  
end;


sub$5D6B: procedure(arg1b) public;
	declare arg1b byte;
	declare bC233 byte;

	sub$5E16: procedure	/*  nested */;
		do bC233 = 0 to 3;
			if boC072(bC233) then
				if not boC069(bC233) then
					call sub$5D27(bC233);
		end;
		if bC0B5(0) = arg1b then
			bC0B5(0) = 9;
		else
			bC0B5(1) = 9;
	end sub$5E16;

/* sub$5D6B */
	if boC072(arg1b) then
	do;
		if boC069(arg1b) then
			call sub$5E16;
		call sub$5D27(arg1b);
	end;
	else if boC069(arg1b) then
	do;
		do bC233 = 0 to 3;
			if bC04E(bC233) = bC04E(arg1b) then
			do;
				if bC233 <> arg1b then
				do;
					if bC045(bC233) = bC045(arg1b) then
					do;
						if bC0B5(0)  = arg1b then
							bC0B5(0) = bC233;
						else
							bC0B5(1) = bC233;
						return;
					end;
				end;
			end;
		end;
		call sub$5E16;
		call sub$5D27(arg1b);
	end;
end;




sub$5E66: procedure(arg1b) public;
	declare arg1b byte;
	declare (i, j, k) byte;
	j = bC0B7(0);
	k = bC0B7(1);
	bC0B7(0) = 0;
	bC0B7(1) = 0;
	arg1b = ROR(arg1b, 3);
	call sub$597E;
	do i = 0 to 3;
		if arg1b then
		do;
			if boC072(i) then
				call sub$5D27(i);
			boC057(i) = 0;
			bC04E(i) = 0;
			call sub$597E;
		end;
		arg1b = ROL(arg1b, 1);
	end;
	bC0B7(0) = j;
	bC0B7(1) = k;
end;


sub$5EE8: procedure public;
	declare i byte;
	call sub$5795(wC1C7);
	if (curInfo$p := blkCurInfo(procChainId)) <> 0 then
	do;
		if testInfoFlag(F$INTERRUPT) then
		do;
			do i = 0 to 3;
				wC1DC(0) = i;	/*  pop psw, pop b, pop d, pop h */
				wC1DC(1) = 8;
				call encodeFragData(CF$POP);
			end;
			call encodeFragData(CF$EI);
			pc = pc + 5;
		end;
	end;
end;


sub$5F4B: procedure(arg1w, arg2w, arg3b, arg4b) public;
	declare arg1w address, arg2w address, arg3b byte, arg4b byte;
	tx2op2(tx2qp) = arg1w;
	tx2op1(tx2qp) = arg2w;
	tx2Aux1b(tx2qp) = arg3b;
	tx2Aux2b(tx2qp) = arg4b;
	if arg4b = 8 then
		tx2opc(tx2qp) = T2$NUMBER;
	else
		tx2opc(tx2qp) = T2$VARIABLE;
end;

sub$5FBF: procedure(arg1b, arg2w$p, arg3w$p) public;
	declare arg1b byte, arg2w$p address, arg3w$p address;
	declare arg2w based arg2w$p address;
	declare arg3w based arg3w$p address;

	if tx2opc(arg1b) = T2$VARIABLE or tx2opc(arg1b) = T2$NUMBER then
	do;
		arg2w = tx2op2(arg1b);
		if (curInfo$p := tx2op1(arg1b)) = 0 then
			arg3w = 0;
		else if testInfoFlag(F$MEMBER) then
			arg3w = 0;
		else if testInfoFlag(F$BASED) then
			arg3w = 0;
		else if testInfoFlag(F$ABSOLUTE) then
			arg3w = 0;
		else if testInfoFlag(F$AUTOMATIC) then
			arg3w = 100h;
		else if testInfoFlag(F$EXTERNAL) then
			arg3w = 400h or getExternId;
		else if testInfoFlag(F$MEMORY) then
			arg3w = 800h;
		else if getType = PROC$T then
			arg3w = 1000h or getProcId;
		else if testInfoFlag(F$DATA) then
			arg3w = 200h;
		else
			arg3w = 2000h;
	end;
	else if arg1b = 0 then
	do; 
		arg2w = 0;
		arg3w = 0;
	end;
	else
	do;
		arg2w = 0;
		arg3w = 4000h;
	end;
end;


sub$611A: procedure public;
	declare (i, j, k) byte;
	do i = 0 to 1;
		j = bC0B7(i);
		if j <> 0 then
		do;
			tx2Auxw(j) = tx2Auxw(j) - 1;
			if tx2Auxw(j) = 0 then
			do;
				do k = 0 to 3;
					if bC04E(k) = j then
						bC04E(k) = 0;
				end;
				bC140(tx2op3(j)) = 0;
			end;
		end;
	end;
end;



sub$61A9: procedure(arg1b) public;
	declare arg1b byte;
	bC0C1(arg1b) = b52DD(11 * bC0B3(arg1b) + bC0B5(arg1b));
end;

sub$61E0: procedure(arg1b) public;
	declare arg1b byte;
	if (b5124(tx2opc(arg1b)) and 0c0h) = 0 then
	do;
		wC1DC(bC1DB) = 0ah;
		wC1DC(bC1DB + 1) = tx2op3(arg1b);
		wC1DC(bC1DB + 2) = shl(wC1C3 - tx2op3(arg1b), 1);
		bC1DB = bC1DB + 3;
	end;
	else if tx2op1(arg1b) <> 0 then
	do;
		curInfo$p = tx2op1(arg1b);
		wC1DC(bC1DB + 2) = curInfo$p - botInfo;
		wC1DC(bC1DB + 1) = tx2op2(arg1b) - getLinkVal;
		if testInfoFlag(F$AUTOMATIC) then
		do;
			wC1DC(bC1DB) = 0ch;
			wC1DC(bC1DB + 3) = tx2op2(arg1b) + shl(wC1C3, 1);
			bC1DB = bC1DB + 4;
		end;
		else
		do;
			wC1DC(bC1DB) = 0bh;
			bC1DB = bC1DB + 3;
		end;
	end;
	else
	do;
		if tx2op2(arg1b) < 100h then
			wC1DC(bC1DB) = 8;
		else
			wC1DC(bC1DB) = 9;
		wC1DC(bC1DB + 1) = tx2op2(arg1b);
		bC1DB = bC1DB + 2;
	end;
end;


sub$636A: procedure(arg1b) public;
	declare arg1b byte;
	if bC0B5(arg1b) <= 3 then
	do;
		wC1DC(bC1DB) = bC0B5(arg1b);
		bC1DB = bC1DB + 1;  
	end;
	else
		call sub$61E0(bC0B7(arg1b));
end;


sub$63AC: procedure(arg1b) public;
	declare arg1b byte;
	if arg1b > 3 then
		return;
	if bC045(arg1b) <= 6 then
	do;
		do while bC0A8(arg1b) <> 0;
			if bC0A8(wC1DC(0) := arg1b) > 7fh then
			do;
				bC0A8(arg1b) = bC0A8(arg1b) + 1;  
				call encodeFragData(CF$INX);
			end;
			else
			do;
				bC0A8(arg1b) = bC0A8(arg1b) - 1;  
				call encodeFragData(CF$DCX);
			end;
			pc = pc + 1;  
		end;
	end;
end;


sub$6416: procedure(arg1b) public;
	declare arg1b byte;
	wC1DC(0) = arg1b;
	wC1DC(1) = 0ah;
	wC1DC(2) = wC1C3;
	call encodeFragData(CF$POP);
	pc = pc + 1;  
	call sub$5C97(arg1b);
	wC1C3 = wC1C3 - 1;  
end;

getTx2Item: procedure public;
	call fread(.tx2File, .tx2opc(tx2qp), 1);
	do case 3 and b5124(tx2opc(tx2qp));
		if tx2opc(tx2qp) = T2$EOF then
			eofSeen = TRUE;
		call fread(.tx2File, .tx2op1(tx2qp), 2);
		do;
			call fread(.tx2File, .tx2op1(tx2qp), 2);
			call fread(.tx2File, .tx2op2(tx2qp), 2);
		end;
		do;
			call fread(.tx2File, .tx2op1(tx2qp), 2);
			call fread(.tx2File, .tx2op2(tx2qp), 2);
			call fread(.tx2File, .tx2op3(tx2qp), 2);
		end;
	end;
end;


sub$652B: procedure public;
	if curOp = T2$MODULE then
	do;
		if tx2opc(tx2qp - 1) = T2$LABELDEF then
		do;
			curInfo$p = tx2op1(tx2qp - 1) + botInfo;
			if not (testInfoFlag(F$MODGOTO) or testInfoFlag(F$PUBLIC)) then
				tx2qp = tx2qp - 1;  
		end;
	end;
	else if curOp = T2$LINEINFO then
	do;
		if tx2op2(tx2qp) = 0 then
		do;
			if tx2opc(tx2qp - 1) = T2$LINEINFO then
			do;
				if tx2op2(tx2qp - 1) = 0 then
				do;
					tx2op3(tx2qp - 1) = tx2op1(tx2qp);
					tx2qp = tx2qp - 1;  
				end;
			end;
		end;
	end;
end;


fillTx2Q: procedure public;
	declare (i, j, k) byte;
	tx2qp = 4;
	if tx2qEnd > bC1BF then
	do;
		k = tx2qEnd - bC1BF;
		call movmem(k, .tx2opc(bC1BF), .tx2opc(tx2qp));
		call movmem(k, .tx2Aux1b(bC1BF), .tx2Aux1b(tx2qp));
		call movmem(k, .tx2Aux2b(bC1BF), .tx2Aux2b(tx2qp));
		call movmem(k * 2, .tx2op1(bC1BF), .tx2op1(tx2qp));
		call movmem(k * 2, .tx2op2(bC1BF), .tx2op2(tx2qp));
		call movmem(k * 2, .tx2op3(bC1BF), .tx2op3(tx2qp));
		call movmem(k * 2, .tx2Auxw(bC1BF), .tx2Auxw(tx2qp));
		tx2qp = k + 4;
		bC1BF = bC1BF + k;
	end;
	i = TRUE;
	j = FALSE;
	do while tx2qp < 255 and not eofSeen;
		call getTx2Item;
		curOp = tx2opc(tx2qp);
		call sub$652B;
		if tx2qp = 4 then
		do;
			if curOp = T2$STMTCNT or curOp = T2$LOCALLABEL
			  or curOp = T2$EOF then
				tx2qp = tx2qp + 1;  
			else if (b5124(curOp) and 20h) <> 0 then
				call emitTopItem;
			else if i then
			do;
				i = FALSE;
				call tx2SyntaxError(ERR200);	/*  LIMIT EXCEEDED */
							/*  STATEMENT SIZE */
				call emitTopItem;
			end;
		end;
		else
			tx2qp = tx2qp + 1;  

		if (b5124(curOp) and 8) <> 0 then
			j = TRUE;
		if j then
			if curOp  = T2$STMTCNT or curOp = T2$EOF
			  or curOp = T2$LOCALLABEL then
				goto break;
	end;
break:
	tx2qEnd = tx2qp;
end;



sub$67A9: procedure public;
	declare i byte;

	skipBB: procedure(arg1b, arg2b);
		declare arg1b byte, arg2b byte;
		bC1BF = arg1b + arg2b;
		do while tx2opc(bC1BF) <> T2$STMTCNT and tx2opc(bC1BF) <> T2$EOF
		  and tx2opc(bC1BF) <> T2$LOCALLABEL;
			bC1BF = bC1BF + arg2b;
		end;
	end;

	call skipBB(tx2qEnd, 0ffh);
	i = 0;
	if bC1BF = 4 and not eofSeen then
		bC1BF = tx2qEnd;
	else
		do tx2qp = 4 to bC1BF - 1;
			bC1D2 = b5124(tx2opc(tx2qp));
			if (bC1D2 and 10h) <> 0 then
			do;
				if i + 4 < tx2qp then
				do;
					if tx2opc(tx2qp) = T2$LOCALLABEL then
						bC1BF = tx2qp;
					else
						call skipBB(tx2qp, 0ffh);
					return;
				end;
				i = i + 1;  
			end;
			if (bC1D2 and 8) <> 0 then
			do;
				call skipBB(tx2qp, 1);
				return;
			end;
			if (bC1D2 and 20h) <> 0 then
				i = i + 1;  
		end;
end;


end;
