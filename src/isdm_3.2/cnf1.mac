%' *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'
%'	Title:	cnf1.mac
%'
%'	Abstract:
%'	This file contains the iSDM Configuration Macro Definitions.
%'		BUS_TYPE
%'		CPU_TYPE
%'		COMMUNICATION_CHANNEL
%'		CHANNEL_SCAN
%'		CUSTOM_INIT_CODE
%'		INTERRUPT_CONTROLLER
%'		INITIALIZE_INTERCONNECT
%'		AUTO_CONFIGURE_MEMORY
%'		INITIALIZE_PORT
%'		BOOTSTRAP
%'		BIST
%'		END
%'
%' *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'	iSDM utility macros and constants
%' *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'
%DEFINE(FALSE)(0)%'
%DEFINE(TRUE)(0FFH)%'
%'
%DEFINE(MANUAL_BOOT_OPTION)(0)
%DEFINE(AUTO_BOOT_OPTION)(1)
%'
%DEFINE(BYTE_INIT)(0)
%DEFINE(WORD_INIT)(1)
%DEFINE(INTERCONNECT_SETUP)(2)
%DEFINE(INTERCONNECT_INIT)(3)
%'
%DEFINE(MBI) (00000000B)
%DEFINE(MBII)(00001000B)
%'
%DEFINE(TYPE_INTERCONNECT)(0H)
%DEFINE(TYPE_8274)(10H)
%DEFINE(TYPE_82530)(11H)
%DEFINE(TYPE_8251A)(12H)
%DEFINE(TYPE_8086)(00H)
%DEFINE(TYPE_80186)(01H)
%DEFINE(TYPE_80286)(02H)
%DEFINE(TYPE_80386)(03H)
%SET(cpu_macro_not_configured,%true)
%'
%'  TRIM(a) - returns the input parameter trimmed of leading and
%'		trailing blanks.
%*DEFINE(trim(a)) LOCAL x y (%MATCH( x y)(%a)%x)%'
%'
%'   ARG -  gets the next comma-delimited arg from variable named
%'              TAIL, stripped and trimmed
%*DEFINE(arg) LOCAL a (%MATCH(a,tail)(%tail)%TRIM(%a))%'
%'
%' *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'
%'	Title:	bus_type
%'
%'	Inputs:
%'	  bus_mnemonic	- indicates which bus is to be supported.
%'			  Valid values are:
%'			  MBI -	indicates Multibus I system
%'			  MBII -  indicates Multibus II system
%'
%'	Outputs:
%'	  bus		- type code of bus type chosen. Valid values are:
%'			  0	= Multibus I
%'			  8	= Multibus II
%'
%'	Abstract:
%'	  This macro sets a global macro-time flag to indicate which
%'	  type of system the monitor is being configured to support.
%'	  The flag is used primarily for error checking in other macros.
%'
%' *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'
%*DEFINE(bus_type(bus_mnemonic)) (%'
%'
%DEFINE(bus_mnemonic) (%TRIM(%bus_mnemonic))
%'
%IF (%EQS(%bus_mnemonic,MBI)) THEN (%'
%'	'%SET(bus, %MBI)%'
%'
) ELSE (%IF (%EQS(%bus_mnemonic,MBII)) THEN (%'
%'	'%SET(bus, %MBII)%'
%'
) ELSE (%'
%'	'ERROR -- %bus_mnemonic, invalid bus type
%'
)FI )FI
%'
)%' END OF BUS TYPE MACRO
%'
%' *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'	TITLE:   CPU
%'	INPUTS: CPU_TYPE -- the type of cpu used
%'	OUTPUTS: NONE
%'	ABSTRACT:
%'	This macro sets up the macro time variable CPU_TYPE, fills in the body
%'  of the MS_DELAY routine and calculates the number of loops in MS_DELAY to
%'  product one millisecond.  The processing of this macro is as follows:
%'
%'	If type 8086 then cpu_type = type_8086
%'	else if type 80186 then 
%'		get the six remaining arguments from the macro invocation
%'		make the appropriate init186_table entries in cf186.inc
%'		cpu_type = type_80186
%'	else if type 80286 then cpu_type = type_80286
%'	else if type 80386 then cpu_type = type_80386
%'	else error message
%'	
%'	define (loop_body)(
%'	If cpu_type = type_8086 then
%'		t_loop:
%'			nop
%'			loop	t_loop
%'	else if cpu_type = type_80186 then
%'		t_loop:
%'			nop
%'			mov	ax,cx
%'			loop	t_loop
%'	else if cpu_type = type_80286 then
%'		t_loop:
%'			nop
%'			nop
%'			nop
%'			nop
%'			loop	t_loop
%'	else if cpu_type = type_80386 then
%'		t_loop:
%'			nop
%'			nop
%'			mov	ax,cx
%'			loop	t_loop
%'	else error message
%'	calculate the config_value for the number of loops required in MS_DELAY
%'
%' *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%*DEFINE(CPU(parameters)) (%DEFINE(tail) (%parameters)%'
$eject
%DEFINE(type_cpu)(%arg)%'
%'
%IF ((%EQS(%type_cpu,8086)) OR (%EQS(%type_cpu,8088))) THEN (%'
%'
%'	'%set(cpu_type_val,%type_8086)%'
%'
) ELSE (%'
%IF ((%EQS(%type_cpu,80186)) OR (%EQS(%type_cpu,80188))) THEN (%'
%'
%'	'%set(cpu_type_val,%type_80186)%'
%'	'%DEFINE(rmx_v)(%ARG)%'
%'	'%DEFINE(umcs_v)(%ARG)%'
%'	'%DEFINE(lmcs_v)(%ARG)%'
%'	'%DEFINE(mpcs_v)(%ARG)%'
%'	'%DEFINE(mmcs_v)(%ARG)%'
%'	'%DEFINE(pacs_v)(%ARG)%'
%'	'$include(cf186.inc)
%'	'init186_table:
%'	
%'	'%IF ((%EQS(%rmx_v,Y)) OR (%EQS(%rmx_v,y))) THEN (%'
%'		'DW	0fffeh
%'		'DW	40ffh
%'	')FI%'
%'	
%'	'%IF ((%NES(%umcs_v,NONE)) AND (%NES(%umcs_v,none))) THEN (%'
%'		'DW	0ffa0h
%'		'DW	%umcs_v
%'	')FI%'
%'	
%'	'%IF ((%NES(%lmcs_v,NONE)) AND (%NES(%lmcs_v,none))) THEN (%'
%'		'DW	0ffa2h
%'		'DW	%lmcs_v
%'	')FI%'
%'	
%'	'%IF ((%EQS(%mpcs_v,NONE)) OR (%EQS(%mpcs_v,none))) THEN (%'
%'		'%SET(mpcs_v,0)%'
%'	')FI%'
%'	
%'	'%IF ((%NES(%mmcs_v,NONE)) AND (%NES(%mmcs_v,none))) THEN (%'
%'		'%IF (%EQS(%mpcs_v,0)) THEN (%'
%'		'ERROR -- MPCS register must be initialized to program the MMCS register
%'	') ELSE (%'
%'		'DW	0ffa8h
%'		'DW	%mpcs_v
%'		'DW	0ffa6h
%'		'DW	%mmcs_v
%'	')FI )FI%'
%'	
%'	'%IF ((%NES(%pacs_v,NONE)) AND (%NES(%pacs_v,none))) THEN (%'
%'	   	'%IF (%EQS(%mpcs_v,0)) THEN (%'
%'	   	'ERROR -- MPCS register must be initialized to program the PACS register
%'	') ELSE (%'
%'		'DW	0ffa8h
%'		'DW	%mpcs_v
%'		'DW	0ffa4h
%'		'DW	%pacs_v
%'	')FI )FI%'
%'		'DW	0
%'		'sdm86_186_init	ends
%' 	'assume	cs:code, ds:data
%'     	'data	segment	public	'data'
%'	'DATA	ENDS
%'	'code	segment	public	'code'
%'	'CODE	ENDS
) ELSE (%'
%IF (%EQS(%type_cpu,80286)) THEN (%'
%'
%'	'%set(cpu_type_val,%type_80286)%'
%'
%'
%'
) ELSE (%'
%IF (%EQS(%type_cpu,80386)) THEN (%'
%'
%'	'%set(cpu_type_val,%type_80386)%'
%'
%'
) ELSE (%'
%'	'ERROR -- The cpu type configured is invalid. 
)FI )FI )FI )FI 
%'
%DEFINE (loop_body)(%'
%'	'%IF (%EQS(%cpu_type_val,%type_8086)) THEN (%'
%'		't_loop:
%'		'	nop
%'		'	loop	t_loop
%'	') ELSE (%IF (%EQS(%cpu_type_val,%type_80186)) THEN (%'
%'		't_loop:
%'		'	nop
%'		'	mov	ax,cx
%'		'	loop	t_loop
%'	')ELSE (%IF (%EQS(%cpu_type_val,%type_80286)) THEN (%'
%'		't_loop:
%'		'	nop
%'		'	nop
%'		'	nop
%'		'	nop
%'		'	loop	t_loop
%'	') ELSE (%IF (%EQS(%cpu_type_val,%type_80386)) THEN (%'
%'		't_loop:
%'		'	nop
%'		'	nop
%'		'	mov	ax,cx
%'		'	loop	t_loop
)FI )FI )FI )FI ) %' END OF LOOP_BODY DEFINITION
%'
%DEFINE(clock_frequency)(%arg)%'
%'
%IF (%clock_frequency LT 1) THEN (%'
%'		'ERROR -- A clock frequency must be configured that is one or greater.%'
)ELSE (%'
%'		'%SET (delay_value,(%clock_frequency * 50) - 4) %'
%'		'%SET(cpu_macro_not_configured,%false) %'
) FI%'
%'
)%'	END OF THE CPU MACRO
