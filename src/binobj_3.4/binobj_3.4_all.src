binobj.pex
# common literals
TRUE            '0FFh'
FALSE           '0'
CR              '0Dh'
LF      '0Ah'
FOREVER     'WHILE TRUE'

# my user types
pointer     'address'
bool        'byte'
apointer    'address'
word        'address'

# supported record types
RELOC$TYPE  '22h'
MODHDR$TYPE '2'
MODEND$TYPE '4'
CONTENT$TYPE    '6'
EOF$TYPE    '0eh'

ABS$SEG     '0'
# error codes
UNRECOG$SWITCH  '201'
INVALID$SYNTAX  '203'
EARLY$EOF       '204'
CHECKSUM$ERROR  '208'
BAD$REC$TYP     '212'

# external procedures
Deblank     P("pointer" ptr)"pointer"
Delimit     P("pointer" ptr)"pointer"
MoveAscii   P("pointer" dst,"pointer" src,B cnt)
FileError   P("word" status,"pointer" ptr,"bool" fatal)
ForceUpper  P("pointer" ptr)
NumOut      P("word" val,B base,B lc,"pointer" buf,B width)
Path        P("pointer" filename,"pointer" pn)B
Seq     P("pointer" str1,"pointer" str2,B cnt)"bool"
ReportError P("word" errNum)
UpperCase   P(B char)B
WDelimit    P("pointer" ptr)"pointer"

Close           P("word" conn,"apointer" status$p)
Error       P("word" errnum)
Exit        P
Memck           P"apointer"
Open            P("apointer" conn$p,"pointer" path$p,"word" access,"word" echo,"apointer" status$p)
Read            P("word" conn,"pointer" buff$p,"word" count,"apointer" actual$p,"apointer" status$p)
Spath       P("pointer" path$p,"pointer" info$p,"apointer" status$p)    
Write           P("word" conn,"pointer" buff$p,"word" count,"apointer" status$p)

# file access modes
READ$MODE   '1'
WRITE$MODE  '2'

binobj.plm
binobj: DO;
$include(binobj.ipx)
declare VERSION$LEVEL literally '2',
        EDIT$LEVEL literally '18h';

declare version(*) byte data(VERSION$LEVEL, EDIT$LEVEL);
declare copyRight(*) byte data(
    '(C) 1975,1976,1977,1978 INTEL CORP');

declare buffer$size word;
declare iBuf(3328) byte;
declare iPtr word;
declare bin$base pointer;
declare bin$rcd based binBase structure(
                        length word,
                        addr word);
declare buffer(128) byte;
declare buffer$ptr pointer, char based buffer$ptr byte;
declare (output$ptr, input$ptr) pointer;
declare actual word;
declare status word;
declare (start, endFile) bool;
declare (aft$out, aft$in) word;
declare start$value word;
declare record$ptr word;
declare memory$ptr pointer, mem based memory$ptr byte;
/*                                 */
/*  content record definition      */
/*                                 */
declare content structure(
                type   byte,
                length word,
                seg$id byte,
                addr   word,
                dat(1) byte
                ) at (.MEMORY);
declare junk byte;
declare record$address word;
declare rlen word;
declare type byte;
declare in word;
declare out word;
declare len$bin word;
declare end$rec byte;
declare checksum byte;
/*                                  */
/*  module header record definition */
/*                                  */
declare modhdr structure(
                type(1)  byte,
                length   word,
                name$len byte,
                name(31) byte,
                trn$id   byte,
                trn$vn   byte,
                chksum   byte);
/*                                 */
/*  module end record definition   */
/*                                 */
declare modend structure(
                rec$type byte,
                length   word,
                type     byte,
                seg$id   byte,
                offset   word,
                chksum   byte);

/*                                 */
/*  module end of file record      */
/*  definition                     */
/*                                 */
declare modeof structure(
                type    byte,
                length  word,
                chksum  byte);
/*                                 */

OutRecord: procedure(ptr);
    declare ptr pointer, char based ptr(1) byte;
    declare p1 apointer, addr based p1 word;
    declare (i, status) word;
    declare checksum byte;

    p1 = ptr + 1;
    checksum = 0;
    do i = 0 to addr + 1;
        checksum = checksum + char(i);
    end;
    char(addr + 2) = 0 - checksum;
    call Write(aft$out, ptr, addr + 3, .status);
    call FileError(status, output$ptr, TRUE);
end OutRecord;

GetNextBinRcd: procedure;
    call Read(aft$in, .iBuf, length(iBuf), .actual, .status);
    call FileError(status, input$ptr, TRUE);
    if actual = 0 then
    do;
        call FileError(EARLY$EOF, input$ptr, TRUE);
    end;
end GetNextBinRcd;
 
GetNextBinByte: procedure byte;
    declare temp byte;

    if iPtr = 0 then
        call GetNextBinRcd;
    temp = iBuf(iPtr);
    if (iPtr := iPtr + 1) = actual THEN
        iPtr = 0;
    return temp;
end GetNextBinByte;

start = FALSE;
endFile = FALSE;
/* *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
   *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

      BEGINNING OF MAIN PROGRAM.

   *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
   *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-* */

                /* Initialize module header record area */
modhdr.type(0) = MODHDR$TYPE;
do in = 1 to size(modhdr) - 1;
    modhdr.type(in) = 0;
end;
/*                                 */
input$ptr = .(':CI: ');
call Read(1, .buffer, length(buffer), .actual, .status);
call FileError(status, input$ptr, TRUE);
buffer(actual) = CR;
call ForceUpper(.buffer);
input$ptr,buffer$ptr = Deblank(.buffer);
call Open(.aft$in, input$ptr, READ$MODE, 0, .status);
call FileError(status, input$ptr, TRUE);
buffer$ptr = Deblank(Delimit(buffer$ptr));
if Seq(.('TO '), buffer$ptr, 3) then
do;
    output$ptr,buffer$ptr = Deblank(buffer$ptr + 2);
    buffer$ptr = Deblank(Delimit(buffer$ptr));
end;
else
do;
    call FileError(INVALID$SYNTAX, buffer$ptr, TRUE);
end;
if char <> CR then
    call FileError(INVALID$SYNTAX, buffer$ptr, TRUE);
/*                                 */
/*                                 */
call Open(.aft$out, output$ptr, WRITE$MODE, 0, .status);
call FileError(status, output$ptr, TRUE);
status = Path(input$ptr, .modhdr.name$len);
modhdr.name$len = 6;
do while modhdr.name(modhdr.name$len - 1) = 0;
    modhdr.name$len = modhdr.name$len - 1;
end;
modhdr.length = modhdr.name$len + 4;
modhdr.type(modhdr.name$len + 4) = 0; /* TRN ID */
modhdr.type(modhdr.name$len + 5) = 0; /* TRN VN */
       
/*
  Output module header record
*/

call OutRecord(.modhdr);
/*                                       */
/* Assemble and output content record(s) */
/*                                       */
buffer$size = Memck - .MEMORY;
content.type = CONTENT$TYPE;
content.seg$id = ABS$SEG;
iPtr = 0;
out = 0;    /* set beginning value for output pointer */
record$ptr = 0;
end$rec = FALSE;    /* reset end of bin file flag */
do while not end$rec;
    /* we are at the beginning of a bin record */
    record$ptr = 0; /* reset bin record offset */
    bin$base = .iBuf + iPtr;    /* update base of bin record structure */
    do in = 1 to 2; /* dummy look to advace pointer is here */
                    /* to insure that a new record is read into */
                    /* iBuf if a bin record ends on a track */
                    /* boundary */
        junk = GetNextBinByte;
    end;
    if (rlen := bin$rcd.length) = 0 then
        end$rec = TRUE;
    record$address = bin$rcd.addr;
    content.addr = record$address + record$ptr;
    do in = 1 to 2;
        junk = GetNextBinByte;
    end;
    /*                                 */
    /*                                 */
    do while rlen <> 0;
                            /* process binary records until */
                            /* a record with a length field */
                            /* of zero is found             */
    /*                                    */
    /* transfer data to the output buffer */
    /*                                    */
        do while rlen <> 0 and out <= buffer$size - 2;
            content.dat(out) = GetNextBinByte;
            out = out + 1;
            record$ptr = record$ptr + 1;
            rlen = rlen - 1;
        end;
    /*                                */
    /* we have reached the end of the */
    /* input or output buffer         */
    /*                                */
        if out >= buffer$size - 2 then
        do;
            content.length = out + 4;
            out = 0;
            call OutRecord(.MEMORY);
            content.addr = record$address + record$ptr; /* update */
                                            /* base address for next record */
        end;
    /*                                */
        if rlen = 0 then
        do;     /* end of input data in this buffer */
            if out > 0 and rlen = 0 then
            do; /* flush a partial record */
                content.length = out + 4;
                out = 0;
                call OutRecord(.MEMORY);
            end;
        end;
    end;    /* end of read binary record loop */
end;

/*
    initialize, and assemble, and
    output the module end record
*/
modend.rec$type = MODEND$TYPE;
modend.length = 5;
modend.type =  1;
modend.seg$id = 0;
modend.offset = record$address; /* set transfer address */
if start then
    modend.offset = start$value;    /* user specified start address */
call OutRecord(.modend);
/*                                  */
/*    Initialize, assemble and      */
/*    output the                    */
/*    module end of file record     */
/*                                  */
modeof.type = EOF$TYPE;
modeof.length = 1;
call OutRecord(.modeof);

call Close(aft$in, .status);
call FileError(status, input$ptr, TRUE);
call Close(aft$out, .status);
call FileError(status, output$ptr, TRUE);
call Exit;
end binobj;
EOF
dblank.plm
DEBLANK: DO;
Deblank: procedure(str) address public;
    declare str address;
    declare c based str byte;

    do while (c = ' ');
        str = str + 1;
    end;
    return str;
end;

end;
dlimit.plm
DELIMIT: DO;
Delimit: procedure(ptr) address public;
    declare ptr address, ch based ptr byte;

    do while ch = ':' or ch = '.' or
         ('0' <= ch and ch <= '9') or
         ('A' <= ch and ch <= 'Z');
        ptr = ptr + 1;
    end;
    return ptr;
end;
end;
filerr.plm
FILEERROR: DO;
$include(filerr.ipx)

FileError: procedure(status, ptr, callExit) public;
    declare (status, ptr) address, callExit byte;
    declare actual address;

    if status <> 0 then
    do;
        ptr = Deblank(ptr);
        call Write(0, .(' '), 1, .actual);
        call Write(0, ptr, WDelimit(ptr) - ptr, .actual);
        call Write(0, .(','), 1, .actual);
        call ReportError(status);
        if callExit then
            call exit;
    end;
end;
end;
forupp.plm
FORCEUPPER: DO;
$include(forupp.ipx)

ForceUpper: procedure(bufferPtr) public;
    declare bufferPtr address, ch based bufferPtr byte;

    do while ch <> CR;
        ch = uppercase(ch);
        bufferPtr = bufferPtr + 1;
    end;
end;
end;
numout.plm
NUMOUT: DO;

declare digits(*) byte data('0123456789ABCDEF');

NumOut: procedure(val, base, lc, bufAdr, width) public;
    declare (val, bufAdr) address, (base, lc, width) byte; 
    declare i byte;
    declare buf based bufAdr (1) byte;

    do i = 1 to width;
        buf(width - i) = digits(val mod base);
        val = val / base;   
    end;

    i = 0;
    do while buf(i) = '0' and i < width - 1;
        buf(i) = lc;
        i = i + 1;
    end;
end;
end;
path.plm
PATH: DO;
$include(path.ipx)

Path: procedure(filename, pn) byte public;
    declare (filename, pn) address;
    declare info(12) byte;
    declare status byte;    /* ? bug should be word */

    call Spath(filename, .info, .status);
    call MoveAscii(pn, .info, size(info) - 2);
    return status;
end;
end;
scanin.plm
SCANIN: do;
declare hexDigits(*) byte data('0123456789ABCDEF');

ScanInteger: procedure(buf$p) address public;
    declare buf$p address;
    declare buf based buf$p address;
    declare (s, pastNum$p, endNum$p) address;
    declare (i, radix, digit) byte;
    declare (newValue, curValue) address;
    declare c based s byte;

    s = buf;    
    do while c = ' ';
        s = s + 1;
    end;
    buf = s;
    do while '0' <= c and c <= '9' or 'A' <= c and c <= 'F';
        s = s + 1;
    end;

    endNum$p = s;
    pastNum$p = s + 1;
    if c = 'H' then
        radix = 16;
    else if c = 'O' or c = 'Q' then
        radix = 8;
    else
    do;
        pastNum$p = s;
        endNum$p, s = s - 1;
        if c = 'B' then     /* force reload of s */
            radix = 2;
        else
        do;
            radix = 10;
            if c <> 'D' then    /* include last digit */
                endNum$p = endNum$p + 1;
        end;
    end;
    s = buf;
    newValue, curValue = 0; 
    do while s < endNum$p;
        do i = 0 to 15;
            if c = hexdigits(i) then
                digit = i;
        end;
        if digit >= radix then
            return 0;
        newValue = curValue * radix + digit;
        if newValue < curValue then /* force reload of newValue */
            return 0;
        curValue = newValue;
        s = s + 1;
    end;        
    buf = pastNum$p;
    return newValue;
end;
end;
seq.plm
SEQ: DO;
Seq: procedure(s1, s2, cnt) byte public;
    declare (s1,s2) address, cnt byte;
    declare s1a based s1(1) byte;
    declare s2a based s2(1) byte;
    declare i byte;
    cnt = cnt - 1;
    do i = 0 to cnt;
        if s1a(i) <> s2a(i) then
            return 0;
    end;
    return 0ffh;
end;
end;
mvasci.plm
MOVEASCII: DO;
MoveAscii: procedure(dst, src, cnt) public;
    declare (dst, src) address, cnt byte, i byte;
    declare dch based dst (1) byte, sch based src (1) byte;

    do i = 0 to cnt - 1;
        dch(i) = sch(i);
    end;
end;
end;
reperr.plm
REPORTERROR: DO;
$include(reperr.ipx)

declare msg(*) byte DATA(0, 0,
    2, 'ILLEGAL AFTN ARGUMENT', 0,
    4, 'INCORRECTLY SPECIFIED FILE', 0,
    5, 'UNRECOGNIZED DEVICE NAME', 0,
    6, 'ATTEMPT TO WRITE TO INPUT DEVICE', 0,
    8, 'ATTEMPT TO READ FROM OUTPUT DEVICE', 0,
    9, 'DISK DIRECTORY FULL', 0,
    0AH, 'NOT ON SAME DISK', 0,
    0BH, 'FILE ALREADY EXISTS', 0,
    0CH, 'FILE IS ALREADY OPEN', 0,
    0DH, 'NO SUCH FILE', 0,
    0EH, 'WRITE PROTECTED', 0,
    11H, 'NOT A DISK FILE', 0,
    12H, 'ILLEGAL ISIS COMMAND', 0,
    13H, 'ATTEMPTED SEEK ON NON-DISK FILE', 0,
    14H, 'ATTEMPTED BACK SEEK TOO FAR', 0,
    15H, 'CAN''T RESCAN', 0,
    16H, 'ILLEGAL ACCESS MODE TO OPEN', 0,
    17H, 'MISSING FILENAME', 0,
    19H, 'ILLEGAL ECHO FILE', 0,
    1AH, 'ILLEGAL ATTRIBUTE IDENTIFIER', 0,
    1BH, 'ILLEGAL SEEK COMMAND', 0,
    1CH, 'MISSING EXTENSION', 0,
    1FH, 'CAN''T SEEK ON WRITE ONLY FILE', 0,
    20H, 'CAN''T DELETE OPEN FILE', 0,
    23H, 'SEEK PAST EOF', 0,
    0C9H, 'UNRECOGNIZED SWITCH', 0,
    0CAH, 'UNRECOGNIZED DELIMITER', 0,
    0CBH, 'INVALID SYNTAX', 0,
    0CCH, 'PREMATURE EOF', 0,
    0CEH, 'ILLEGAL DISKETTE LABEL', 0,
    0D0H, 'CHECKSUM ERROR', 0,
    0D1H, 'RELO FILE SEQUENCE ERROR', 0,
    0D2H, 'INSUFFICIENT MEMORY', 0,
    0D3H, 'RECORD TOO LONG', 0,
    0D4H, 'ILLEGAL RELO RECORD', 0,
    0D5H, 'FIXUP BOUNDS ERROR', 0,
    0D6H, 'ILLEGAL SUBMIT PARAMETER', 0,
    0D7H, 'ARGUMENT TOO LONG', 0,
    0D8H, 'TOO MANY PARAMETERS', 0,
    0D9H, 'OBJECT RECORD TOO SHORT', 0,
    0DAH, 'ILLEGAL RECORD FORMAT', 0,
    0DBH, 'PHASE ERROR', 0
    );


ReportError: procedure(errNum) public;
    declare errNum address;
    declare numberBuffer(3) byte, i address, status address;
    
    if errNum <> 0 then
    do;
        i = 0;
        do while i < size(msg);
            if errNum = msg(i) and msg(i + 1) <> 0 then
            do;
                i = i + 1;
                call write(0, .(' '), 1, .status);
                do while msg(i) <> 0;
                    call Write(0, .msg(i), 1, .status);
                    i = i + 1;
                end;
                call Write(0, .(0dh, 0ah), 2, .status);
                return;
            end;
            else
            do;
                do while msg(i) <> 0;
                    i = i + 1;
                end;
                i = i + 1;
            end;
        end;
        call error(errNum);
    end;
end;
end;
upcase.plm
UPPERCASE: DO;
UpperCase: procedure(char) byte public;
    declare char byte;
    if char < 'a' then
        return char;
    if char > 'z' then
        return char;
    return char and 0dfh;
end;
end;
wdlmt.plm
WDELIMIT: DO;
/* b1=01, b2=31, CODE(63H) byte, DATA(2H) byte, STACK(4H) byte, MEMORY(0H) byte,*/
WDelimit: procedure(ptr) address public;
    declare ptr address;
    declare ch based ptr byte;

    do while (ch = ':' or ch = '.' or ch = '*' or ch = '?' or
          ('0' <= ch and ch <= '9') or ('A' <= ch and ch <= 'Z'));
        ptr = ptr + 1;
    end;
    return ptr;
end;
end;
