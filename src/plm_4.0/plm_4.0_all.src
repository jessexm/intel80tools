shared/plm.pex
/* isis command codes */
IOPEN	'0'
ICLOSE	'1'
IDELETE	'2'
IREAD	'3'
IWRITE	'4'
ISEEK	'5'
ILOAD	'6'
IRENAME	'7'
ICONSOL	'8'
IEXIT	'9'
IATTRIB	'10'
IRESCAN	'11'
IERROR	'12'
IWHOCON	'13'
ISPATH	'14'

LIT             'literally'
POINTER         'ADDRESS'
WORD            'ADDRESS'
BOOLEAN         'BYTE'
local           ' '
TRUE            '0FFH'
FALSE           '0'
FILE$NAME$LEN   '15'

TAB             '9'
CR              '0DH'
LF              '0AH'
QUOTE           '27H'
ISISEOF         '81H'

/* flags */
F$PUBLIC	'0'
F$EXTERNAL	'1'
F$BASED	'2'
F$INITIAL	'3'
F$REENTRANT	'4'
F$DATA	'5'
F$INTERRUPT	'6'
F$AT	'7'
F$ARRAY	'8'
F$STARDIM	'9'
F$PARAMETER	'10'
F$MEMBER	'11'
F$LABEL	'12'
F$AUTOMATIC	'13'
F$PACKED	'14'
F$ABSOLUTE	'15'
F$MEMORY	'16'
F$DECLARED	'17'
F$DEFINED	'18'
F$MODGOTO	'19'

/* token info types */
LIT$T	'0'
LABEL$T	'1'
BYTE$T	'2'
ADDRESS$T	'3'
STRUCT$T	'4'
PROC$T	'5'
BUILTIN$T	'6'
MACRO$T	'7'
UNK$T	'8'
TEMP$T	'9'

/* Lex tokens */
L$LINEINFO	'0'
L$SYNTAXERROR	'1'
L$TOKENERROR	'2'
L$LIST	'3'
L$NOLIST	'4'
L$CODE	'5'
L$NOCODE	'6'
L$EJECT	'7'
L$INCLUDE	'8'
L$STMTCNT	'9'
L$LABELDEF	'10'
L$LOCALLABEL	'11'
L$JMP	'12'
L$JMPFALSE	'13'
L$PROCEDURE	'14'
L$SCOPE	'15'
L$END	'16'
L$DO	'17'
L$DOLOOP	'18'
L$WHILE	'19'
L$CASE	'20'
L$CASELABEL	'21'
L$IF	'22'
L$STATEMENT	'23'
L$CALL	'24'
L$RETURN	'25'
L$GO	'26'
L$GOTO	'27'
L$SEMICOLON	'28'
L$ENABLE	'29'
L$DISABLE	'30'
L$HALT	'31'
L$EOF	'32'
L$AT	'33'
L$INITIAL	'34'
L$DATA	'35'
L$VARIABLE	'36'
L$NUMBER	'37'
L$STRING	'38'
L$PLUSSIGN	'39'
L$MINUSSIGN	'40'
L$PLUS	'41'
L$MINUS	'42'
L$STAR	'43'
L$SLASH	'44'
L$MOD	'45'
L$COLONEQUALS	'46'
L$AND	'47'
L$OR	'48'
L$XOR	'49'
L$NOT	'50'
L$LT	'51'	
L$LE	'52'
L$EQ	'53'
L$NE	'54'
L$GE	'55'
L$GT	'56'
L$COMMA	'57'
L$LPAREN	'58'
L$RPAREN	'59'
L$PERIOD	'60'
L$TO	'61'
L$BY	'62'
L$INVALID	'63'
L$MODULE	'64'
L$XREFINFO	'65'
L$XREF	'66'
L$EXTERNAL	'67'
L$ERROR	'68'

/* character classes */
CC$BINDIGIT	'0'
CC$OCTDIGIT	'1'
CC$DECDIGIT	'2'
CC$HEXCHAR	'3'
CC$ALPHA	'4'
CC$PLUS		'5'
CC$MINUS	'6'
CC$STAR		'7'
CC$SLASH	'8'
CC$LPAREN	'9'
CC$RPAREN	'10'
CC$COMMA	'11'
CC$COLON	'12'
CC$SEMICOLON	'13'
CC$QUOTE	'14'
CC$PERIOD	'15'
CC$EQUALS	'16'
CC$LESS		'17'
CC$GREATER	'18'
CC$WSPACE	'19'
CC$DOLLAR	'20'
CC$INVALID	'21'
CC$NONPRINT	'22'
CC$NEWLINE	'23'

/* intermediate tokens */
T$VARIABLE	'0'
T$NUMBER	'1'
T$STRING	'2'
T$PLUSSIGN	'3'
T$MINUSSIGN	'4'
T$STAR	'5'
T$SLASH	'6'
T$MOD	'7'
T$PLUS	'8'
T$MINUS	'9'
T$AND	'10'
T$OR	'11'
T$XOR	'12'
T$NOT	'13'
T$LT	'15'
T$LE	'16'
T$EQ	'17'
T$NE	'18'
T$GE	'19'
T$GT	'20'
T$COLON$EQUALS	'21'
T$COLON	'22'
T$SEMICOLON	'23'
T$PERIOD	'24'
T$LPAREN	'25'
T$RPAREN	'26'
T$COMMA	'27'
T$CALL	'28'
T$DECLARE	'29'
T$DISABLE	'30'
T$DO	'31'
T$ENABLE	'32'
T$END	'33'
T$GO	'34'
T$GOTO	'35'
T$HALT	'36'
T$IF	'37'
T$PROCEDURE	'38'
T$RETURN	'39'
T$ADDRESS	'40'
T$AT	'41'
T$BASED	'42'
T$BYTE	'43'
T$DATA	'44'
T$EXTERNAL	'45'
T$INITIAL	'46'
T$INTERRUPT	'47'
T$LABEL	'48'
T$LITERALLY	'49'
T$PUBLIC	'50'
T$REENTRANT	'51'
T$STRUCTURE	'52'
T$BY	'53'
T$CASE	'54'
T$ELSE	'55'
T$EOF	'56'
T$THEN	'57'
T$TO	'58'
T$WHILE	'59'

/* T2 codes */
T2$LT	'0'
T2$LE	'1'
T2$NE	'2'
T2$EQ	'3'
T2$GE	'4'
T2$GT	'5'
T2$ROL	'6'
T2$ROR	'7'
T2$SCL	'8'
T2$SCR	'9'
T2$SHL	'10'
T2$SHR	'11'
T2$JMPFALSE	'12'
/*	T2$13 LIT '13', */
/*	T2$14 LIT '14', */
/*	T2$15 LIT '15', */
/*	T2$16 LIT '16', */
/*	T2$17 LIT '17', */
T2$DOUBLE	'18'
T2$ADDB	'19'
T2$MINUSSIGN	'20'
T2$STAR	'21'
T2$SLASH	'22'
T2$MOD	'23'
T2$AND	'24'
T2$OR	'25'
T2$XOR	'26'
T2$BASED	'27'
T2$BYTEINDEX	'28'
T2$WORDINDEX	'29'
T2$MEMBER	'30'
T2$UNARYMINUS	'31'
T2$NOT	'32'
T2$LOW	'33'
T2$HIGH	'34'
T2$ADDRESSOF	'35'
T2$PLUS	'36'
T2$MINUS	'37'
/*	T2$38 LIT '38', */
/*	T2$39 LIT '39', */
/*	T2$40 LIT '40', */
/*	T2$41 LIT '41', */
/*	T2$42 LIT '42', */
/*	T2$43 LIT '43', */
T2$44	'44'
/*	T2$45 LIT '45', */
/*	T2$46 LIT '46', */
/*	T2$47 LIT '47', */
/*	T2$48 LIT '48', */
/*	T2$49 LIT '49', */
/*	T2$50 LIT '50', */
T2$51	'51'
/*	T2$52 LIT '52', */
/*	T2$53 LIT '53', */
/*	T2$54 LIT '54', */
/*	T2$55 LIT '55', */
T2$56	'56'
T2$TIME	'57'
T2$STKBARG	'58'
T2$STKWARG	'59'
T2$DEC	'60'
T2$STORE	'61'
T2$OUTPUT	'62'
T2$63	'63'
T2$STKARG	'64'
T2$65	'65'
/*	T2$66 LIT '66', */
/*	T2$67 LIT '67', */
/*	T2$68 LIT '68', */
T2$MOVE	'69'
/*	T2$70 LIT '70', */
T2$RETURNBYTE	'71'
T2$RETURNWORD	'72'
T2$RETURN	'73'
/*	T2$74 LIT '74', */
/*	T2$75 LIT '75', */
/*	T2$76 LIT '76', */
/*	T2$77 LIT '77', */
/*	T2$78 LIT '78', */
/*	T2$79 LIT '79', */
/*	T2$80 LIT '80', */
/*	T2$81 LIT '81', */
/*	T2$82 LIT '82', */
/*	T2$83 LIT '83', */
/*	T2$84 LIT '84', */
/*	T2$85 LIT '85', */
/*	T2$86 LIT '86', */
/*	T2$87 LIT '87', */
/*	T2$88 LIT '88', */
/*	T2$89 LIT '89', */
/*	T2$90 LIT '90', */
/*	T2$91 LIT '91', */
/*	T2$92 LIT '92', */
/*	T2$93 LIT '93', */
/*	T2$94 LIT '94', */
/*	T2$95 LIT '95', */
/*	T2$96 LIT '96', */
/*	T2$97 LIT '97', */
/*	T2$98 LIT '98', */
/*	T2$99 LIT '99', */
/*	T2$100 LIT '100', */
/*	T2$101 LIT '101', */
/*	T2$102 LIT '102', */
/*	T2$103 LIT '103', */
/*	T2$104 LIT '104', */
/*	T2$105 LIT '105', */
/*	T2$106 LIT '106', */
/*	T2$107 LIT '107', */
/*	T2$108 LIT '108', */
/*	T2$109 LIT '109', */
/*	T2$110 LIT '110', */
/*	T2$111 LIT '111', */
/*	T2$112 LIT '112', */
/*	T2$113 LIT '113', */
/*	T2$114 LIT '114', */
/*	T2$115 LIT '115', */
/*	T2$116 LIT '116', */
/*	T2$117 LIT '117', */
/*	T2$118 LIT '118', */
/*	T2$119 LIT '119', */
/*	T2$120 LIT '120', */
/*	T2$121 LIT '121', */
/*	T2$122 LIT '122', */
/*	T2$123 LIT '123', */
/*	T2$124 LIT '124', */
/*	T2$125 LIT '125', */
/*	T2$126 LIT '126', */
/*	T2$127 LIT '127', */
/*	T2$128 LIT '128', */
/*	T2$129 LIT '129', */
T2$ADDW	'130'
T2$BEGMOVE	'131'
T2$CALL	'132'
T2$CALLVAR	'133'
/*	T2$134 LIT '134', */
T2$PROCEDURE	'135'
T2$LOCALLABEL	'136'
T2$CASELABEL	'137'
T2$LABELDEF	'138'
T2$INPUT	'139'
T2$GO$TO	'140'
T2$JMP	'141'
T2$JNC	'142'
T2$JNZ	'143'
T2$SIGN	'144'
T2$ZERO	'145'
T2$PARITY	'146'
T2$CARRY	'147'
T2$DISABLE	'148'
T2$ENABLE	'149'
T2$HALT	'150'
T2$STMTCNT	'151'
T2$LINEINFO	'152'
T2$MODULE	'153'
T2$SYNTAXERROR	'154'
T2$TOKENERROR	'155'
T2$EOF	'156'
T2$LIST	'157'
T2$NOLIST	'158'
T2$CODE	'159'
T2$NOCODE	'160'
T2$EJECT	'161'
T2$INCLUDE	'162'
T2$ERROR	'163'
/*	T2$164 LIT '164', */
/*	T2$165 LIT '165', */
/*	T2$166 LIT '166', */
/*	T2$167 LIT '167', */
/*	T2$168 LIT '168', */
/*	T2$169 LIT '169', */
/*	T2$170 LIT '170', */
/*	T2$171 LIT '171', */
T2$VARIABLE	'172'
T2$NUMBER	'173'
T2$BIGNUMBER	'174'
/*	T2$175 LIT '175', */
/*	T2$176 LIT '176', */
/*	T2$177 LIT '177', */
/*	T2$178 LIT '178', */
/*	T2$179 LIT '179', */
/*	T2$180 LIT '180', */
T2$STACKPTR	'181'
T2$SEMICOLON	'182'
T2$OPTBACKREF	'183'
T2$CASE	'184'
T2$ENDCASE	'185'
T2$ENDPROC	'186'
T2$LENGTH	'187'
T2$LAST	'188'
T2$SIZE	'189'
T2$BEGCALL	'190'
/*	T2$191 LIT '191', */
/*	T2$192 LIT '192', */
/*	T2$193 LIT '193', */
/*	T2$194 LIT '194', */
/*	T2$195 LIT '195', */
/*	T2$196 LIT '196', */
/*	T2$197 LIT '197', */
/*	T2$198 LIT '198', */
/*	T2$199 LIT '199', */
/*	T2$200 LIT '200', */
/*	T2$201 LIT '201', */
/*	T2$202 LIT '202', */
/*	T2$203 LIT '203', */
/*	T2$204 LIT '204', */
/*	T2$205 LIT '205', */
/*	T2$206 LIT '206', */
/*	T2$207 LIT '207', */
/*	T2$208 LIT '208', */
/*	T2$209 LIT '209', */
/*	T2$210 LIT '210', */
/*	T2$211 LIT '211', */
/*	T2$212 LIT '212', */
/*	T2$213 LIT '213', */
/*	T2$214 LIT '214', */
/*	T2$215 LIT '215', */
/*	T2$216 LIT '216', */
/*	T2$217 LIT '217', */
/*	T2$218 LIT '218', */
/*	T2$219 LIT '219', */
/*	T2$220 LIT '220', */
/*	T2$221 LIT '221', */
/*	T2$222 LIT '222', */
/*	T2$223 LIT '223', */
/*	T2$224 LIT '224', */
/*	T2$225 LIT '225', */
/*	T2$226 LIT '226', */
/*	T2$227 LIT '227', */
/*	T2$228 LIT '228', */
/*	T2$229 LIT '229', */
/*	T2$230 LIT '230', */
/*	T2$231 LIT '231', */
/*	T2$232 LIT '232', */
/*	T2$233 LIT '233', */
/*	T2$234 LIT '234', */
/*	T2$235 LIT '235', */
/*	T2$236 LIT '236', */
/*	T2$237 LIT '237', */
/*	T2$238 LIT '238', */
/*	T2$239 LIT '239', */
/*	T2$240 LIT '240', */
/*	T2$241 LIT '241', */
/*	T2$242 LIT '242', */
/*	T2$243 LIT '243', */
/*	T2$244 LIT '244', */
/*	T2$245 LIT '245', */
/*	T2$246 LIT '246', */
/*	T2$247 LIT '247', */
/*	T2$248 LIT '248', */
/*	T2$249 LIT '249', */
/*	T2$250 LIT '250', */
/*	T2$251 LIT '251', */
/*	T2$252 LIT '252', */
/*	T2$253 LIT '253', */
T2$254	'254'

/* ICodes */
I$STRING	'0'
I$VARIABLE	'1'
I$NUMBER	'2'
I$PLUSSIGN	'3'
I$MINUSSIGN	'4'
I$PLUS	'5'
I$MINUS	'6'
I$STAR	'7'
I$SLASH	'8'
I$MOD	'9'
I$AND	'10'
I$OR	'11'
I$XOR	'12'
I$NOT	'13'
I$LT	'14'
I$LE	'15'
I$EQ	'16'
I$NE	'17'
I$GE	'18'
I$GT	'19'
I$ADDRESSOF	'20'
I$UNARYMINUS	'21'
I$STACKPTR	'22'
I$INPUT	'23'
I$OUTPUT	'24'
I$CALL	'25'
I$CALLVAR	'26'
I$BYTEINDEX	'27'
I$WORDINDEX	'28'
I$COLONEQUALS	'29'
I$MEMBER	'30'
I$BASED	'31'
I$CARRY	'32'
I$DEC	'33'
I$DOUBLE	'34'
I$HIGH	'35'
I$LAST	'36'
I$LENGTH	'37'
I$LOW	'38'
I$MOVE	'39'
I$PARITY	'40'
I$ROL	'41'
I$ROR	'42'
I$SCL	'43'
I$SCR	'44'
I$SHL	'45'
I$SHR	'46'
I$SIGN	'47'
I$SIZE	'48'
I$TIME	'49'
I$ZERO	'50'

/* AT Icodes */
ATI$AHDR	'0'
ATI$DHDR	'1'
ATI$2	'2'
ATI$STRING	'3'
ATI$DATA	'4'
ATI$END	'5'
ATI$EOF	'6'

/* CF codes */
CF$3	'3'
CF$POP	'4'
CF$XTHL	'5'
CF$6	'6'
CF$7	'7'
CF$XCHG	'14'
CF$MOVRPM	'16'
CF$MOVLRM	'18'
CF$MOVMRPR	'19'
CF$MOVMLR	'20'
CF$DW	'21'
CF$SPHL	'22'
CF$PUSH	'23'
CF$INX	'24'
CF$DCX	'25'
CF$DCXH	'26'
CF$RET	'27'
CF$SHLD	'59'
CF$STA	'60'
CF$MOVMRP	'62'
CF$67	'67'
CF$68	'68'
CF$DELAY	'97'
CF$MOVE$HL	'103'
CF$MOVLRHR	'110'
CF$MOVHRLR	'113'
CF$MOVHRM	'114'
CF$MOVMHR	'115'
CF$INXSP	'116'
CF$DCXSP	'117'
CF$JMPTRUE	'118'
CF$134	'134'
CF$EI	'149'
CF$171	'171'
CF$174	'174'



/* error codes */
ERR1	'1' /* INVALID PL/M-80 CHARACTER */
ERR2	'2' /* UNPRINTABLE ASCII CHARACTER */
ERR3	'3' /* IDENTIFIER, STRING, OR NUMBER TOO LONG, TRUNCATED */
ERR4	'4' /* ILLEGAL NUMERIC CONSTANT TYPE */
ERR5	'5' /* INVALID CHARACTER IN NUMERIC CONSTANT */
ERR6	'6' /* ILLEGAL MACRO REFERENCE, RECURSIVE EXPANSION */
ERR7	'7' /* LIMIT EXCEEDED: MACROS NESTED TOO DEEPLY */
ERR8	'8' /* INVALID CONTROL FORMAT */
ERR9	'9' /* INVALID CONTROL */
ERR10	'10' /* ILLEGAL USE OF PRIMARY CONTROL AFTER NON-CONTROL LINE */
ERR11	'11' /* MISSING CONTROL PARAMETER */
ERR12	'12' /* INVALID CONTROL PARAMETER */
ERR13	'13' /* LIMIT EXCEEDED: INCLUDE NESTING */
ERR14	'14' /* INVALID CONTROL FORMAT, INCLUDE NOT LAST CONTROL */
ERR15	'15' /* MISSING INCLUDE CONTROL PARAMETER */
ERR16	'16' /* ILLEGAL PRINT CONTROL */
ERR17	'17' /* INVALID PATH-NAME */
ERR18	'18' /* INVALID MULTIPLE LABELS AS MODULE NAMES */
ERR19	'19' /* INVALID LABEL IN MODULE WITHOUT MAIN PROGRAM */
ERR20	'20' /* MISMATCHED IDENTIFIER AT END OF BLOCK */
ERR21	'21' /* MISSING PROCEDURE NAME */
ERR22	'22' /* INVALID MULTIPLE LABELS AS PROCEDURE NAMES */
ERR23	'23' /* INVALID LABELLED END IN EXTERNAL PROCEDURE */
ERR24	'24' /* INVALID STATEMENT IN EXTERNAL PROCEDURE */
ERR25	'25' /* UNDECLARED PARAMETER */
ERR26	'26' /* INVALID DECLARATION, STATEMENT OUT OF PLACE */
ERR27	'27' /* LIMIT EXCEEDED: NUMBER OF DO BLOCKS */
ERR28	'28' /* MISSING 'THEN' */
ERR29	'29' /* ILLEGAL STATEMENT */
ERR30	'30' /* LIMIT EXCEEDED: NUMBER OF LABELS ON STATEMENT */
ERR31	'31' /* LIMIT EXCEEDED: PROGRAM TOO COMPLEX */
ERR32	'32' /* INVALID SYNTAX, TEXT IGNORED UNTIL ';' */
ERR33	'33' /* DUPLICATE LABEL DECLARATION */
ERR34	'34' /* DUPLICATE PROCEDURE DECLARATION */
ERR35	'35' /* LIMIT EXCEEDED: NUMBER OF PROCEDURES */
ERR36	'36' /* MISSING PARAMETER */
ERR37	'37' /* MISSING ') ' AT END OF PARAMETER LIST */
ERR38	'38' /* DUPLICATE PARAMETER NAME */
ERR39	'39' /* INVALID ATTRIBUTE OR INITIALIZATION, NOT AT MODULE LEVEL */
ERR40	'40' /* DUPLICATE ATTRIBUTE */
ERR41	'41' /* CONFLICTING ATTRIBUTE */
ERR42	'42' /* INVALID INTERRUPT VALUE */
ERR43	'43' /* MISSING INTERRUPT VALUE */
ERR44	'44' /* ILLEGAL ATTRIBUTE, 'INTERRUPT' WITH PARAMETERS */
ERR45	'45' /* ILLEGAL ATTRIBUTE, 'INTERRUPT' WITH TYPED PROCEDURE */
ERR46	'46' /* ILLEGAL USE OF LABEL */
ERR47	'47' /* MISSING ') ' AT END OF FACTORED DECLARATION */
ERR48	'48' /* ILLEGAL DECLARATION STATEMENT SYNTAX */
ERR49	'49' /* LIMIT EXCEEDED: NUMBER OF ITEMS IN FACTORED DECLARE */
ERR50	'50' /* INVALID ATTRIBUTES FOR BASE */
ERR51	'51' /* INVALID BASE, SUBSCRIPTING ILLEGAL */
ERR52	'52' /* INVALID BASE, MEMBER OF BASED STRUCTURE OR ARRAY OF STRUCTURES */
ERR53	'53' /* INVALID STRUCTURE MEMBER IN BASE */
ERR54	'54' /* UNDECLARED BASE */
ERR55	'55' /* UNDECLARED STRUCTURE MEMBER IN BASE */
ERR56	'56' /* INVALID MACRO TEXT, NOT A STRING CONSTANT */
ERR57	'57' /* INVALID DIMENSION, ZERO ILLEGAL */
ERR58	'58' /* INVALID STAR DIMENSION IN FACTORED DECLARATION */
ERR59	'59' /* ILLEGAL DIMENSION ATTRIBUTE */
ERR60	'60' /* MISSING ') ' AT END OF DIMENSION */
ERR61	'61' /* MISSING TYPE */
ERR62	'62' /* INVALID STAR DIMENSION WITH 'STRUCTURE' OR 'EXTERNAL' */
ERR63	'63' /* INVALID DIMENSION WITH THIS ATTRIBUTE */
ERR64	'64' /* MISSING STRUCTURE MEMBERS */
ERR65	'65' /* MISSING ') ' AT END OF STRUCTURE MEMBER LIST */
ERR66	'66' /* INVALID STRUCTURE MEMBER, NOT AN IDENTIFIER */
ERR67	'67' /* DUPLICATE STRUCTURE MEMBER NAME */
ERR68	'68' /* LIMIT EXCEEDED: NUMBER OF STRUCTURE MEMBERS */
ERR69	'69' /* INVALID STAR DIMENSION WITH STRUCTURE MEMBER */
ERR70	'70' /* INVALID MEMBER TYPE, 'STRUCTURE' ILLEGAL */
ERR71	'71' /* INVALID MEMBER TYPE, 'LABEL' ILLEGAL */
ERR72	'72' /* MISSING TYPE FOR STRUCTURE MEMBER */
ERR73	'73' /* INVALID ATTRIBUTE OR INITIALIZATION, NOT AT MODULE LEVEL */
ERR74	'74' /* INVALID STAR DIMENSION, NOT WITH 'DATA' OR 'INITIAL' */
ERR75	'75' /* MISSING ARGUMENT OF 'AT' , 'DATA' , OR 'INITIAL' */
ERR76	'76' /* CONFLICTING ATTRIBUTE WITH PARAMETER */
ERR77	'77' /* INVALID PARAMETER DECLARATION, BASE ILLEGAL */
ERR78	'78' /* DUPLICATE DECLARATION */
ERR79	'79' /* ILLEGAL PARAMETER TYPE, NOT BYTE OR ADDRESS */
ERR80	'80' /* INVALID DECLARATION, LABEL MAY NOT BE BASED */
ERR81	'81' /* CONFLICTING ATTRIBUTE WITH 'BASE' */
ERR82	'82' /* INVALID SYNTAX, MISMATCHED '(' */
ERR83	'83' /* LIMIT EXCEEDED: DYNAMIC STORAGE */
ERR84	'84' /* LIMIT EXCEEDED: BLOCK NESTING */
ERR85	'85' /* LONG STRING ASSUMED CLOSED AT NEXT SEMICOLON OR QUOTE */
ERR86	'86' /* LIMIT EXCEEDED: SOURCE LINE LENGTH */
ERR87	'87' /* MISSING 'END' , END-OF-FILE ENCOUNTERED */
ERR88	'88' /* INVALID PROCEDURE NESTING, ILLEGAL IN REENTRANT PROCEDURE */
ERR89	'89' /* MISSING 'DO' FOR MODULE */
ERR90	'90' /* MISSING NAME FOR MODULE */
ERR91	'91' /* ILLEGAL PAGELENGTH CONTROL VALUE */
ERR92	'92' /* ILLEGAL PAGEWIDTH CONTROL VALUE */
ERR93	'93' /* MISSING 'DO' FOR 'END' , 'END' IGNORED */
ERR94	'94' /* ILLEGAL CONSTANT, VALUE > 65535 */
ERR95	'95' /* ILLEGAL RESPECIFICATION OF PRIMARY CONTROL IGNORED */
ERR96	'96' /* COMPILER ERROR: SCOPE STACK UNDERFLOW */
ERR97	'97' /* COMPILER ERROR: PARSE STACK UNDERFLOW */
ERR98	'98' /* INCLUDE FILE IS NOT A DISKETTE FILE */
ERR99	'99' /* ?? unused */
ERR100	'100' /* INVALID STRING CONSTANT IN EXPRESSION */
ERR101	'101' /* INVALID ITEM FOLLOWS DOT OPERATOR */
ERR102	'102' /* MISSING PRIMARY OPERAND */
ERR103	'103' /* MISSING ') ' AT END OF SUBEXPRESSION */
ERR104	'104' /* ILLEGAL PROCEDURE INVOCATION WITH DOT OPERATOR */
ERR105	'105' /* UNDECLARED IDENTIFIER */
ERR106	'106' /* INVALID INPUT/OUTPUT PORT NUMBER */
ERR107	'107' /* ILLEGAL INPUT/OUTPUT PORT NUMBER, NOT NUMERIC CONSTANT */
ERR108	'108' /* MISSING ') ' AFTER INPUT/OUTPUT PORT NUMBER */
ERR109	'109' /* MISSING INPUT/OUTPUT PORT NUMBER */
ERR110	'110' /* INVALID LEFT OPERAND OF QUALIFICATION, NOT A STRUCTURE */
ERR111	'111' /* INVALID RIGHT OPERAND OF QUALIFICATION, NOT IDENTIFIER */
ERR112	'112' /* UNDECLARED STRUCTURE MEMBER */
ERR113	'113' /* MISSING ') ' AT END OF ARGUMENT LIST */
ERR114	'114' /* INVALID SUBSCRIPT, MULTIPLE SUBSCRIPTS ILLEGAL */
ERR115	'115' /* MISSING ') ' AT END OF SUBSCRIPT */
ERR116	'116' /* MISSING '=' IN ASSIGNMENT STATEMENT */
ERR117	'117' /* MISSING PROCEDURE NAME IN CALL STATEMENT */
ERR118	'118' /* INVALID INDIRECT CALL, IDENTIFIER NOT AN ADDRESS SCALAR */
ERR119	'119' /* LIMIT EXCEEDED: PROGRAM TOO COMPLEX */
ERR120	'120' /* LIMIT EXCEEDED: EXPRESSION TOO COMPLEX */
ERR121	'121' /* LIMIT EXCEEDED: EXPRESSION TOO COMPLEX */
ERR122	'122' /* LIMIT EXCEEDED: PROGRAM TOO COMPLEX */
ERR123	'123' /* INVALID DOT OPERAND, BUILT-IN PROCEDURE ILLEGAL */
ERR124	'124' /* MISSING ARGUMENTS FOR BUILT-IN PROCEDURE */
ERR125	'125' /* ILLEGAL ARGUMENT FOR BUILT-IN PROCEDURE */
ERR126	'126' /* MISSING ') ' AFTER BUILT-IN PROCEDURE ARGUMENT LIST */
ERR127	'127' /* INVALID SUBSCRIPT ON NON-ARRAY */
ERR128	'128' /* INVALID LEFT-HAND OPERAND OF ASSIGNMENT */
ERR129	'129' /* ILLEGAL 'CALL' WITH TYPED PROCEDURE */
ERR130	'130' /* ILLEGAL REFERENCE TO OUTPUT FUNCTION */
ERR131	'131' /* ILLEGAL REFERENCE TO UNTYPED PROCEDURE */
ERR132	'132' /* ILLEGAL USE OF LABEL */
ERR133	'133' /* ILLEGAL REFERENCE TO UNSUBSCRIPTED ARRAY */
ERR134	'134' /* ILLEGAL REFERENCE TO UNSUBSCRIPTED MEMBER ARRAY */
ERR135	'135' /* ILLEGAL REFERENCE TO AN UNQUALIFIED STRUCTURE */
ERR136	'136' /* INVALID RETURN FOR UNTYPED PROCEDURE, VALUE ILLEGAL */
ERR137	'137' /* MISSING VALUE IN RETURN FOR TYPED PROCEDURE */
ERR138	'138' /* MISSING INDEX VARIABLE */
ERR139	'139' /* INVALID INDEX VARIABLE TYPE, NOT BYTE OR ADDRESS */
ERR140	'140' /* MISSING '=' FOLLOWING INDEX VARIABLE */
ERR141	'141' /* MISSING 'TO' CLAUSE */
ERR142	'142' /* MISSING IDENTIFIER FOLLOWING GOTO */
ERR143	'143' /* INVALID REFERENCE FOLLOWING GOTO, NOT A LABEL */
ERR144	'144' /* INVALID GOTO LABEL, NOT AT LOCAL OR MODULE LEVEL */
ERR145	'145' /* MISSING 'TO' FOLLOWING 'GO' */
ERR146	'146' /* MISSING ') ' AFTER 'AT' RESTRICTED EXPRESSION */
ERR147	'147' /* MISSING IDENTIFIER FOLLOWING DOT OPERATOR */
ERR148	'148' /* INVALID QUALIFICATION IN RESTRICTED REFERENCE */
ERR149	'149' /* INVALID SUBSCRIPTING IN RESTRICTED REFERENCE */
ERR150	'150' /* MISSING ') ' AT END OF RESTRICTED SUBSCRIPT */
ERR151	'151' /* INVALID OPERAND IN RESTRICTED EXPRESSION */
ERR152	'152' /* MISSING ') ' AFTER CONSTANT LIST */
ERR153	'153' /* INVALID NUMBER OF ARGUMENTS IN CALL, TOO MANY */
ERR154	'154' /* INVALID NUMBER OF ARGUMENTS IN CALL, TOO FEW */
ERR155	'155' /* INVALID RETURN IN MAIN PROGRAM */
ERR156	'156' /* MISSING RETURN STATEMENT IN TYPED PROCEDURE */
ERR157	'157' /* INVALID ARGUMENT, ARRAY REQUIRED FOR LENGTH OR LAST */
ERR158	'158' /* INVALID DOT OPERAND, LABEL ILLEGAL */
ERR159	'159' /* COMPILER ERROR: PARSE STACK UNDERFLOW */
ERR160	'160' /* COMPILER ERROR: OPERAND STACK UNDERFLOW */
ERR161	'161' /* COMPILER ERROR: ILLEGAL OPERAND STACK EXCHANGE */
ERR162	'162' /* COMPILER ERROR: OPERATOR STACK UNDERFLOW */
ERR163	'163' /* COMPILER ERROR: GENERATION FAILURE */
ERR164	'164' /* COMPILER ERROR: SCOPE STACK OVERFLOW */
ERR165	'165' /* COMPILER ERROR: SCOPE STACK UNDERFLOW */
ERR166	'166' /* COMPILER ERROR: CONTROL STACK OVERFLOW */
ERR167	'167' /* COMPILER ERROR: CONTROL STACK UNDERFLOW */
ERR168	'168' /* COMPILER ERROR: BRANCH MISSING IN 'IF' STATEMENT */
ERR169	'169' /* ILLEGAL FORWARD CALL */
ERR170	'170' /* ILLEGAL RECURSIVE CALL */
ERR171	'171' /* INVALID USE OF DELIMITER OR RESERVED WORD IN EXPRESSION */
ERR172	'172' /* INVALID LABEL: UNDEFINED */
ERR173	'173' /* INVALID LEFT SIDE OF ASSIGNMENT: VARIABLE DECLARED WITH DATA ATTRIBUTE */
ERR174	'174' /* INVALID NULL PROCEDURE */
ERR175	'175' /* unused */
ERR176	'176' /* INVALID INTVECTOR INTERVAL VALUE */
ERR177	'177' /* INVALID INTVECTOR LOCATION VALUE */
ERR178	'178' /* INVALID 'AT' RESTRICTED REFERENCE, EXTERNAL ATTRIBUTE CONFLICTS WITH PUBLIC ATTRIBUTE */
ERR179	'179' /* OUTER 'IF' MAY NOT HAVE AN 'ELSE' PART */
ERR180	'180' /* MISSING OR INVALID CONDITIONAL COMPILATION PARAMETER */
ERR181	'181' /* MISSING OR INVALID CONDITIONAL COMPILATION CONSTANT */
ERR182	'182' /* MISPLACED ELSE OR ELSEIF OPTION */
ERR183	'183' /* MISPLACED ENDIF OPTION */
ERR184	'184' /* CONDITIONAL COMPILATION PARAMETER NAME TOO LONG */
ERR185	'185' /* MISSING OPERATOR IN CONDITIONAL COMPILATION EXPRESSION */
ERR186	'186' /* INVALID CONDITIONAL COMPILATION CONSTANT, TOO LARGE */
ERR187	'187' /* LIMIT EXCEEDED: NUMBER OF SAVE LEVELS > 5 */
ERR188	'188' /* MISPLACED RESTORE OPTION */
ERR189	'189' /* NULL STRING NOT ALLOWED */
ERR200	'200' /* LIMIT EXCEEDED: STATEMENT SIZE */
ERR201	'201' /* INVALID DO CASE BLOCK, AT LEAST ONE CASE REQUIRED */
ERR202	'202' /* LIMIT EXCEEDED: NUMBER OF ACTIVE CASES */
ERR203	'203' /* LIMIT EXCEEDED: NESTING OF TYPED PROCEDURE CALLS */
ERR204	'204' /* LIMIT EXCEEDED: NUMBER OF ACTIVE PROCEDURES AND DO CASE GROUPS */
ERR205	'205' /* ILLEGAL NESTING OF BLOCKS, ENDS NOT BALANCED */
ERR206	'206' /* LIMIT EXCEEDED: CODE SEGMENT SIZE */
ERR207	'207' /* LIMIT EXCEEDED: SEGMENT SIZE */
ERR208	'208' /* LIMIT EXCEEDED: STRUCTURE SIZE */
ERR209	'209' /* ILLEGAL INITIALIZATION OF MORE SPACE THAN DECLARED */
ERR210	'210' /* ILLEGAL INITIALIZATION OF A BYTE TO A VALUE > 255 */
ERR211	'211' /* INVALID IDENTIFIER IN 'AT' RESTRICTED REFERENCE */
ERR212	'212' /* INVALID RESTRICTED REFERENCE IN 'AT' , BASE ILLEGAL */
ERR213	'213' /* UNDEFINED RESTRICTED REFERENCE IN 'AT' */
ERR214	'214' /* COMPILER ERROR: OPERAND CANNOT BE TRANSFORMED */
ERR215	'215' /* COMPILER ERROR: EOF READ IN FINAL ASSEMBLY */
ERR216	'216' /* COMPILER ERROR: BAD LABEL ADDRESS */
ERR217	'217' /* ILLEGAL INITIALIZATION OF AN EXTERNAL VARIABLE */
ERR218	'218' /* ILLEGAL SUCCESSIVE USES OF RELATIONAL OPERATORS */
ERR219	'219' /* LIMIT EXCEEDED: NUMBER OF EXTERNALS > 255 */

/* standard structures */
FILE$P1         'AFTN ADDRESS, sNam(6) BYTE, fNam(16) BYTE'
FILE$P2         'BUF$P ADDRESS, BSIZE ADDRESS, ACTUAL ADDRESS, CUROFF ADDRESS'
FILE$T          'STRUCTURE(FILE$P1, FILE$P2)'
SYM$ST	'STRUCTURE(link ADDRESS, info$p ADDRESS, name(1) BYTE)'
INFO$P1	'len BYTE, type BYTE, sym ADDRESS, scope ADDRESS, ilink ADDRESS, flag(3) BYTE'
INFO$P2	'extId BYTE, dim ADDRESS, baseoff ADDRESS, parent ADDRESS'
INFO$P3	'dtype BYTE, intno BYTE, pcnt BYTE, procId BYTE'
INFO$ST	'STRUCTURE(INFO$P1, INFO$P2, INFO$P3)'
LIT$ST	'STRUCTURE(len BYTE, type BYTE, sym ADDRESS, scope ADDRESS, ilink ADDRESS, litAddr ADDRESS)'
LOC$ST	'STRUCTURE(blk ADDRESS, byt ADDRESS)'
CMD$ST	'STRUCTURE(link ADDRESS, pstr(1) BYTE)'
MAC$ST	'STRUCTURE(inChr$p ADDRESS, info$p ADDRESS)'
LINFO$ST 'STRUCTURE(type BYTE, lineCnt ADDRESS, stmtCnt ADDRESS, blkCnt ADDRESS)'
TX1ITEM$ST	'structure(type byte, dataw(129) address)'

VAL2$SIZE        '1'
VAL6$SIZE        '1'
VAL8$SIZE        '1'
VAL10$SIZE       '1'
VAL12$SIZE       '1'
VAL14$SIZE       '1'
VAL16$SIZE       '1'
VAL18$SIZE       '1'
VAL20$SIZE       '1'
VAL22$SIZE       '1'
VAL24$SIZE       '1'
VAL26$SIZE       '1'
VAL28$SIZE       '1'

REC2$ST          'structure(type byte, len address, val(VAL2$SIZE) byte)'
REC4$ST          'structure(type byte, len address, subtype byte, seg byte, addr address, crc byte)'
REC6$ST          'structure(type byte, len address, seg byte, addr address, val(VAL6$SIZE) byte)'
REC8$ST          'structure(type byte, len address, val(VAL8$SIZE) byte)'
REC12$ST         'structure(type byte, len address, val(VAL12$SIZE) byte)'
REC16$ST         'structure(type byte, len address, val(VAL16$SIZE) byte)'
REC18$ST         'structure(type byte, len address, val(VAL18$SIZE) byte)'
REC20$ST         'structure(type byte, len address, val(VAL20$SIZE) byte)'
REC22$ST         'structure(type byte, len address, val(VAL22$SIZE) byte)'
REC24$ST         'structure(type byte, len address, val(VAL24$SIZE) byte)'


/* plm main */

/* $file(main.plm) */
$file(main.plm,plm0a.plm,plm1a.plm.plm6b.plm)
fatalError      P(B err)

$file(plmA.plm)
cmdText$p       A
sub$40AC        P

$file(plmb.plm)
sub$4767        P

$file(plmc.plm)
verno           BS

$file(plmd.plm)
setMarginAndTabW P(B b1,B b2)
setPageNo       P(A v)
setTitle        P(A str,B len)

$file(plmd.plm,lstsp4.plm,lstsp5.plm,lstsp6.plm)
setMarkerInfo   P(B arg1b,B arg2b,B arg3b)

$file(plmd.plm,plm0h.plm)
setDate         P(A str,B len)
setPageLen      P(A len)
setPageWidth    P(A width)

$file(plmE.plm)
builtins        BS
ioBuffer        BS
keywords        BS


/* plm overlay 0 */
$file(main0.plm)
resetPt         L

$file(plm0A.plm)
cClass          BS
curBlkCnt       A
curDoBlkCnt     B
curMacroInfo$p  A
curProcData     A
curProcId       B
curStmtCnt      A
doBlkCnt        A
ifDepth         A
inbuf           BS
inChr$p         A
isNonCtrlLine   B
labelBrkSymbol  A
labelBrkToken   B
lastch          B
lblBrkTxiCode   B
lineBuf         BS
lineInfoToWrite B
macroDepth      A
macroPtrs       AS
markedSymbol$p  A
skippingCOND    B
state           B
stateIdX        A
stateStack      AS
stmtLabelCnt    A
stmtLabels      AS
stmtStartCode   B
tok2oprMap      BS
tokenStr        BS
tokenType       B
tokenVal        A
yyAgain         B
createTxi1File  P
popDO           P
pushBlock       P(A idAndLevel)
sub$4119        P
syntaxError     P(B err)
tokenError      P(B err,A sym$p)
tokenErrorAt    P(B err)
wrBuf           P(A buf,A len)
wrByte          P(B v)
writeLineInfo   P
writeTx1        P(A buf,A len)
wrOffset        P(A addr)
wrOprAndValue   P
wrWord          P(A v)
wrXrefDef       P
wrXrefUse       P

$file(plm0A.plm,main1.plm)
curProcInfo$p   A
linfo           "LINFO$ST"

$file(plm0A.plm,pdata4.plm)
ocurch          A
olstch          A

$file(plm0A.plm,plm3a.plm,pdata4.plm)
tx1Buf          BS

$file(plm0b.plm)
acceptRPAR      P
badCmdTail      P(B err)
doCONDcompile   P(A pch)
do$Control      P(A pch)
nxtCh           P
skipToRPARorEOL P
skipWhite       P
unknownCtrl     P

$file	(plm0c.asm)
gnxtch		P
ingetc		P
trunc		B
rSrcLn		P

$file(plm0d.plm)
getlin          P

$file(plm0e.plm)
parseDcl        P
parseExpresion  P(B endTok)
parseProcDcl    P
setYyAgain      P
yylex           P
yylexMatch      P(B token)"BOOLEAN"
yylexNotMatch   P(B token)"BOOLEAN"

$file(plm0f.plm)
curState        A
endSeen         B
sub$6F00        P

$file(plm0g.plm)
createLit       P(A pstr)A

/* $file(plm0h.plm) */

/* plm overlay 1 */
$file(main1.plm)
b88B3           B
b91C0           B
cleanup         L
curStmtNum      A
markedStSP      A
regetTx1Item    B
T2CntForStmt    A
tx1Aux1         B
tx1Aux2         B
tx1Item         "TX1ITEM$ST"
tx1RdBuf        BS
tx2Buf          BS
varArrayIndex   A
varInfoOffset   A
varNestedArrayIndex A
varVal          A
xrfBuf          BS

$file(main1.plm,plm3a.plm)
atBuf           BS

$file(plm1a.plm)
b402F           BS
b40B7           BS
b413F           BS
b4172           BS
builtinsMap     BS
ex1Stack        BS
ex2Stack        BS
ex3Stack        AS
exSP            A
operatorSP      A
operatorStack   AS
parseSP         A
parseStack      AS
st1Stack        BS
st2Stack        BS
st3Stack        AS
stSP            A
mapLtoT2        P
optWrXrf        P
rdTx1Item       P
setRegetTx1Item P
sub$42EF        P(A arg1w)A
wrTx2Error      P(B arg1b)
wrTx2ExtError   P(B arg1b)
wrTx2File       P(A buf,B cnt)
wrTx2Item       P(B arg1b)A
wrTx2Item1Arg   P(B arg1b,A arg2w)A
wrTx2Item2Arg   P(B arg1b,A arg2w,A arg3w)A
wrTx2Item3Arg   P(B arg1b,A arg2w,A arg3w,A arg4w)A

$file(plm1b.pl3)
expectRPAREN    P(B arg1b)
getTx1Item      P
matchTx2AuxFlag P(B arg1b)B
matchTx2Item    P(B arg1b)B
notMatchTx2Item P(B arg1b)B
resyncRPAREN    P
sub$4599        P
sub$45E0        P
sub$4631        P
sub$467D        P
wrAtFile        P(A buf,A cnt)
wrAtFileByte    P(B arg1b)
wrAtFileWord    P(A arg1w)

$file(plm1c.plm)
acceptOpAndArgs P
exprMakeNode    P(B arg1b,B arg2b)
exprPop         P
exprPush2       P(B arg1b,A arg2w)
getCallArgCnt   PB
getRestrictedExpr P
mkIndexNode     P
moveExpr2Stmt   P
parseDataItems  P(A arg1w)A
parsePortNum    P(B arg1b)
popOperatorStack P
popParseStack   P
pushOperator    P(B arg1b)
pushParseByte   P(B arg1b)
pushParseWord   P(A arg1w)
resetStacks     P
sub$4CFD        P(A arg1w)
sub$4D2C        P
sub$4D38        P
sub$4DCF        P(B arg1b)
sub$50D5        P
sub$512E        P(A arg1w)B
sub$521B        P

$file(plm1d.plm)
exprParse       P
exprParse0      P
exprParse1      P
exprParse10     P
exprParse11     P
exprParse12     P
exprParse13     P
exprParse14     P
exprParse15     P
exprParse16     P
exprParse17     P
exprParse18     P
exprParse19     P
exprParse2      P
exprParse20     P
exprParse3      P
exprParse4      P
exprParse5      P
exprParse6      P
exprParse7      P
exprParse8      P
exprParse9      P

$file(plm1e.plm)
stmtParse       P(A arg1w)A
sub$5945        PB
sub$59D4        PB
sub$5AD8        P
sub$6523        P

$file(plm1f.plm)
sub$6EE0        P

/* plm overlay 2 */
$file(main2.plm)
bC045           BS
bC04E           BS
bC0A8           BS
bC0B1           B
bC0B2           B
bC0B3           BS
bC0B5           BS
bC0B7           BS
bC0B9           BS
bC0BB           BS
bC0BD           BS
bC0BF           BS
bC0C1           BS
bC0C3           BS
bC140           BS
bC1BD           B
bC1BF           B
bC1D2           B
bC1D9           B
bC1DB           B
bC1E6           B
bC209           BS
blkCurInfo      AS
blkOverCnt      B
blkSP           B
boC057          BS
boC060          BS
boC069          BS
boC072          BS
boC07B          BS
boC1CC          B
boC1CD          B
boC1D8          B
boC20F          B
buf$C1E7        BS
cfrag1          B
curExtProcId    B
curOp           B
eofSeen         B
extProcId       BS
finalise        L
padC1D3         B
pc              A
procCallDepth   B
procChainId     B
procChainNext   BS
tx2Aux1b        BS
tx2Aux2b        BS
tx2Auxw         AS
tx2op1          AS
tx2op2          AS
tx2op3          AS
tx2opc          BS
tx2qEnd         B
tx2qp           B
wAF54           AS
wB488           AS
wB4B0           AS
wB4D8           AS
wB528           AS
wB53C           AS
wC084           AS
wC096           AS
wC1C3           A
wC1C5           A
wC1C7           A
wC1CF           A
wC1D6           A
wC1DC           AS

$file(plm2a.plm)
b3FCD           BS
b4029           BS
b4128           BS
b413B           BS
b418C           BS
b425D           BS
b4273           BS
b42F9           BS
b43F8           BS
b44F7           BS
b46EB           BS
b499B           BS
b4A21           BS
b4C15           BS
b4C2D           BS
b4C45           BS
b4CB4           BS
b4D23           BS
b4FA3           BS
b5012           BS
b5048           BS
b50AD           BS
b5112           BS
b5124           BS
b51E3           BS
b5202           BS
b5221           BS
b5286           BS
b528D           BS
b52B5           BS
b52DD           BS
unused          BS
w48DF           AS
w493D           AS
w502A           AS
emitTopItem     P
encodeFragData  P(B arg1b)
enterBlk        PB
exitBlk         PB
fillTx2Q        P
getTx2Item      P
putTx1Byte      P(B arg1b)
putTx1Word      P(A arg1w)
sub$5679        P(B arg1b)B
sub$56A0        P(B arg1b,B arg2b)
sub$5748        P(B arg1b)B
sub$575E        P(A arg1w)A
sub$5795        P(A arg1w)
sub$58F5        P(B arg1b)
sub$597E        P
sub$5B96        P(B arg1b,B arg2b)
sub$5C1D        P(B arg1b)
sub$5C97        P(B arg1b)
sub$5D27        P(B arg1b)
sub$5D6B        P(B arg1b)
sub$5E66        P(B arg1b)
sub$5EE8        P
sub$5F4B        P(A arg1w,A arg2w,B arg3b,B arg4b)
sub$5FBF        P(B arg1b,A arg2w$p,A arg3w$p)
sub$611A        P
sub$61A9        P(B arg1b)
sub$61E0        P(B arg1b)
sub$636A        P(B arg1b)
sub$63AC        P(B arg1b)
sub$6416        P(B arg1b)
sub$652B        P
sub$67A9        P
tx2SyntaxError  P(B arg1b)
wrFragData      P

$file(plm2b.pl3)
sub$689E        P

$file(plm2c.plm)
sub$6BD6        P

$file(plm2d.plm)
sub$717B        P
sub$7550        P

$file(plm2e.plm)
sub$7A85        P
sub$7DA9        P
sub$84ED        P

$file(plm2f.plm)
sub$87CB        P
sub$9457        P

$file(plm2g.pl3)
findParamInfo   P(B arg1b)
inxh            P
movDEM          P
opB             P(B arg1b)
opD             P(B arg1b)
sub$9514        P
sub$9560        P
sub$9624        P(A arg1w)
sub$9646        P(A arg1w)
sub$9706        P
sub$975F        P
sub$978E        P
sub$981C        P
sub$994D        P

$file(plm2h.plm)
sub$9BB0        P
sub$9D06        P
sub$9DD7        P
sub$9EF8        P
sub$9F14        P
sub$9F2F        P
sub$9F9F        P
sub$A072        P(B arg1b)
sub$A0C4        P
sub$A10A        P
sub$A153        P

/* plm overlay 3 */
/* $file(main3.plm) no externals */

$file(plm3a.plm)
b4789           BS
b47B7           BS
b4813           BS
b7199           B
nmsBuf          BS
rec12           "REC12$ST"
rec16$1         "REC16$ST"
rec16$2         "REC16$ST"
rec16$3         "REC16$ST"
rec16$4         "REC16$ST"
rec18           "REC18$ST"
rec2            "REC2$ST"
rec6            "REC6$ST"
w7197           A
sub$4889        P
sub$48BA        P(A arg1w,B arg2b,B arg3b,A arg4b$p)
sub$4908        P(A arg1w$p,A arg2w,B arg3b)
sub$4938        PA
sub$4984        PA
sub$49BC        P(A arg1w,A arg2w,A arg3w)
sub$49F9        P

$file(plm3a.plm,pdata4.plm)
objBuf          BS
rec20           "REC20$ST"
rec22           "REC22$ST"
rec24$1         "REC24$ST"
rec24$2         "REC24$ST"
rec24$3         "REC24$ST"

$file(plm3b.plm,wrec.plm)
recAddByte      P(A rec$p,B arg2b,B arg3b)
recAddWord      P(A arg1w,B arg2b,A arg3w)
writeRec        P(A rec$p,B arg2b)

/* $file(lstsp4.plm) */
$file(lstsp4.plm,lstsp6.plm)
setStartAndTabW P(B arg1b,B arg2b)

$file(lstsp4.plm,lstsp5.plm,lstsp6.plm)
flushLstBuf     P
newLineLst      P
newPageNextChLst P
setSkipLst      P(B arg1b)
tabLst          P(B arg1b)
xnumLst         P(A num,B width,B radix)
xputstr2cLst    P(A str,B endch)
xwrnstrLst      P(A str,B cnt)

/* plm overlay 4 */
/* $file(main4.plm) */
$file(main4.plm,main6.plm)
errCont         L

/* $file(page.plm) */
$file(page.plm,page1.plm)
newpgl          P

$file(page.plm,page2.plm)
nlLead          P

$file(pdata4.plm)
b9692           B
b969C           B
b969D           B
b96B0           B
b96B1           BS
b96D6           B
baseAddr        A
bo812B          B
bo813B          B
bo813C          B
cfCode          B
commentStr      BS
curExtId        B
depth           A
dstRec          B
endHelperId     B
helperId        B
helperModId     B
helperStr       BS
line            BS
lineLen         B
locLabStr       BS
lstLine         BS
opByteCnt       B
opBytes         BS
rec4            "REC4$ST"
rec6$4          "REC6$ST"
rec8            "REC8$ST"
stmtNo          A
sValAry         AS
w812F           A
w969E           A
w96D7           A
wa8125          AS
wValAry         AS

$file(pdata4.plm,main5.plm,pdata6.plm)
lstBuf          BS

$file(pdata4.plm,pdata6.plm)
codeOn          B
lineNo          A
listing         B
listOff         B
lstLineLen      B
srcbuf          BS

$file(plm4a.plm)
b42A8           BS
b42D6           BS
b4304           BS
b4332           BS
b4431           BS
b4444           BS
b4495           BS
b4566           BS
b457C           BS
b4602           BS
b473D           BS
b475E           BS
b4774           BS
b478A           BS
b47A0           BS
b4A03           BS
b4A78           BS
opcodes         BS
regIdx          BS
regNo           BS
stack$origin    BS
stkRegIdx       BS
stkRegNo        BS
w47C1           AS
w4919           AS
w506F           AS
sub$54BA        P

$file(plm4b.plm)
addWrdDisp      P(A str$p,A arg2w)
emitLabel       P
emitStatementNo P
flushRecs       P
sub$5BD3        P
sub$5E1B        P(B arg1b)
sub$5E3E        P

$file(plm4b.plm,plm6b.plm)
emitError       P
getSourceLine   P

$file(plm4c.plm)
sub$5FE7        P(A arg1w,B arg2b)
sub$668B        P

/* $file(wrec.plm) */

/* $file(lstsp5.plm) */

$file(main5.plm)
b3F0B           B
b66D8           B
dictionary$p    A
dictSize        A
dictTop$p       A
maxSymLen       B
w66D2           A
w66D4           A
xrefItem$p      A
dictionary      AS..dictionary$p
xrefItem        AS..xrefItem$p


/* $file(page1.plm) */

/* $file(page2.plm) */

$file(plm5a.plm)

/* $file(lstsp6.plm) */

/* $file(main6.plm) */

/* $file(page.plm) */

$file(pdata6.plm)
b7AD9           B
b7ADA           B
b7AE4           B
b7AF1           B
b7AF2           B
ERRNum          A
offCurCh        A
offLastCh       A
STMTNum         A
w7AE0           A
w7AE5           A
w7AE9           A
w7AEB           A

$file(plm6a.plm)
sub$42E7        P

$file(plm6b.plm)
sub$6550        P


/* files in common dir */
/* friendly names for the controls */
PRINT	 'CONTROLS(0)'
XREF	 'CONTROLS(1)'
SYMBOLS	 'CONTROLS(2)'
DEBUG	 'CONTROLS(3)'
PAGING	 'CONTROLS(4)'
OBJECT	 'CONTROLS(5)'
OPTIMIZE 'CONTROLS(6)'
IXREF	 'CONTROLS(7)'

cursym          "SYM$ST"..curSymbol$p
info            "INFO$ST"..curInfo$p
litinfo         "LIT$ST"..curInfo$p
cmd             "CMD$ST"..cmdLine$p
inChr           B..inChr$p
curScope        A..curProcData


$file(adninf.plm)
advNxtInfo      P

$file(alloc.plm)
alloc           P(A size1,A size2)

$file(allocs.plm)
allocSymbol     P(A spc)A

$file(backup.plm)
backup          P(A loc$p,A cnt)

$file(chain.plm)
chain           P(A fNam)

$file(ciflag.plm)
clrInfoFlag     P(B flag)

$file(close.plm)
close           P(A conn,A status$p)

$file(closef.plm)
closeF          P(A file$p)

$file(clrflg.plm)
clrFlag         P(A base,B flag)

$file(cpyflg.plm)
cpyFlags        P(A base)

$file(cpytil.plm)
cpyTill         P(A src$p,A dst$p,A cnt,B endch)

$file(creatf.plm)
creatf          P(A fp,A buf,A bsize,B mode)

$file(creati.plm)
allocInfo       P(A infosize)A
createInfo      P(A val,B type)

$file(data.plm)
atFile          "FILE$T"
b3CF2           B
b3CFB           B
b3CFC           B
b3CFD           B
b3CFF           B
blk1Used        A
blk2Used        A
blkSize1        A
blkSize2        A
blockDepth      A
botInfo         A
botMem          A
botSymbol       A
cmdLine$p       A
col             B
conFile         "FILE$T"
CONTROLS        BS
csegSize        A
curInfo$p       A
curSymbol$p     A
DATE            BS
debugFlag       B
debugSwitches   BS
dsegSize        A
fatalErrorCode  B
hasErrors       B
hashChains$p    A
haveModule      B
helpers$p       A
intVecLoc       A
intVecNum       B
invokeName      BS
ISIS            A
ixiFile         "FILE$T"
ixiFileName     BS
IXREFSet        B
lbuf$p          A
lBufSz          A
lChCnt          A
LEFTMARGIN      A
lfOpen          B
linesRead       A
linlft          B
localLabelCnt   A
localLabels$p   A
lstFil          "FILE$T"
lstFileName     BS
margin          B
nmsFile         "FILE$T"
objBlk          A
objByte         A
OBJECTSet       B
objFile         "FILE$T"
objFileName     BS
offNxtCmdChM1   A
ov0             BS
ov6             BS
overlay1        BS
overlay2        BS
overlay3        BS
overlay4        BS
overlay5        BS
overlay6        BS
pad3C43         B
pad$3C4E        BS
PAGELEN         B
pageNo          A
plm80Compiler   BS
PRINTSet        B
procChains      AS
procCnt         A
procInfo        AS
programErrCnt   A
PWIDTH          B
REBOOTVECTOR    A
srcFil          "FILE$T"
srcFileIdx      A
srcFileTable    AS
srcStemLen      B
srcStemName     BS
standAlone      B
startCmdLine$p  A
tblBitFlags     BS
tblOffsets      BS
TITLE           BS
TITLELEN        B
topInfo         A
topMem          A
topSymbol       A
tWidth          B
tx1File         "FILE$T"
tx2File         "FILE$T"
unexpectedEOF   B
version         BS
w381E           A
w3822           A
w382A           A
w3C34           A
w3C44           A
xrfFile         "FILE$T"

$file(delete.plm)
delete          P(A path$p,A status$p)

$file(deletf.plm)
deletf          P(A file$p)

$file(endcom.plm)
endCompile      P

$file(error.plm)
error           P(A error$num)

$file(exit.plm)
exit            P

$file(fatal.plm)
fatal           P(A str,B len)

$file(fatlio.plm)
fatlIO          P(A file$p,A errnum)

$file(fflush.plm)
fflush          P(A fp)

$file(fi.plm)
findInfo        P

$file(fill.asm)
fill            P(A cnt,A dst,B val)
fillx           P(A cnt,A dst,A val)

$file(findmi.plm)
findMemberInfo  P

$file(fiscop.plm)
findScopedInfo  P(A scp)

$file(fread.asm)
fread           P(A file,A buf,A cnt)

$file(fwrite.asm)
fwrite          P(A file,A buf,A cnt)

$file(gibin.plm)
getBuiltinId    PB

$file(gibseo.plm)
getBaseOffset   PA

$file(gibsev.plm)
getBaseVal      PA

$file(gicond.plm)
getCondFlag     PB

$file(gidim.plm)
getDimension    PA

$file(gidim2.plm)
getDimension2   PA

$file(gidtyp.plm)
getDataType     PB

$file(gieid.plm)
getExternId     PB

$file(giintn.plm)
getIntrNo       PB

$file(gilen.plm)
getLen          PB

$file(gilit.plm)
getLitaddr      PA

$file(gilnko.plm)
getLinkOffset   PA

$file(gilnkv.plm)
getlinkVal      PA

$file(giparo.plm)
getParentOffset PA

$file(giparv.plm)
getParentVal    PA

$file(gipcnt.plm)
getParamCnt     PB

$file(gipid.plm)
getProcId       PB

$file(giscop.plm)
getscope        PA

$file(gisym.plm)
getSymbol       PA

$file(gitype.plm)
getType         PB

$file(initf.plm)
initF           P(A file$p,A sNam,A fNam)

$file(itoa.plm)
num2Asc         P(A num,B width,B radix,A buf$p)B

$file(load.plm)
load            P(A path$p,A load$offset,A switch,A entry$p,A status$p)

$file(lookup.plm)
lookup          P(A pstr)

$file(lstinf.plm)
lstModuleInfo   P

$file(lstlin.plm)
lstLineNo       P

$file(memchk.asm)
memchk          PA

$file(movmem.asm)
movmem          P(A cnt,A src,A dst)

$file(open.plm)
open            P(A conn$p,A path$p,A access,A echo,A status$p)

$file(openf.plm)
openF           P(A file$p,B access)

$file(prints.plm)
printStr        P(A str,B len)

$file(putlst.asm)
putLst          P(B ch)

$file(read.plm)
read            P(A conn,A buff$p,A count,A actual$p,A status$p)

$file(readf.plm)
readf           P(A file$p,A buf$p,A len,A actual$p)

$file(rename.plm)
rename          P(A old$p,A new$p,A status$p)

$file(rescan.plm)
rescan          P(A conn,A status$p)

$file(rewind.plm)
rewind          P(A file$p)

$file(seek.plm)
seek            P(A conn,A mode,A block$p,A byte$p,A status$p)

$file(seekf.plm)
seekF           P(A file$p,A loc$p)

$file(sekend.plm)
sekEnd          P(A file$p)

$file(setflg.plm)
setFlag         P(A base,B flag)

$file(sibin.plm)
setBuiltinId    P(B id)

$file(sibseo.plm)
setBaseOffset   P(A base$p)

$file(sibsev.plm)
setBaseVal      P(A val)

$file(sicond.plm)
setCondFlag     P(B flag)

$file(sidim.plm)
setDimension    P(A dim)

$file(sidtyp.plm)
setDataType     P(B dtype)

$file(sieid.plm)
setExternId     P(B id)

$file(siflag.plm)
setInfoFlag     P(B flag)

$file(siintn.plm)
setIntrNo       P(B intNo)

$file(silen.plm)
setLen          P(B len)

$file(silit.plm)
setLitaddr      P(A litaddr)

$file(silnko.plm)
setLinkOffset   P(A link)

$file(silnkv.plm)
setLinkVal      P(A val)

$file(siparo.plm)
setParentOffset P(A parent)

$file(sipcnt.plm)
setParamCnt     P(B cnt)

$file(sipid.plm)
setProcId       P(B id)

$file(siscop.plm)
setScope        P(A scope)

$file(sisym.plm)
setSymbol       P(A symbol)

$file(sitype.plm)
setType         P(B type)

$file(strcmp.plm)
strncmp         P(A s1$p,A s2$p,B cnt)B

$file(tellF.plm)
tellF           P(A file$p,A loc$p)

$file(tiflag.plm)
testInfoFlag    P(B flag)B

$file(tstflg.plm)
testFlag        P(A base,B flag)B

$file(wr2lst.plm)
wr2cLst         P(A arg1w)

$file(wrclst.asm)
wrcLst          P(B ch)

$file(write.plm)
write           P(A conn,A buff$p,A count,A status$p)

$file(writef.plm)
writeF          P(A fp,A buf,A count)

$file(wrslst.plm)
wrnstrLst       P(A str$p,A cnt)

$file(zerflg.plm)
clrFlags        P(A base)
shared/adninf.plm
adninf: DO;
$include(:f3:adninf.ipx)

advNxtInfo: PROCEDURE PUBLIC;
	do while 1;
		curInfo$p = curInfo$p + getLen;
		if curInfo$p >= topInfo then
		do;
			curInfo$p = 0;
			return;
		end;
		else if getType <> 9 then
			return;
	end;
end;


END;

shared/alloc.plm
alloc: DO;
$include(:f3:alloc.ipx)

alloc: PROCEDURE(size1, size2) PUBLIC;
	DECLARE (size1, size2) ADDRESS;

	blk1Used = blk1Used + size1;
	blk2Used = blk2Used + size2;
	if blk1Used >= blksize1 or blk2Used >= blksize2 then
		call fatalError(ERR83);
end alloc;
end;
shared/allocs.plm
allocs: DO;
$include(:f3:allocs.ipx)

allocSymbol: PROCEDURE(spc) ADDRESS PUBLIC;
	DECLARE spc ADDRESS;
	DECLARE tmp ADDRESS;

	if (tmp := botSymbol - spc) < topInfo then
		call fatalError(ERR83);
	return (botSymbol := tmp);
end allocSymbol;

end;
shared/backup.plm
backup: DO;
$include(:f3:backup.ipx)

backup: PROCEDURE(loc$p, cnt) public; /* backup the block/byte pos by cnt bytes */
	DECLARE (loc$p, cnt) ADDRESS;
	DECLARE loc BASED loc$p LOC$ST;
	DECLARE (blk, byt) ADDRESS;

	blk = cnt / 128;
	byt = cnt mod 128;
	loc.blk = loc.blk - blk;
	if byt > loc.byt then
	do;
		loc.blk = loc.blk - 1;
		loc.byt = loc.byt + 128 - byt;
	end;
	else
		loc.byt = loc.byt - byt;
end;


END;
shared/chain.plm
chain: DO;

$include(:f3:chain.ipx)

chain:	PROCEDURE(fNam) public;
	DECLARE fNam ADDRESS;
	DECLARE loadFile FILE$T;
	DECLARE (status, entry, switch) ADDRESS;

	if debugFlag then
		switch = 2;
	else
		switch = 1;
	call Load(fNam, 0, switch, .entry, .status);
	if status <> 0 then
	do;
		call initF(.loadFile, .('LOAD '), fNam);
		call fatlIO(.loadFile, status);
	end;
end chain;
end;
shared/ciflag.plm
ciflag: DO;

$include(:f3:ciflag.ipx)

clrInfoFlag: PROCEDURE(flag) PUBLIC;
	DECLARE flag BYTE;
	call clrFlag(.info.flag, flag);
end;



END;

shared/close.plm
close: DO;
$include(:f3:close.ipx)

close: PROCEDURE(conn, status$p) public;
	declare (conn, status$p) address;
	CALL ISIS(ICLOSE, .conn);
end close;

end;
shared/closef.plm
closef: DO;
$include(:f3:closef.ipx)

closeF: PROCEDURE(file$p) public;
	DECLARE file$p ADDRESS;
	DECLARE file BASED file$p FILE$T;
	DECLARE status ADDRESS;

	call Close(file.aftn, .status);
	if status <> 0 then
		call fatlIO(file$p, status);
end;


END;
shared/clrflg.plm
clrFlag: DO;

$include(:f3:clrflg.ipx)

clrFlag: PROCEDURE(base, flag) PUBLIC;
	DECLARE base ADDRESS, flag BYTE;
	DECLARE b BASED base(1) BYTE;
	DECLARE off BYTE, mask BYTE;

	off = tblOffsets(flag);
	mask = not tblBitFlags(flag);
	b(off) = b(off) and mask;
end;

END;
shared/cpyflg.plm
cpyflg: do;

$include(:f3:cpyflg.ipx)

cpyFlags: PROCEDURE(base) PUBLIC;
	DECLARE base ADDRESS;
	DECLARE b BASED base(3) BYTE;
	DECLARE i BYTE;

	do i = 0 to 2;
		info.flag(i) = b(i);
	end;
end;



end;

shared/cpytil.plm
cpyTill: DO;

cpyTill: PROCEDURE(src$p, dst$p, cnt, endch) PUBLIC;
	DECLARE src$p ADDRESS, dst$p ADDRESS, cnt ADDRESS, endch BYTE;
	DECLARE src BASED src$p BYTE, dst BASED dst$p BYTE;

	do while cnt <> 0;
		if src = endch then
			return;
		dst = src;
		src$p = src$p + 1;
		dst$p = dst$p + 1;
		cnt = cnt - 1;
	end;
end cpyTill;
END;
shared/creatf.plm
creatf: DO;
$include(:f3:creatf.ipx)

/* creatF(file$p, buf$p, size$w, mode$b)
   set files buffer and buffer size
   read into buffer if mode$b =    1
*/

creatf: PROCEDURE(fp, buf, bsize, mode) public;
	DECLARE (fp, buf, bsize) ADDRESS, mode BYTE;
	DECLARE file BASED fp FILE$T;

	file.buf$p = buf;
	file.bsize = bsize;
	if mode = 1 then
		call readf(fp, buf, bsize, .file.actual);
	file.curoff = 0;
end;

END;
shared/creati.plm
creati: DO;
$include(:f3:creati.ipx)

DECLARE infoLengths(*) BYTE DATA(10, 12, 18, 18, 18, 22, 11, 10, 8, 9);


allocInfo: PROCEDURE(infosize) ADDRESS PUBLIC;
	DECLARE infosize ADDRESS;
	DECLARE (q, p) ADDRESS;

	call alloc(infosize, infosize);
	p = topInfo + 1;
	if botSymbol < (q := topInfo + infosize) then
		call fatalError(ERR83);
	call fill(infosize, p, 0);
	topInfo = q;
	return p;
end allocInfo;


createInfo: PROCEDURE(val, type) PUBLIC;
	DECLARE val ADDRESS, type BYTE;
	DECLARE len BYTE;

	len = infoLengths(type);
	curInfo$p = allocInfo(len);
	if curSymbol$p <> 0 then
	do;
		call setLinkOffset(cursym.info$p);
		cursym.info$p = curInfo$p;
	end;
	call setType(type);
	call setLen(len);
	call setScope(val);
	call setSymbol(curSymbol$p);
end createInfo;


end;
shared/data.plm
PLMDATA: DO;
$include(:f3:data.ipx)

DECLARE
	topMem	ADDRESS PUBLIC,
	botMem	ADDRESS PUBLIC,
	botInfo	ADDRESS PUBLIC,
	topInfo	ADDRESS PUBLIC,
	topSymbol ADDRESS PUBLIC,
	botSymbol ADDRESS PUBLIC,
	curSymbol$p ADDRESS PUBLIC,
	curInfo$p ADDRESS PUBLIC,
	offNxtCmdChM1 ADDRESS PUBLIC,
	LEFTMARGIN ADDRESS PUBLIC,
	localLabelCnt ADDRESS PUBLIC,
	srcFileIdx ADDRESS PUBLIC,
	hashChains$p ADDRESS PUBLIC,
	blockDepth ADDRESS PUBLIC,
	(localLabels$p, w381E, helpers$p, w3822, linesRead) ADDRESS PUBLIC,
	programErrCnt ADDRESS PUBLIC,
	procCnt ADDRESS PUBLIC,
	w382A ADDRESS PUBLIC INITIAL(0),
	dsegSize ADDRESS PUBLIC INITIAL(0),
	csegSize ADDRESS PUBLIC INITIAL(0),
	objBlk ADDRESS PUBLIC,
	objByte ADDRESS PUBLIC,
	srcFileTable(60) address PUBLIC,
	srcFil FILE$T PUBLIC INITIAL(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0),
	lstFil FILE$T PUBLIC INITIAL(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0),
	objFile FILE$T PUBLIC INITIAL(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0),
	conFile FILE$T PUBLIC INITIAL(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0),
	tx1File FILE$T PUBLIC INITIAL(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0),
	tx2File FILE$T PUBLIC INITIAL(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0),
	atFile FILE$T PUBLIC INITIAL(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0),
	nmsFile FILE$T PUBLIC INITIAL(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0),
	xrfFile FILE$T PUBLIC INITIAL(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0),
	ixiFile FILE$T PUBLIC INITIAL(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0),
	procChains(35) ADDRESS PUBLIC,
	procInfo(255) ADDRESS PUBLIC,
	blk1Used ADDRESS PUBLIC INITIAL(400),
	blk2Used ADDRESS PUBLIC INITIAL(400),
	w3C34 ADDRESS PUBLIC INITIAL(9F00H),
	blkSize1 ADDRESS PUBLIC INITIAL(0C400H),
	blkSize2 ADDRESS PUBLIC INITIAL(0A400H),
	srcStemLen BYTE PUBLIC,
	standAlone BYTE PUBLIC INITIAL(0FFH),
	IXREFSet BYTE PUBLIC INITIAL(0FFH),
	PRINTSet BYTE PUBLIC INITIAL(0FFH),
	OBJECTSet BYTE PUBLIC INITIAL(0FFH),
	debugFlag BYTE PUBLIC INITIAL(0),
	unexpectedEOF BYTE PUBLIC INITIAL(0),
	haveModule BYTE PUBLIC INITIAL(0),
	fatalErrorCode BYTE PUBLIC INITIAL(0),
	pad3C43 BYTE PUBLIC INITIAL(1),
	w3C44 ADDRESS PUBLIC INITIAL(0A000H),
	CONTROLS(8) BYTE PUBLIC,
	pad$3C4E(2) BYTE PUBLIC,
	srcStemName(10) BYTE PUBLIC,
	debugSwitches(26) BYTE PUBLIC INITIAL(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
	cmdLine$p ADDRESS PUBLIC,
	startCmdLine$p ADDRESS PUBLIC,
	overlay1(FILE$NAME$LEN) BYTE PUBLIC INITIAL(':F0:PLM80 .OV1 '),
	overlay2(FILE$NAME$LEN) BYTE PUBLIC INITIAL(':F0:PLM80 .OV2 '),
	overlay3(FILE$NAME$LEN) BYTE PUBLIC INITIAL(':F0:PLM80 .OV3 '),
	overlay4(FILE$NAME$LEN) BYTE PUBLIC INITIAL(':F0:PLM80 .OV4 '),
	overlay5(FILE$NAME$LEN) BYTE PUBLIC INITIAL(':F0:PLM80 .OV5 '),
	ixiFileName(FILE$NAME$LEN) BYTE PUBLIC,
	lstFileName(FILE$NAME$LEN) BYTE PUBLIC,
	objFileName(FILE$NAME$LEN) BYTE PUBLIC,
	pageNo ADDRESS PUBLIC INITIAL(0),
	b3CF2 BYTE PUBLIC, 
	lbuf$p ADDRESS PUBLIC INITIAL(.b3CF2),	
	lChCnt ADDRESS PUBLIC INITIAL(0),
	lBufSz ADDRESS PUBLIC INITIAL(0),
	lfOpen BYTE PUBLIC INITIAL(0),
	linlft BYTE PUBLIC INITIAL(0),
	(b3CFB, b3CFC, b3CFD) BYTE PUBLIC INITIAL(0,0,0),
	col BYTE PUBLIC INITIAL(0),
	b3CFF BYTE PUBLIC INITIAL(0),
	tWidth BYTE PUBLIC INITIAL(0),
	TITLELEN BYTE PUBLIC INITIAL(1),
	PAGELEN BYTE PUBLIC INITIAL(60),
	PWIDTH BYTE PUBLIC INITIAL(120),
	margin BYTE PUBLIC INITIAL(0FFH),
	DATE(9) BYTE PUBLIC,
	plm80Compiler(*) BYTE PUBLIC INITIAL('PL/M-80 COMPILER    '),
	TITLE(60) BYTE PUBLIC INITIAL(' '),
	ISIS ADDRESS PUBLIC INITIAL(40H),
	REBOOTVECTOR ADDRESS PUBLIC INITIAL(0);

DECLARE tblOffsets(*) BYTE PUBLIC INITIAL(0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			        1, 1, 1, 1, 1, 1, 1, 1, 2, 2);
DECLARE tblBitFlags(*) BYTE PUBLIC INITIAL(80h, 40h, 20h, 10h, 10h, 8, 8, 4, 2, 1,
				 80h, 40h, 20h, 10h, 8, 4, 2, 1, 80h, 40h);

DECLARE	intVecNum BYTE PUBLIC INITIAL(8),
	intVecLoc ADDRESS PUBLIC INITIAL(0),
	hasErrors BYTE PUBLIC INITIAL(0),
	overlay6(*) BYTE PUBLIC INITIAL(':F0:PLM80 '),
	ov6(*) BYTE PUBLIC INITIAL('.OV6 '),
	version(*) BYTE PUBLIC INITIAL('X000'),
	pad3DA1 BYTE,
	invokeName(*) BYTE PUBLIC INITIAL(':F0:PLM80 '),
	ov0(*) BYTE PUBLIC INITIAL('.OV0 ');

end;
shared/delete.plm
delete: DO;
$include(:f3:delete.ipx)

delete: procedure (path$p, status$p) public;
    declare (path$p, status$p) address;
    call ISIS(IDELETE, .path$p);
end delete;

end;
shared/deletf.plm
deletf: DO;
$include(:f3:deletf.ipx)

deletF: PROCEDURE(file$p) PUBLIC;
	DECLARE file$P ADDRESS, file BASED file$p FILE$T;
	DECLARE status ADDRESS;

	call delete(.file.fNam, .status);
end;

end;
shared/endcom.plm
endcom: do;
$include(:f3:endcom.ipx)


declare endMsg(*) byte data('PL/M-80 COMPILATION COMPLETE.  '),
	errMsg(*) byte data('XXXXX PROGRAM ERROR'),
	crlf2(*) byte data(cr, lf, cr, lf);

endCompile: procedure public;
	declare junk byte;
	junk = num2Asc(programErrCnt, 5, 10, .errMsg);
	call printStr(.endMsg, length(endMsg));
	call printStr(.errMsg, length(errMsg));
	if programErrCnt <> 1 then
		call printstr(.('S'), 1);
	call printStr(.crlf2, 4);
end;	

end;
shared/error.plm
error: DO;
$include(:f3:error.ipx)

error: procedure (error$num) public;
    declare (error$num) address;
    call ISIS(IERROR, .error$num);
end error;
end;
shared/exit.plm
exit: DO;
$include(:f3:exit.ipx)

exit: procedure public;
    declare tmp address;
    tmp = .tmp;
    call ISIS(IEXIT, .tmp);
end exit;
end;
shared/fatal.plm
fatal: DO;
$include(:f3:fatal.ipx)

fatal: PROCEDURE(str, len) PUBLIC;
	DECLARE str ADDRESS, len BYTE;
	call printStr(.(CR, LF, LF,'PL/M-80 FATAL ERROR --', CR, LF, LF), 28);
	call printStr(str, len);
	call printStr(.(CR, LF, LF,'COMPILATION TERMINATED', CR, LF, LF), 28);
	if debugFlag then
		call REBOOTVECTOR;
	else
		call Exit;
end fatal;

end;
shared/fatlio.plm
fatlIO: DO;
$include(:f3:fatlio.ipx)

DECLARE
	errHeader(*) BYTE DATA(CR, LF, LF, 'PL/M-80 I/O ERROR --', CR, LF, '  FILE: '),
	aName(*) BYTE DATA(CR, LF, '  NAME: '),
	aError(*) BYTE DATA(CR, LF, '  ERROR: '),
	aTerminate(*) BYTE DATA(CR, LF, 'COMPILATION TERMINATED', CR, LF, LF),
	errStrTable(*) BYTE DATA(
	4, 'ILLEGAL FILENAME SPECIFICATION', 0,
	5, 'ILLEGAL OR UNRECOGNIZED DEVICE SPECIFICATION IN FILENAME', 0,
	0Ch, 'ATTEMPT TO OPEN AN ALREADY OPEN FILE', 0,
	0Dh, 'NO SUCH FILE', 0,
	0Eh, 'FILE IS WRITE PROTECTED', 0,
	13h, 'FILE IS NOT ON A DISKETTE', 0,
	16h, 'DEVICE TYPE NOT COMPATIBLE WITH INTENDED FILE USE', 0,
	17h, 'FILENAME REQUIRED ON DISKETTE FILE', 0,
	1Ch, 'NULL FILE EXTENSION', 0,
	0FEh, 'ATTEMPT TO READ PAST EOF', 0,
   	0);


fatlIO: PROCEDURE(file$p, errnum) PUBLIC;
	DECLARE (file$p, errnum) ADDRESS;
	DECLARE file BASED file$p FILE$T;
	DECLARE buf(5) BYTE, len BYTE;
	DECLARE off ADDRESS, slen ADDRESS;

	findErrStr: PROCEDURE;
		DECLARE (j, i) ADDRESS;

		i = 0;
		do while errStrTable(i) <> 0;	
			j = i;
			do while errStrTable(i) <> 0;
				i = i + 1;
			end;
			if errstrTable(j) = errnum then
			do;
				off = j + 1;
				slen = i - off;
				return;
			end;
			i = i + 1;
		end;
		slen = 0;
	end findErrStr;


	call printStr(.errHeader, length(errHeader));
	call printStr(.file.sNam, 6);
	call printStr(.aName, length(aName));	
	call printStr(.file.fnam, 15);
	call printStr(.aError, length(aError));
	len = num2Asc(errnum, 0, 10, .buf);
	call printStr(.buf, len);
	call findErrStr;
	if slen <> 0 then
	do;
		call printStr(.('--'), 2);
		call printStr(.errStrTable(off), slen);
	end;
	call printStr(.aTerminate, length(aTerminate));
	if debugFlag then
		call REBOOTVECTOR;
	else
		call Exit;
end fatlIO;

END;
shared/fflush.plm
fflush: DO;
$include(:f3:fflush.ipx)


fflush: PROCEDURE(fp) public;
	DECLARE fp ADDRESS;
	DECLARE file BASED fp FILE$T;

	if file.curoff <> 0 then
	do;
		call writeF(fp, file.buf$p, file.curoff);
		file.curoff = 0;
	end;
end;

END;
shared/fi.plm
fi: DO;
$include(:f3:fi.ipx)

findInfo: PROCEDURE PUBLIC;
	DECLARE i ADDRESS;

	if cursym.info$p= 0 then
	do;
		curInfo$p = 0;
		return;
	end;
	i = blockDepth;
	do while i <> 0;
		call findScopedInfo(procChains(i));
		if curInfo$p <> 0 then
			return;
		i = i - 1;
	end;
end;


END;
shared/findmi.plm
findmi: DO;
$include(:f3:findmi.ipx)

findMemberInfo: PROCEDURE public;
	DECLARE tmp ADDRESS;

	tmp = curInfo$p;
	curInfo$p = cursym.info$p;
	do while curInfo$p <> 0;
		if testInfoFlag(F$MEMBER) then
			if tmp = getParentOffset then
				return;
		curInfo$p = getLinkOffset;
	end;
end;
end;
shared/fiscop.plm
fiscop: DO;
$include(:f3:fiscop.ipx)

findScopedInfo: PROCEDURE(scp) PUBLIC;
	DECLARE scp ADDRESS;
	DECLARE (p, q, next) ADDRESS, infoType BYTE;

	curInfo$p = cursym.info$p;
	p = 0;
	do while curInfo$p <> 0;
		if scp = getScope then
		do;
			infoType = getType;
			if infoType = LIT$T or infoType = MACRO$T then
				;
			else if testInfoFlag(F$MEMBER) then
				goto nxt;
			if p <> 0 then	/* not at start of chain */
			do;
				next = getLinkOffset;	/* move to head of chain */
				q = curInfo$p;		/* save current */
				curInfo$p = p;		/* pick up previous */
				call setLinkOffset(next);	/* set its link */
				curInfo$p = q;		/* restore current */
				call setLinkOffset(cursym.info$p);	/* set its link to current head */
				cursym.info$p = curInfo$p;	/* set head to found info */
			end;
			return;
		end;
	nxt:	p = curInfo$p;
		curInfo$p = getLinkOffset;
	end;
end;



END;
shared/gibin.plm
gibin: do;
$include(:f3:gibin.ipx)

getBuiltinId: PROCEDURE byte PUBLIC;

	return info.flag(0);
end;

end;
shared/gibseo.plm
gibseo: DO;
$include(:f3:gibseo.ipx)

getBaseOffset: procedure address public;
	if info.baseoff = 0 then
		return 0;
	else
		return info.baseoff + botInfo;
end;



END;

shared/gibsev.plm
gibsev: DO;
$include(:f3:gibsev.ipx)

getBaseVal: procedure address public;
	return info.baseoff;
end;


END;
shared/gicond.plm
gicond: do;
$include(:f3:gicond.ipx)

getCondFlag: PROCEDURE BYTE PUBLIC;
	return info.flag(0);
end;



end;
shared/gidim.plm
gidim: DO;
$include(:f3:gidim.ipx)


getDimension: procedure address public;
	return info.dim;
end;



END;

shared/gidim2.plm
gidim2: DO;
$include(:f3:gidim2.ipx)

getDimension2: procedure address public;
	return info.dim;
end;



END;

shared/gidtyp.plm
gidtyp: DO;
$include(:f3:gidtyp.ipx)

getDataType: procedure byte public;
	if info.type = PROC$T then
		return info.dtype;
	else
		return info.flag(2);
end;



END;

shared/gieid.plm
gieid: DO;
$include(:f3:gieid.ipx)

getExternId: PROCEDURE BYTE PUBLIC;
	return info.extId;	
end;



END;

shared/giintn.plm
giintn: DO;
$include(:f3:giintn.ipx)

getIntrNo: procedure byte public;
	return info.intno;
end;



END;

shared/gilen.plm
gilen: do;
$include(:f3:gilen.ipx)

getLen: procedure byte public;
	return info.len;
end;

end;
shared/gilit.plm
gilit: DO;
$include(:f3:gilit.ipx)

getLitaddr: PROCEDURE address PUBLIC;
	return litinfo.litAddr;
end;

end;
shared/gilnko.plm
gilnko: DO;
$include(:f3:gilnko.ipx)

getLinkOffset: PROCEDURE ADDRESS PUBLIC;
	if info.ilink = 0 then
		return 0;
	else
		return botInfo + info.ilink;
end;


END;

shared/gilnkv.plm
gilnkv: DO;
$include(:f3:gilnkv.ipx)

getlinkVal: PROCEDURE ADDRESS PUBLIC;
	return info.ilink;
end;


END;

shared/giparo.plm
giparo: DO;
$Include(:f3:giparo.ipx)

getParentOffset: procedure address public;
	if info.type = STRUCT$T then
		return info.parent;
	if info.parent = 0 then
		return 0;
	else
		return info.parent + botInfo;
end;



END;

shared/giparv.plm
giparv: DO;
$include(:f3:giparv.ipx)

getParentVal: procedure address public;
	return info.parent;
end;



END;

shared/gipcnt.plm
gipcnt: DO;
$include(:f3:gipcnt.ipx)

getParamCnt: PROCEDURE BYTE PUBLIC;

	if info.type = PROC$T then
		return info.pcnt;
	else
		return info.flag(1);
end;




END;
shared/gipid.plm
gipid: DO;
$include(:f3:gipid.ipx)

getProcId: procedure byte public;
	return info.procId;
end;

end;
shared/giscop.plm
giscope: DO;
$include(:f3:giscop.ipx)

getscope: PROCEDURE address PUBLIC;
	return info.scope;
end;


END;

shared/gisym.plm
gisym: DO;
$include(:f3:gisym.ipx)

getSymbol: PROCEDURE ADDRESS PUBLIC;
	if info.sym = 0 then
		return 0;
	else
		return topSymbol - info.sym;
end;


END;

shared/gitype.plm
gitype: DO;
$include(:f3:gitype.ipx)

getType: PROCEDURE BYTE PUBLIC;
	return info.type;
end;


END;

shared/initf.plm
initF: DO;
$include(:f3:initf.ipx)

initF: PROCEDURE(file$p, sNam, fNam) PUBLIC;
	DECLARE (file$p, sNam, fNam) ADDRESS;
	DECLARE file BASED file$p FILE$T;
	file.aftn = 0;
	call fill(22, .file.sNam, ' ');
	call cpyTill(sNam, .file.sNam, 6, ' ');
	call cpyTill(fNam, .file.fNam, 15, ' ');
end initF;


END;
shared/itoa.plm
num2Asc: DO;
$include(:f3:itoa.ipx)

DECLARE hexdigits(*) BYTE DATA('0123456789ABCDEF');
DECLARE numsuffix(*) BYTE DATA('BXXXXXQXDXXXXXH');

num2Asc: PROCEDURE(num, width, radix, buf$p) BYTE PUBLIC;
	DECLARE num ADDRESS, width BYTE, radix BYTE, buf$p ADDRESS;
	DECLARE buf(18) BYTE;
	DECLARE padch BYTE, fmt BYTE, j BYTE, lwidth BYTE,
	tmp BYTE, firstch BYTE, i BYTE;

	padch = ' ';
	if width > 7FH then
	do;
		padch = '0';
		width = -width;
	end;
	if width = 0 then
		lwidth = 16;
	else if width > 16 then
		lwidth = 16;
	else
		lwidth = width;
	fmt = 0;
	if radix > 7FH then
	do;
		fmt = 0FFH;
		radix = -radix;
	end;
	if radix > 16 then
		radix = 16;
	tmp = 16;
	firstch = tmp - lwidth + 1;
	call fill(lwidth, .buf(firstch), padch);
	i = lwidth;
	j = 16;
	do while i <> 0;
		buf(j) = hexdigits(num mod radix);
		if (num := num / radix) = 0 then
			i = 0;
		else
		do;
			i = i - 1;
			j = j - 1;
		end;
	end;
	if width = 0 then
	do;
		if fmt then
			if buf(j) > '9' then
			do;
				j = j - 1;
				buf(j) = '0';
			end;
		lwidth = 17 - (firstCh := j);
	end;
	if fmt then
	do;
		lwidth = lwidth + 1;
		buf(17) = numsuffix(radix - 2);
	end;
	call movmem(lwidth, .buf(firstCh), buf$p);
	return lwidth;
end num2Asc;
end;
shared/lstsup.cmn
/* common source for lstsp[456].plm */

flushLstBuf: procedure public;
	if lChCnt <> 0 then
	do;
		if not lfOpen then
		do;
			call openf(.lstFil, 2);
			lfOpen = true;
		end;
		call writef(.lstFil, lbuf$p, lChCnt);
		lChCnt = 0;
	end;
end;

newLineLst: procedure public;
	if col = 0 then
		if linlft = 0 then
			call newPgl;
	call wr2cLst(0d0ah);
	linlft = linlft - 1;
	col = 0;
end;


tabLst: procedure(arg1b) public;
	declare arg1b byte;
	if arg1b > 7fh then
	do;
		arg1b = -arg1b;
		if col >= arg1b then
			call newLineLst;
		arg1b = arg1b - col - 1;
	end;
	do while arg1b <> 0;
		call putLst(' ');
		arg1b = arg1b - 1;
	end;
end;


newPageNextChLst: procedure public;
	linlft = 0;
end;

setMarkerInfo: procedure(arg1b, arg2b, arg3b) public;
	declare (arg1b, arg2b, arg3b) byte;
	b3CFB = arg1b;
	b3CFC = arg2b;
	b3CFD = arg3b;
end;

$if OVL<>5
setStartAndTabW: procedure(arg1b, arg2b) public;
	declare (arg1b, arg2b) byte;
	margin = arg1b - 1;
	tWidth = arg2b;
end;
$endif

setSkipLst: procedure(arg1b) public;
	declare arg1b byte;
	b3CFF = arg1b;
end;


xputstr2cLst: procedure(str, endch) public;
	declare str address, endch byte,
		ch based str byte;
	do while ch <> endch;
		call putLst(ch);
		str = str + 1;
	end;
end;

xwrnstrLst: procedure(str, cnt) public;
	declare str address, cnt byte,
		ch based str byte;
	do while cnt <> 0;
		call putLst(ch);
		str=  str + 1;
		cnt = cnt - 1;
	end;
end;


xnumLst: procedure(num, width, radix) public;
	declare num address, (width, radix) byte;
	declare i byte, buf(7) byte;

	i = num2Asc(num, width, radix, .buf);
	call xwrnstrLst(.buf, i);
end;
shared/load.plm
load: DO;
$include(:f3:load.ipx)

load: procedure (path$p, load$offset, switch, entry$p, status$p) public;
    declare (path$p, load$offset, switch, entry$p, status$p) address;
    CALL ISIS(ILOAD, .path$p);
end load;

end;
shared/lookup.plm
lookup: DO;
$include(:f3:lookup.ipx)

lookup: PROCEDURE(pstr) PUBLIC;
	DECLARE pstr ADDRESS;
	DECLARE (p, r, q, hval) ADDRESS;
	DECLARE cmp BYTE;
	DECLARE hashchains BASED hashChains$p(64) ADDRESS;
	DECLARE len BASED pstr BYTE;

	hash:	PROCEDURE ADDRESS;
		DECLARE p ADDRESS, len BYTE, hash BYTE;
		DECLARE cha BASED pstr(1) BYTE;
		DECLARE ch BASED p BYTE;

		p = pstr;
		hash = 0;
		len = cha(0);
		do while len <> 0;
			hash = ROL(hash, 1) + ch;
			p = p + 1;
			len = len - 1;
		end;
		return hash and 3FH;
	end hash;

	hval = hash;
	curSymbol$p = hashChains(hval);
	p = 0;
	do while curSymbol$p <> 0;
		if cursym.name(0) = len then
		do;
			cmp = strncmp(.cursym.name(1), pstr + 1, len);
			if cmp = 0 then
			do;
				if p <> 0 then
				do;
					q = cursym.link;
					r = curSymbol$p;
					curSymbol$p = p;
					cursym.link = q;
					curSymbol$p = r;
					cursym.link = hashChains(hval);
					hashChains(hval) = curSymbol$p;
				end;
				return;
			end;
		end;
		p = curSymbol$p;
		curSymbol$p = cursym.link;
	end;
	call alloc(0, len + 1);
	curSymbol$p = allocSymbol(5 + len);
	call movmem(len + 1, pstr, .cursym.name);
	cursym.info$p = 0;
	cursym.link = hashChains(hval);
	hashChains(hval) = curSymbol$p;
end lookup;
END;
shared/lstinf.plm
lstInfo: DO;
$include(:f3:lstinf.ipx)

lstModuleInfo: procedure public;
	declare (p, q, r) address;
	p = 0;
	do q = 1 to procCnt;
		curInfo$p = botInfo + procInfo(q);
		r = getBaseVal;
		if r > p then
			p = r;
	end;
	call setSkipLst(3);
	call xputstr2cLst(.('MODULE INFORMATION:', 0), 0);
	call newLineLst;
	call setSkipLst(1);
	call tabLst(5);
	call xputstr2cLst(.('CODE AREA SIZE     = ', 0), 0);
	call xnumLst(csegSize, 0FCh, 0F0h);
	call tabLst(2);
	call xnumLst(csegSize, 5, 0F6h);
	call newLineLst;
	call tabLst(5);
	call xputstr2cLst(.('VARIABLE AREA SIZE = ', 0), 0);
	call xnumLst(dsegSize, 0FCh, 0F0h);
	call tabLst(2);
	call xnumLst(dsegSize, 5, 0F6h);
	call newLineLst;
	call tabLst(5);
	call xputstr2cLst(.('MAXIMUM STACK SIZE = ', 0), 0);
	call xnumLst(p, 0FCh, 0F0h);
	call tabLst(2);
	call xnumLst(p, 5, 0F6h);
	call newLineLst;
	call tabLst(5);
	call xnumLst(linesRead, 0, 0Ah);
	call xputstr2cLst(.(' LINES READ', 0), 0);
	call newLineLst;
	call tabLst(5);
	call xnumLst(programErrCnt, 0, 0Ah);
	call xputstr2cLst(.(' PROGRAM ERROR', 0), 0);
	if programErrCnt <> 1 then
		call xputstr2cLst(.('S', 0), 0);

	call newLineLst;
	call setSkipLst(1);
	call xputstr2cLst(.('END OF PL/M-80 COMPILATION', 0), 0);
	call newLineLst;
	call flushLstBuf;
	call closeF(.lstFil);
	lfOpen = false;
end;
end;
shared/lstlin.plm
lstlin: DO;
$include(:f3:lstlin.ipx)

declare tmp(*) byte initial('     1');
declare	lastNo address initial(1);

lstLineNo: procedure public;
	declare	q address, i byte,
		ch based q byte;

	if lineNo > lastNo + 20 then
	do;
		lastNo = num2Asc(lineNo, 6, 10, .tmp);
		lastNo = lineNo;
	end;
	else
	do while lastNo < lineNo;
		q = .tmp(5);
		i = true;
		do while i;
			if ch = '9' then
				ch = '0';
			else
			do;
				if ch = ' ' then
					ch = '1';
				else
					ch = ch + 1;
				i = false;
			end;
			q = q - 1;
		end;
		lastNo = lastNo + 1;
	end;
	call xwrnstrLst(.tmp(2), 4);
end;

end;
shared/open.plm
open: DO;
$include(:f3:open.ipx)

open: procedure (conn$p, path$p, access, echo, status$p) public;
    declare (conn$p, path$p, access, echo, status$p) address;
    CALL ISIS(IOPEN, .conn$p);
end open;

end;
shared/openf.plm
openF: DO;
$include(:f3:openf.ipx)

openF: PROCEDURE(file$p, access) PUBLIC;
	DECLARE file$p ADDRESS, access BYTE;
	DECLARE file BASED file$p FILE$T;
	DECLARE status ADDRESS;

	call Open(.file.aftn, .file.fNam, access, 0, .status);
	if status <> 0 then
		call fatlIO(file$p, status);
end openF;


END;
shared/prints.plm
printStr: DO;

$include(:f3:prints.ipx)


printStr: PROCEDURE(str, len) PUBLIC;
	DECLARE str ADDRESS, len BYTE;
	DECLARE status ADDRESS;

	call write(0, str, len, .status);
end printStr;


END;
shared/read.plm
read: DO;
$include(:f3:read.ipx)

read: procedure (conn, buff$p, count, actual$p, status$p) public;
    declare (conn, buff$p, count, actual$p, status$p) address;
    call ISIS(IREAD, .conn);
end read;

end;
shared/readf.plm
readF: DO;
$include(:f3:readf.ipx)

readf: PROCEDURE(file$p, buf$p, len, actual$p) PUBLIC;
	DECLARE (file$p, buf$p, len, actual$p) ADDRESS;
	DECLARE file BASED file$p FILE$T;
	DECLARE status ADDRESS;

    	call Read(file.aftn, buf$p, len, actual$p, .status);
	if status <> 0 then
		call fatlIO(file$p, status);
end;


END;
shared/rename.plm
rename: DO;
$include(:f3:rename.ipx)

rename: procedure (old$p, new$p, status$p) public;
    declare (old$p, new$p, status$p) address;
    CALL ISIS(IRENAME, .old$p);
end rename;

end;
shared/rescan.plm
rescan: DO;
$include(:f3:rescan.ipx)

rescan: procedure (conn, status$p) public;
    declare (conn, status$p) address;
    call ISIS(IRESCAN, .conn);
end rescan;

end;
shared/rewind.plm
rewind: DO;
$include(:f3:rewind.ipx)

rewind: PROCEDURE(file$p) public;
	DECLARE file$p ADDRESS;
	DECLARE file BASED file$p FILE$T;
	DECLARE loc STRUCTURE(blk ADDRESS, byt ADDRESS);

	loc.blk, loc.byt = 0;
	call seekF(file$p, .loc);
end;
end;
shared/seek.plm
seek: DO;
$include(:f3:seek.ipx)

seek: procedure (conn, mode, block$p, byte$p, status$p) public;
    declare (conn, mode, block$p, byte$p, status$p) address;
    CALL ISIS(ISEEK, .conn);
end seek;

end;
shared/seekf.plm
seekF: DO;
$include(:f3:seekf.ipx)

seekF: PROCEDURE(file$p, loc$p) public;
	DECLARE (file$p, loc$p) ADDRESS;
	DECLARE file BASED file$p FILE$T;
	DECLARE loc BASED loc$p STRUCTURE(blk ADDRESS, byt ADDRESS);
	DECLARE status ADDRESS;

	call Seek(file.aftn, 2, .loc.blk, .loc.byt, .status);
	if status <> 0 then
		call fatlIO(file$p, status);
end;



END;
shared/sekend.plm
sekend: DO;
$include(:f3:sekend.ipx)

sekEnd: procedure(file$p) public;
	declare file$p address;
	declare file based file$p FILE$T;
	declare (status, tmp) address;

	call seek(file.aftn, 4, .tmp, .tmp, .status);
	if status <> 0 then
		call fatlIO(file$p, status);
end;
end;
shared/setflg.plm
setFlag: DO;
$include(:f3:setflg.ipx)

setFlag: PROCEDURE(base, flag) PUBLIC;
	DECLARE base ADDRESS, flag BYTE;
	DECLARE b BASED base(1) BYTE;
	DECLARE off BYTE, bit BYTE;

	off = tblOffsets(flag);
	bit = tblBitFlags(flag);
	b(off) = b(off) or bit;
end;

END;
shared/sibin.plm
sibin: do;
$include(:f3:sibin.ipx)

setBuiltinId: PROCEDURE(id) PUBLIC;
	DECLARE id BYTE;

	info.flag(0) = id;
end;

end;
shared/sibseo.plm
sibseo: DO;
$include(:f3:sibseo.ipx)

setBaseOffset: procedure(base$p) public;
	DECLARE base$p ADDRESS;

	if base$p = 0 then
		info.baseoff = 0;
	else
		info.baseoff = base$p - botInfo;
end;



END;

shared/sibsev.plm
sibsev: DO;
$include(:f3:sibsev.ipx)

setBaseVal: procedure(val) public;
	declare val address;
	info.baseoff = val;
end;


END;
shared/sicond.plm
sicond: do;
$include(:f3:sicond.ipx)

setCondFlag: PROCEDURE(flag) PUBLIC;
	DECLARE flag BYTE;

	info.flag(0) = flag;
end;

end;
shared/sidim.plm
sidim: DO;
$include(:f3:sidim.ipx)

setDimension: procedure(dim) public;
	declare dim address;
	info.dim = dim;
end;



END;

shared/sidtyp.plm
sidtyp: DO;
$include(:f3:sidtyp.ipx)

setDataType: procedure(dtype) public;
	declare dtype byte;
	if info.type = PROC$T then
		info.dtype = dtype;
	else
		info.flag(2) = dtype;
end;



END;

shared/sieid.plm
sieid: DO;
$include(:f3:sieid.ipx)

setExternId: PROCEDURE(id) PUBLIC;
	declare id byte;
	info.extId = id;;	
end;



END;

shared/siflag.plm
siflag: DO;
$include(:f3:siflag.ipx)

setInfoFlag: PROCEDURE(flag) PUBLIC;
	DECLARE flag BYTE;
	call setFlag(.info.flag, flag);
end;



END;

shared/siintn.plm
siintn: DO;
$include(:f3:siintn.ipx)

setIntrNo: procedure(intNo) public;
	declare intNo byte;
	info.intno = intNo;
end;



END;

shared/silen.plm
silen: do;
$include(:f3:silen.ipx)

setLen: procedure(len) public;
	declare len byte;
	info.len = len;
end;

end;
shared/silit.plm
silit: DO;
$include(:f3:silit.ipx)

setLitaddr: PROCEDURE(litaddr) PUBLIC;
	DECLARE litaddr ADDRESS;
	litinfo.litAddr = litaddr;
end;

end;
shared/silnko.plm
silnko: DO;
$include(:f3:silnko.ipx)

setLinkOffset: PROCEDURE(link) PUBLIC;
	DECLARE link ADDRESS;
	if link = 0 then
		info.ilink = 0;
	else
		info.ilink = link - botInfo;
end;


END;

shared/silnkv.plm
silnkv: DO;
$include(:f3:silnkv.ipx)

setLinkVal: PROCEDURE(val) PUBLIC;
	declare val address;
	info.ilink = val;
end;


END;

shared/siparo.plm
siparo: DO;
$include(:f3:siparo.ipx)

setParentOffset: procedure(parent) public;
	declare parent address;
	if info.type = STRUCT$T then
	do;
		info.parent = parent;
		return;
	end;
	if parent = 0 then
		info.parent = 0;
	else
		info.parent = parent - botInfo;
end;



END;

shared/sipcnt.plm
sipcnt: DO;
$include(:f3:sipcnt.ipx)

setParamCnt: PROCEDURE(cnt) PUBLIC;
	declare cnt byte;

	if info.type = PROC$T then
		info.pcnt = cnt;
	else
		info.flag(1) = cnt;
end;

END;
shared/sipid.plm
sipid: DO;
$include(:f3:sipid.ipx)

setProcId: procedure(id) public;
	declare id byte;
	info.procId = id;
end;

end;
shared/siscop.plm
siscope: DO;
$include(:f3:siscop.ipx)

setScope: procedure(scope) public;
	declare scope address;
	info.scope = scope;
end;


END;

shared/sisym.plm
sisym: DO;
$include(:f3:sisym.ipx)

setSymbol: PROCEDURE(symbol) PUBLIC;
	DECLARE symbol ADDRESS;
	if  symbol = 0 then
		info.sym = 0;
	else
		info.sym = topSymbol - symbol;
end;


END;

shared/sitype.plm
sitype: DO;
$include(:f3:sitype.ipx)

setType: PROCEDURE(type) PUBLIC;
	declare type byte;
	info.type = type;
end;


END;

shared/strcmp.plm
strcmp: DO;

strncmp: PROCEDURE(s1$p, s2$p, cnt) BYTE PUBLIC;
	DECLARE s1$p ADDRESS, s2$p ADDRESS, cnt BYTE;
	DECLARE s1 BASED s1$p BYTE, s2 BASED s2$p BYTE;
	do while cnt <> 0;
		if s1 < s2 then
			return 1;
		if s1 > s2 then
			return 2;
		cnt = cnt - 1;
		s1$p = s1$p + 1;
		s2$p = s2$p + 1;
	end;
	return 0;
end strncmp;


END;
shared/tellf.plm
tellF: DO;
$include(:f3:tellf.ipx)

tellF: PROCEDURE(file$p, loc$p) public;
	DECLARE (file$p, loc$p) ADDRESS;
	DECLARE file BASED file$p FILE$T;
	DECLARE loc BASED loc$p STRUCTURE(blk ADDRESS, byt ADDRESS);
	DECLARE status ADDRESS;

	call Seek(file.aftn, 0, .loc.blk, .loc.byt, .status);
	if status <> 0 then
		call fatlIO(file$p, status);
end;


END;
shared/tiflag.plm
tiflag: DO;

$include(:f3:tiflag.ipx)

testInfoFlag: PROCEDURE(flag) BYTE PUBLIC;
	DECLARE flag BYTE;
	return testFlag(.info.flag, flag);
end;



END;

shared/tstflg.plm
testFlag: DO;
$include(:f3:tstflg.ipx)

testFlag: PROCEDURE(base, flag) BYTE PUBLIC;
	DECLARE base ADDRESS, flag BYTE;
	DECLARE b BASED base(1) BYTE;
	DECLARE off BYTE, bit BYTE;

	off = tblOffsets(flag);
	bit = tblBitFlags(flag);
	if (b(off) and bit) <> 0 then
		return TRUE;
	else
		return FALSE;
end testFlag;

END;
shared/wr2lst.plm
wr2cLst: DO;

$include(:f3:wr2lst.ipx)

wr2cLst: procedure(arg1w) public;
	declare arg1w address;
	declare pbp address;
	declare bp based pbp(2) byte;
	pbp = .arg1w;
	call wrcLst(bp(1));
	call wrcLst(bp(0));
end;
end;
shared/write.plm
write: DO;

$include(:F3:write.ipx)

write: procedure (conn, buff$p, count, status$p) public;
    declare (conn, buff$p, count, status$p) address;
    call ISIS(IWRITE, .conn);
end write;

end;
shared/writef.plm
writef: DO;

$include(:f3:writef.ipx)

writeF: PROCEDURE(fp, buf, count) PUBLIC;
 DECLARE (fp, buf, count) ADDRESS;
 DECLARE status ADDRESS;
 DECLARE file BASED fp FILE$T;

 call Write(file.aftn, buf, count, .status);
 if status <> 0 then
  call fatlIO(fp, status);
end;


END;
shared/wrslst.plm
wrnstrlst: DO;

$include(:f3:wrslst.ipx)

wrnstrLst: procedure(str$p, cnt) public;
	declare str$p address, cnt address;
	declare ch based str$p byte;

	do while cnt <> 0;
		call wrcLst(ch);
		str$p = str$p + 1;
		cnt = cnt - 1;
	end;
end;
end;









shared/zerflg.plm
zerflg: do;

clrFlags: PROCEDURE(base) PUBLIC;
	DECLARE base ADDRESS;
	DECLARE b BASED base(3) BYTE;
	DECLARE i BYTE;

	do i = 0 to 2;
		b(i) = 0;
	end;
end;



end;

src/lstsp4.plm
$SET(OVL=4)
lstsup: DO;
$include(:f2:lstsp4.ipx)
$include(:f3:lstsup.cmn)
end;
src/lstsp5.plm
$SET(OVL=5)
lstsup: DO;
$include(:f2:lstsp5.ipx)
$include(:f3:lstsup.cmn)
end;
src/lstsp6.plm
$SET(OVL=6)
lstsup: DO;
$include(:f2:lstsp6.ipx)
$include(:f3:lstsup.cmn)

end;
src/main.plm
PLM: DO;
$include(:f2:main.ipx)
DECLARE
	copyRight(*) BYTE DATA('(C) 1976, 1977, 1982 INTEL CORP');

DECLARE state$main BYTE;

	fatalError: PROCEDURE(code) PUBLIC;
		DECLARE code BYTE;
		if code = ERR83 then
			call fatal(.('DYNAMIC STORAGE OVERFLOW'), 24);
		call fatal(.('UNKNOWN FATAL ERROR'), 19);
		call Exit;
	end fatalError;

	state$main = 10;
	call sub$40AC;
	state$main = 15;
	call sub$4767;
	call chain(.invokeName);
end;

src/main0.plm
plm0:
DO;
$include(:f2:main0.ipx)

DECLARE copyright(*) BYTE DATA('(C) 1976, 1977, 1982 INTEL CORP');
DECLARE resetPt LABEL PUBLIC;

sub$3EDF: PROCEDURE local;
	if unexpectedEOF then
		call syntaxError(ERR87);	/* MISSING 'END' , END-OF-FILE ENCOUNTERED */
	call writeLineInfo;
	call wrByte(L$EOF);
	call sub$4119;
	call tellf(.srcFil, .srcFileTable(srcFileIdx + 8));
	call backup(.srcFileTable(srcFileIdx + 8), olstch - ocurch);
	call closef(.srcFil);
end sub$3EDF;


sub$3F23: PROCEDURE local;
	call initf(.srcFil, .('SOURCE'), .srcFileTable(srcFileIdx));
	call openf(.srcFil, 1);
	call seekf(.srcFil, .srcFileTable(srcFileIdx + 8));
	ocurch = olstch;
	if offNxtCmdChM1 <> 0 then
		do while cmdLine$p <> 0;
			call do$Control(offNxtCmdChM1 + cmdLine$p);
			offNxtCmdChM1 = 2;
			cmdLine$p = cmd.link;
		end;
	offNxtCmdChM1 = 0;
	curProcData = .curDoBlkCnt;
	inChr$p = .(LF) - 1;
	blockDepth = 1;
	procChains(1) = 0;
	call gnxtch;
end sub$3F23;

sub$3FAD: PROCEDURE local;
	call sub$3F23;
	call sub$6F00;
end sub$3FAD;



start:
		state = 20;	/* 9B46 */
		call sub$3FAD;
resetPt:	call sub$3EDF;
		call chain(.overlay1);

END;
src/main1.plm
main1: DO;
$include(:f2:main1.ipx)

DECLARE copyright(*) BYTE DATA('(C) 1976, 1977, 1982 INTEL CORP');
DECLARE cleanup LABEL public;

declare markedStSP address public,
	T2CntForStmt address public,
	curProcInfo$p address public initial(0),
	curStmtNum address public,
	(varInfoOffset, varArrayIndex, varNestedArrayIndex, varVal) address public,
	regetTx1Item byte public initial(FALSE),
	b88B3 byte public initial(FALSE),
	linfo$ LINFO$ST public,
	tx1Item TX1ITEM$ST public,
	tx1Aux2 byte public,
	tx1Aux1 byte public,
	tx1RdBuf(512) byte public,
	tx2Buf(512) byte public,
	xrfBuf(512) byte public,
	atBuf(512) byte public,
	b91C0 byte public;


	sub$3F19: PROCEDURE;
		call creatf(.tx1File, .tx1RdBuf, 512, 1);
		call openf(.tx2File, 3);
		call creatf(.tx2File, .tx2Buf, 512, 2);
		if XREF or IXREF or SYMBOLS then
		do;
			call openf(.xrfFile, 2);
			call creatf(.xrfFile, .xrfBuf, 512, 2);
		end;
		call openf(.atFile, 3);
		call creatf(.atFile, .atBuf, 16, 2);
		blockDepth = 1;
		procChains(1) = 0;
	end;

	sub$3F8B: PROCEDURE;
		if b88B3 then 
			call wrTx2File(.linfo, 7);
		call closef(.tx1File);
		call deletf(.tx1File);
		call openf(.tx1File, 3);
		if XREF or IXREF or SYMBOLS then
		do;
			call fwrite(.xrfFile, .(0), 1);
			call fflush(.xrfFile);
			call closef(.xrfFile);
		end;
		call wrAtFileByte(ATI$END);
		call wrAtFileByte(ATI$EOF);
		call fflush(.atFile);
		call rewind(.atFile);
	end;


	call sub$3F19;	/* create files and preload tx1 */
	call sub$6523;
loop:	
	call sub$3F8B;
	call sub$6EE0;
	if hasErrors then 
		call chain(.overlay6);
	else
		call chain(.overlay2);

cleanup:
	call wrTx2ExtError(b91C0);
	do while tx1Item.type <> L$EOF;
		if tx1Item.type = L$STMTCNT then
		do;
			T2CntForStmt = 0;
			call mapLtoT2;
			curStmtNum = tx1Item.dataw(0);
		end;
		call getTx1Item;
	end;
	goto loop;
END;
src/main2.plm
main2: DO;
$include(:f2:main2.ipx)

declare wAF54(*) address public initial(
	11Bh, 14Bh, 12Bh, 12Bh, 11Bh, 14Bh, 60h, 60h,
	62h, 62h, 5Bh, 62h, 0Bh, 1E4h, 1E7h, 1E8h,
	1EEh, 1F1h, 8Dh, 0CFh, 10Bh, 0Eh, 12h, 14h,
	0EBh, 0EBh, 0EBh, 0A9h, 9Ah, 96h, 0A1h, 69h,
	68h, 70h, 76h, 90h, 0EBh, 10Bh, 15Bh, 18Bh,
	1BBh, 19Bh, 17Bh, 16Bh, 58h, 19h, 20h, 27h,
	19h, 20h, 27h, 16h, 17h, 18h, 16h, 17h,
	18h, 0Ah, 38h, 3Eh, 67h, 2Ah, 6, 0Ch,
	1DEh, 80h, 43h, 45h, 47h, 1DBh, 49h, 0C9h,
	0CDh, 0CEh, 0B7h, 0BAh, 0BDh, 41h, 42h, 44h,
	46h, 48h, 4Ah, 4Bh, 4Ch, 41h, 42h, 44h,
	46h, 48h, 4Ah, 4Bh, 4Ch, 7Ch, 42h, 44h,
	46h, 48h, 48h, 46h, 44h, 42h, 7Ch, 42h,
	44h, 46h, 48h, 48h, 46h, 44h, 42h, 4Fh,
	42h, 44h, 46h, 48h, 4Ah, 4Dh, 4Eh, 57h,
	50h, 51h, 52h, 53h, 54h, 55h, 56h, 0C0h,
	0C3h, 0C6h, 0CFh, 1DCh, 0, 0	/* wB05C & wB05E assumed at end */
);

declare	tx2Buf(512) byte,
	tx1Buf(512) byte,
	blkCurInfo(20) address public,
	wB488(20) address public,
	wB4B0(20) address public,
	wB4D8(20) address public,
	extProcId(20) byte public,
	procChainNext(20) byte public,
	wB528(10) address public,
	wB53C(10) address public,
	tx2opc(255) byte public initial(T2$SEMICOLON, T2$LOCALLABEL, T2$SEMICOLON, T2$SEMICOLON),
	tx2Aux1b(255) byte public initial(12, 9),
	tx2Aux2b(255) byte public,
	tx2op1(255) address public,
	tx2op2(255) address public,
	tx2op3(255) address public initial(0, 0, 0, 0),
	tx2Auxw(255) address public initial(0, 1),
	bC045(9) byte public,
	bC04E(9) byte public,
	boC057(9) byte public,
	boC060(9) byte public,
	boC069(9) byte public,
	boC072(9) byte public,
	boC07B(9) byte public,
	wC084(9) address public,
	wC096(9) address public,
	bC0A8(9) byte public,
	bC0B1 byte public,
	bC0B2 byte public,
	bC0B3(2) byte public,
	bC0B5(2) byte public,
	bC0B7(2) byte public,
	bC0B9(2) byte public,
	bC0BB(2) byte public,
	bC0BD(2) byte public,
	bC0BF(2) byte public,
	bC0C1(2) byte public,
	bC0C3(125) byte public,
	bC140(125) byte public,
	bC1BD byte public initial (0),
	tx2qp byte public,
	bC1BF byte public initial(4),
	tx2qEnd byte public initial(4),
	pc address public initial(0),
	wC1C3 address public initial(0),
	wC1C5 address public initial(0),
	wC1C7 address public initial(0),
	blkSP byte public initial(0),
	blkOverCnt byte public initial(0),
	procCallDepth byte public initial(0),
	boC1CC byte public initial(0),
	boC1CD byte public,
	eofSeen byte public initial(0),
	wC1CF address public initial(0),
	curOp byte public,
	bC1D2 byte public,
	padC1D3 byte public,
	curExtProcId byte public initial(1),
	procChainId byte public initial(0),
	wC1D6 address public,
	boC1D8 byte public initial(0),
	bC1D9 byte public,
	cfrag1 byte public,
	bC1DB byte public,
	wC1DC(5) address public,
	bC1E6 byte public,
	buf$C1E7(34) byte public,
	bC209(*) byte public initial(4, 5, 3, 2, 0, 1),
	boC20F byte public initial(0);




DECLARE copyRight(*) BYTE DATA('(C) 1976, 1977, 1982 INTEL CORP');

	DECLARE finalise LABEL PUBLIC;

	sub$3F27: PROCEDURE;
		DECLARE emsg(*) BYTE DATA('COMPILER ERROR: INSUFFICIENT MEMORY FOR CODE GENERATION');
		botMem = .MEMORY + 256;
		if w3822 < botMem then
			call fatal(.emsg, length(emsg));
		call creatf(.tx1File, .tx1Buf, 512, 2);
		call creatf(.tx2File, .tx2Buf, 512, 1);
		call FILLX(10, .wC1DC, 0);
		blkCurInfo(0) = procInfo(1) + botInfo;
		programErrCnt = 0;
	end sub$3F27;


	sub$3F7D: PROCEDURE;
		curInfo$p = procInfo(1) + botInfo;
		call setDimension(pc);
		call setBaseVal(wC1C5);
		call fflush(.tx1File);
	end sub$3F7D;

	call sub$3F27;
	do while 1;
		call fillTx2Q;
		call sub$67A9;
		if tx2opc(4) = T2$EOF then
			goto finalise;
		call sub$689E;
		call sub$6BD6;
		call sub$A153;
	end;

	finalise:
		call sub$3F7D;
		call chain(.overlay3);
END;
src/main3.plm
main3: DO;
$include(:f2:main3.ipx)
declare copyright(*) byte data('(C) 1976, 1977, 1982 INTEL CORP');

    sub$3F3C: procedure;
	b7199 = PRINT or OBJECT;
	if OBJECTSet then
	do;
	    call deletf(.objFile);
	    OBJECTSet = FALSE;
	end;
	if not lfOpen and PRINTSet then
	do;
	    call deletf(.lstFil);
	    PRINTSet = FALSE;
	end;
	call closef(.tx2File);
	call deletf(.tx2File);
	call creatf(.tx1File, .tx1Buf, 1280, 2);
	if b7199 or IXREF then
	    call creatf(.nmsFile, .nmsBuf, 1280, 1);
	call creatf(.atFile, .atBuf, 1280, 1);
	if OBJECT then
	do;
	    call openF(.objFile, 3);
	    call creatf(.objFile, .objBuf, 1280, 2);
	    call sekend(.objFile);
	end;
	w7197 = csegSize;
    end;




    sub$3FE2: procedure;
	declare p address;
	do p = 1 to procCnt;
	    curInfo$p = procInfo(p) + botInfo;
	    if not testInfoFlag(F$EXTERNAL) then
	    do;
		call setLinkVal(w7197);
		w7197 = w7197 + getDimension2;
	    end;
	end;
    end;



    sub$402F: procedure;
	declare (p, q) address;
	curInfo$p = botInfo + 2;
	do while curInfo$p <> 0;
	    if getType = LABEL$T then
	    do;
		if not testInfoFlag(F$LABEL) then 
			call sub$49BC(0ACh, curInfo$p - botInfo, 0);
		else if not testInfoFlag(F$EXTERNAL) then
		do;
			p = getLinkVal;
			q = curInfo$p;
			curInfo$p = procInfo(high(getScope)) + botInfo;
			p = p + getLinkVal;
			curInfo$p = q;
			call setLinkVal(p);
		end;
	    end;
	    call advNxtInfo;
	end;
    end;




    sub$40B6: procedure;
	declare p address;
	declare memb based w381E(1) byte,
	    localLabels based localLabels$p(1) address;

	do p = 1 to localLabelCnt;
	    curInfo$p = procInfo(memb(p)) + botInfo;
	    localLabels(p) = localLabels(p) + getLinkVal;
	end;
    end;




    sub$4105: procedure;
	declare (i, j, k, m) byte, p address;
	declare helpers based helpers$p(1) address;

	if not standAlone then
	    return;

	call fwrite(.tx1File, .(0A4h), 1);
	call fwrite(.tx1File, .procInfo(1), 2);
	curInfo$p = procInfo(1) + botInfo;
	p = w7197 - getLinkVal;
	call fwrite(.tx1File, .p, 2);
	do i = 0 to 45;
	    k = b47B7(i);
	    j = k + b4789(i);
	    m = 0;
	    do while k < j;
		if m then
		do;
			helpers(k) = w7197;
			w7197 = w7197 + b4813(k);
		end;
		else if helpers(k) <> 0 then
		do;
			m = 0FFh;
			helpers(k) = w7197;
			w7197 = w7197 + b4813(k);
		end;
		k = k + 1;
	    end;
	end;
    end;



    sub$4201: procedure;
	declare i byte;

	curSymbol$p = (topSymbol := localLabels$p - 3) - 1;
	call fread(.nmsFile, .i, 1);
	do while i <> 0;
	    curSymbol$p = curSymbol$p - i - 1;
	    cursym.name(0) = i;
	    call fread(.nmsFile, .cursym.name(1), i);
	    call fread(.nmsFile, .i, 1);
	end;
	botSymbol = curSymbol$p + 4;
	botMem = botSymbol;
    end;


    sub$426E: procedure;

	curInfo$p = botInfo + procInfo(1);
	curSymbol$p = getSymbol;
	if curSymbol$p = 0 then
	    call recAddByte(.rec2, 0, 0);
	else 
	    call sub$48BA(.rec2, 0, cursym.name(0), .cursym.name(1));
	call recAddByte(.rec2, 0, 1);
	call recAddByte(.rec2, 0, shl(version(1), 4) or (version(3) and 0fh));
	call recAddByte(.rec2, 0, 1);
	call recAddWord(.rec2, 0, csegSize);
	call recAddByte(.rec2, 0, 3);
	call recAddByte(.rec2, 0, 2);
	call recAddWord(.rec2, 0, dsegSize);
	call recAddByte(.rec2, 0, 3);
	call recAddByte(.rec2, 0, 3);
	call recAddWord(.rec2, 0, sub$4938);
	call recAddByte(.rec2, 0, 3);
	call recAddByte(.rec2, 0, 4);
	call recAddWord(.rec2, 0, 0);
	call recAddByte(.rec2, 0, 3);
	call writeRec(.rec2, 0);
    end;


    sub$436C: procedure;
	declare (p, q) address, (i, j) byte,
	    (r, s) address, (k, m) byte, t(6) byte;
	declare helpers based helpers$p(1) address;

	s = 0;
	curInfo$p = botInfo + 2;
	do while curInfo$p <> 0;
	    curSymbol$p = getSymbol;
	    if LABEL$T <= getType and getType <= PROC$T and curSymbol$p <> 0 then
	    do; 
		if testInfoFlag(F$EXTERNAL) and not testInfoFlag(F$AT) then
		do; 
			if rec18.len + cursym.name(0) + 2 >= 299 then
				call writeRec(.rec18.type, 0);
			s = s + 1;
			call sub$48BA(.rec18.type, 0, cursym.name(0), .cursym.name(1));
			call recAddByte(.rec18.type, 0, 0);
		end;
		else if not (testInfoFlag(F$AUTOMATIC) or testInfoFlag(F$BASED) or testInfoFlag(F$MEMBER)) then
		do;
			if testInfoFlag(F$DATA) or getType = LABEL$T or getType = PROC$T then
			do;
				p = .rec16$2;
				q = rec16$2.len;
				i = 1;
			end;
			else if testInfoFlag(F$MEMORY) then
			do; 
				p = .rec16$4;
				q = rec16$4.len;
				i = 4;
			end;
			else if testInfoFlag(F$ABSOLUTE) then
			do; 
				p = .rec16$1;
				q = rec16$1.len;
				i = 0;
			end;
			else
			do;
				p = .rec16$3;
				q = rec16$3.len;
				i = 2;
			end;

			if testInfoFlag(F$PUBLIC) then
			do; 
				if q + cursym.name(0) + 4 >= 299 then
					call writeRec(p, 1);
				call recAddWord(p, 1, getLinkVal);
				call sub$48BA(p, 1, cursym.name(0), .cursym.name(1));
				call recAddByte(p, 1, 0);
			end;
			if DEBUG then
			do;
				if curInfo$p = procInfo(1) + botInfo then
					j = true;
				else if not testInfoFlag(F$PARAMETER) then
					j = testInfoFlag(F$EXTERNAL);
				else
				do;
					r = curInfo$p;
					curInfo$p = procInfo(high(getScope)) + botInfo;
					j = testInfoFlag(F$EXTERNAL);
					curInfo$p = r;
				end;
				if not j then
				do;
					if i <> rec12.val(0) or rec12.len + cursym.name(0) + 4 >= 1019 then
						call writeRec(.rec12, 1);
					rec12.val(0) = i;
					call recAddWord(.rec12, 1, getLinkVal);
					call sub$48BA(.rec12, 1, cursym.name(0), .cursym.name(1));
					call recAddByte(.rec12, 1, 0);
				end;
			end;
		end;
	    end;
	    call advNxtInfo;
	end; /* of while */

	t(0) = '@';
	t(1) = 'P';
	if not standAlone then
	do;
	    do k = 0 to 116;
		if helpers(k) <> 0 then
		do;
			helpers(k) = s;
			s = s + 1;
			if rec18.len + 8 >= 299 then
				call writeRec(.rec18, 0);
			m = num2Asc(k, 0fch, 10, .t(2));
			call sub$48BA(.rec18, 0, 6, .t);
			call recAddByte(.rec18, 0, 0);
		end;
	    end;
	end;
	call writeRec(.rec18, 0);
	call writeRec(.rec16$1, 1);
	call writeRec(.rec16$2, 1);
	call writeRec(.rec16$3, 1);
	call writeRec(.rec16$4, 1);
	call writeRec(.rec12, 1);
    end;



    sub$46B7: procedure;
	declare p address;

	if intVecNum = 0 then
	    return;
	do p = 1 to procCnt;
	    curInfo$p = procInfo(p) + botInfo;
		if testInfoFlag(F$INTERRUPT) then
		do; 
			rec6.addr = intVecLoc + intVecNum * getIntrNo;
			call recAddByte(.rec6, 3, 0C3h);
			call recAddWord(.rec6, 3, getLinkVal);
			call writeRec(.rec6, 3);
			call recAddWord(.rec24$1, 2, rec6.addr + 1);
			call writeRec(.rec24$1, 2);
	    end;
	end;
    end;



    sub$4746: procedure;
	if b7199 or IXREF then
	do;
	    call fwrite(.tx1File, .(9ch), 1);
	    call fflush(.tx1File);
	    call rewind(.tx1File);
	    call closef(.nmsFile);
	    call deletf(.nmsFile);
	    call fflush(.objFile);
	end;
	call closef(.atFile);
	call deletf(.atFile);
    end;

    call sub$3F3C;
    if b7199 or IXREF then
	call sub$3FE2;
    call sub$402F;
    if b7199 or IXREF then
    do;
	call sub$40B6;
	call sub$4105;
	csegSize = w7197;
	call sub$4201;
    end;
    if OBJECT then
    do;
	call sub$426E;
	call sub$436C;
	call sub$46B7;
    end;
    call sub$49F9;
    call sub$4746;
    if b7199 then
	call chain(.overlay4);
    else
    do;
	call closef(.tx1File);
	call deletf(.tx1File);
	if IXREF then
	    call chain(.overlay5);
	else
	do;
		call endCompile;
		call Exit;
	end;
    end;
end;
src/main4.plm
main4: DO;
$include(:f2:main4.ipx)

declare copyright(*) byte data('(C) 1976, 1977, 1982 INTEL CORP'),
	objEOF(*) byte data(0eh, 1, 0, 0f1h),
	errCont label public;



	sub$3FC8: procedure;
		declare cmd BASED cmdLine$p STRUCTURE(link ADDRESS, pstr(1) BYTE);
		if PRINT then
		do;
			call newPageNextChLst;
			call xputstr2cLst(.('ISIS-II PL/M-80 ',0), 0);
			call xwrnstrLst(.version, 4);
			call xputstr2cLst(.(' COMPILATION OF MODULE ',0), 0);
			curInfo$p = botInfo + procInfo(1);
			curSymbol$p = getSymbol;
			if curSymbol$p <> 0 then
				call xwrnstrLst(.cursym.name(1), cursym.name(0));
			call newLineLst;
			if OBJECT then
			do; 
				call xputstr2cLst(.('OBJECT MODULE PLACED IN ',0), 0);
				call xputstr2cLst(.objFile.fNam, ' ');
			end;
			else
				call xputstr2cLst(.('NO OBJECT MODULE REQUESTED',0), 0);

			call newLineLst;
			if w382A = 1 then
			do;
				call xputstr2cLst(.('COMPILER INVOKED BY:  ',0), 0);
				cmdLine$p = startCmdLine$p;
				do while cmdLine$p <> 0;
					call tabLst(-23);
					call xputstr2cLst(.cmd.pstr(1), cr);
					cmdLine$p = cmd.link;
				end;
				call newLineLst;
			end;
		end;
	end;

	sub$408B: procedure;
		if PRINT then
		do; 
			lBuf$p = .lstbuf;
			lBufSz = 639;
		end;

		call sub$3FC8;
		if .MEMORY + 256 > botMem then
			call fatal(.('COMPILER ERROR: INSUFFICIENT MEMORY FOR FINAL ASSEMBLY'), 54);
		stmtNo = 0;
		if PRINT then
		do;
			srcFileIdx = 0;
			call initF(.srcFil, .('SOURCE'), .srcFileTable(srcFileIdx));
			call openF(.srcFil, 1);
		end;

		call creatF(.tx1File, .tx1buf, 640, 1);
		call creatF(.objFile, .objbuf, 640, 2);
		curInfo$p = procInfo(1) + botInfo;
		baseAddr, rec6$4.addr = getLinkVal;
		call setSkipLst(3);
		call setMarkerInfo(11, '-', 15);
		if fatalErrorCode > 0 then
		do;
			wa8125(2), wa8125(1) = 0;
			wa8125(0) = fatalErrorCode;
			call emitError;
			call setSkipLst(2);
		end;
		listing = PRINT;
		listOff = false;
		codeOn = false;
		programErrCnt, linesRead = 0;
	end;



	sub$4162: procedure;
		declare helpers based helpers$p(1) address;

		if not standAlone then
			return;
		do helperModId = 0 to 45;
			helperId = b42D6(helperModId);
			endHelperId = helperId + b42A8(helperModId);
			do while helperId < endHelperId;
				if helpers(helperId) <> 0 then
				do;
					baseAddr = helpers(helperId);
					b969C = b4304(helperModId);
					b969D = b457C(b969C);
					call sub$5FE7(w4919(helperId), b4A03(helperId));
					goto break;
				end;
				helperId = helperId + 1;
			end;
		break:
		end;
	end sub$4162;

	sub$4208: procedure;
		if haveModule then
		do; 
			rec4.subtype = 1;
			curInfo$p = procInfo(1) + botInfo;
			rec4.addr = getLinkVal;
		end;
		else
		do;
			rec4.subtype = 0;
			rec4.addr = 0;
		end;
		call writeRec(.rec4.type, 0);
	end;


	sub$423C: procedure;
		linesRead = w812F;
		call sub$4208;
		call closeF(.tx1File);
		if OBJECT then
		do;
			call fwrite(.objFile, .objEOF, 4);
			call fflush(.objFile);
			call closeF(.objFile);
		end;

		if PRINT then
		do;
			call tellF(.srcFil, .srcFileTable(srcFileIdx + 8));
			call backup(.srcFileTable(srcFileIdx + 8), olstch - ocurch);
			call closeF(.srcFil);
			call flushLstBuf;
		end;

		call deletF(.tx1File);
	end sub$423C;


	call sub$408B;

	do while bo812B;
		call sub$54BA;
	end;
	call sub$4162;
	call flushRecs;
	call sub$5BD3;
errCont:
	call sub$423C;
	if IXREF then
		call chain(.overlay5);
	if PRINT then
	do;
		if XREF or SYMBOLS then
			call chain(.overlay5);
		else
			call lstModuleInfo;
	end;
	call endCompile;
	call exit;
end;
src/main5.plm
plm5: DO;
$include(:f2:main5.ipx)

declare	lstBuf(1280) byte public,
	maxSymLen byte public,
	dictSize address public,
	w66D2 address public,
	w66D4 address public,
	xrefItem$p address public,
	xrefItem based xrefItem$p(1) address,
	b66D8 byte public initial(0),
	dictionary$p address public,
	dictionary based dictionary$p(1) address,
	dictTop$p address public;

$list

declare copyright(*) byte data('(C) 1976, 1977, 1982 INTEL CORP'),
	dots(*) byte data('. . . . . . . . . . . . . . . . . . . . '),
	dashes(*) byte data('------------------------------------'),
	b3F0B byte public data(0FFh);	/* ixi module header */


	sub$4121: procedure(str);
		declare str address;
		call newLineLst;
		call xputstr2cLst(.('*** WARNING -- ', 0), 0);
		call xputstr2cLst(str, 0);
		call newLineLst;
	end;

	loadDictionary: procedure;
		declare dictItem based dictTop$p address;
		declare symLen based curSymbol$p byte;

		dictionary$p, dictTop$p = botMem;
		dictSize, maxSymLen = 0;
		curInfo$p = botInfo + 2;

		do while 1;
			if getType < MACRO$T and getSymbol <> 0 then
			do;
				dictTop$p = dictTop$p + 2;
				if dictTop$p >= botSymbol then
				do;
					call sub$4121(.('INSUFFICIENT MEMORY FOR FULL DICTIONARY LISTING', 0));
					return;
				end;
				dictSize = dictSize + 1;
				dictItem = curInfo$p;
				call setScope(0);		/* used for xref chain */
				curSymbol$p = getSymbol;
				if symLen > maxSymLen then
					maxSymLen = symLen;
			end;
			call advNxtInfo;
			if curInfo$p = 0 then
				return;
		end;
	end;

	cmpSym: procedure(dictItem1, dictItem2) byte;
		declare (dictItem1, dictItem2) address;
		declare (sym1, sym2, sym1str, sym2str) address, (i, j) byte;
		declare len1 based sym1 byte, len2 based sym2 byte;
		declare ch1 based sym1str byte, ch2 based sym2str byte;

		curInfo$p = dictItem1;
		sym1 = getSymbol;
		sym1str = sym1 + 1;
		curInfo$p = dictItem2;
		sym2 = getSymbol;
		sym2str = sym2 + 1;
		if len1 < len2 then
		do;
			i = len1;
			j = 0;
		end;
		else if len1 > len2 then
		do;
			i = len2;
			j = 2;
		end;
		else
		do;
			i = len1;
			j = 1;
		end;

		do while i <> 0;
			if ch1 < ch2 then
				return 0;
			if ch1 > ch2 then
				return 2;
			sym1str = sym1str + 1;
			sym2str = sym2str + 1;
			i = i - 1;
		end;
		return j;
	end;


	sortDictionary: procedure;
		declare (p, q, r, s, t, u, v, w, x, y, z) address;

		if dictSize = 1 then
			return;
		r = dictSize / 2;
		s = r + 2;
		t = 1;
		p = 2;
		q = r;
		y = dictSize;
		u = q;
		w = dictionary(u);

		do while 1;
			v = u * 2;
			if v > y then
			do;
				dictionary(u) = w;
				if t = 2 then
				do;
					x = dictionary(1);
					dictionary(1) = dictionary(q);
					dictionary(q) = x;
					if p >= dictSize then
						goto done;
					else
					do;
						p = p + 1;
						q, y = z - p;
						u = 1;
					end;
				end;
				else if p >= r then
				do; 
					t = 2;
					z = dictSize + 2;
					p = 2;
					q, y = dictSize;
					u = 1;
				end;
				else
				do;
					p = p + 1;
					q = s - p;
					y = dictSize;
					u = q;
				end;
				w = dictionary(u);
			end;
			else
			do;
				if v <> y then
					if cmpSym(dictionary(v + 1), dictionary(v)) > 1 then
						v = v + 1;
				if cmpSym(dictionary(v), w) <= 1 then
				do;
					dictionary(u) = w;
					if t = 2 then
					do;
						x = dictionary(1);
						dictionary(1) = dictionary(q);
						dictionary(q) = x;
						if p >= dictSize then
							goto done;
						p = p + 1;
						q, y = z - p;
						u = 1;
					end;
					else if p >= r then
					do;
						t = 2;
						z = dictSize + 2;
						p = 2;
						q, y = dictSize;
						u = 1;
					end;
					else
					do;
						p = p + 1;
						q = s - p;
						y = dictSize;
						u = q;
					end;
					w = dictionary(u);
				end;
				else
				do;
					dictionary(u) = dictionary(v);
					u = v;
				end;
			end;
		end;
	done:
	end;


	prepXref: procedure;

		loadXref: procedure;
			declare xrfbuf(128) byte,
				b6783 byte,
				pa(2) address,
				xrefItem based xrefItem$p(1) address;

			call openF(.xrfFile, 1);
			call creatF(.xrfFile, .xrfbuf, 128, 1);
			do while 1;
				call fread(.xrfFile, .b6783, 1);
				if b6783 = 0 then
					goto break;
				call fread(.xrfFile, .pa, 4);
				if b6783 = 42h or XREF then
				do;
					curInfo$p = pa(0) + botInfo;
					xrefItem$p = w66D4 + 1;
					w66D4 = w66D4 + 4;
					if w66D4 > botSymbol then
					do;
						call sub$4121(.('INSUFFICIENT MEMORY FOR FULL XREF PROCESSING', 0));
						goto break;
					end;
					xrefItem(0) = getScope;
					call setScope(xrefItem$p);
					if b6783 = 42h then
						xrefItem(1) = -pa(1);	/* make defn line -ve */
					else
						xrefItem(1) = pa(1);
				end;
			end;
		break:
			call closeF(.xrfFile);
		end;


		xrefDef2Head: procedure;
			declare (p, q, r) address;

			do p = 1 to dictSize;
				curInfo$p = dictionary(p);
				xrefItem$p = getScope;
				if xrefItem$p <> 0 then
				do; 
					q = 0;
					call setScope(0);
					do while xrefItem$p <> 0; 
						r = xrefItem(0);
						if (xrefItem(1) and 8000h) <> 0 then
							q = xrefItem$p;	/* definition */
						else
						do;
							xrefItem(0) = getScope;
							call setScope(xrefItem$p);
						end;
						xrefItem$p = r;
					end;

					if q <> 0 then		/* insert definition at head */
					do;
						xrefItem$p = q;
						xrefItem(0) = getScope;
						call setScope(xrefItem$p);
					end;
				end;
			end;
		end;


		w66D2 = dictTop$p + 2;
		if w66D2 >= botSymbol then
		do;
			call sub$4121(.('INSUFFICIENT MEMORY FOR ANY XREF PROCESSING', 0));
			return;
		end;
		w66D4 = w66D2 - 1;
		call loadXref;
		call xrefDef2Head;
	end;


	printRefs: procedure;
		declare (defnCol, addrCol, sizeCol, nameCol, attribCol, refContCol) byte,
			p address, pad byte;

		sub$480A: procedure;
			declare p address;

			if not XREF then
			do; 
				call newLineLst;
				return;
			end;

			xrefItem$p = getScope;
			if xrefItem$p = 0 then
			do;
				call newLineLst;
				return;
			end;
			call xwrnstrlst(.(': '), 2);
			p = 0;

			do while xrefItem$p <> 0;
				if p <> xrefItem(1) then
				do;
					if PWIDTH < col + 5 then
					do;
						call newLineLst;
						call tabLst(-refContCol);
					end;
					call tabLst(1);
					call xnumLst(xrefItem(1), 0, 10);
					p = xrefItem(1);
				end;
				xrefItem$p = xrefItem(0);
			end;
			if col <> 0 then
				call newLineLst;
		end;



		sub$48A7: procedure;
			declare pstr based curSymbol$p structure(len byte, str(1) byte);

			curSymbol$p = getSymbol;
			call tabLst(-nameCol);
			call xwrnstrlst(.pstr.str, pstr.len);
			call xwrnstrlst(.dots(pstr.len), attribCol - col - 2);
			call tabLst(1);
		end;

		sub$48E2: procedure(arg1w, arg2w);
			declare (arg1w, arg2w) address;
			call tabLst(-addrCol);
			call xnumLst(arg1w, 0FCh, 0F0h);
			if arg2w <> 0 then
			do;
				call tabLst(-sizeCol);
				call xnumLst(arg2w, 5, 10);
			end;
		end;


		sub$4921: procedure;
			xrefItem$p = getScope;
			if getType = BUILTIN$T then
				return;
			if xrefItem$p <> 0 and (xrefItem(1) and 8000h) <> 0 then
			do;
				call tabLst(-defnCol);
				call xnumLst(-xrefItem(1), 5, 10); /* defn stored as -ve */
				call setScope(xrefItem(0));
			end;
			else if not testInfoFlag(F$LABEL) then
			do;
				call tabLst(-defnCol);
				call xwrnstrlst(.dashes, 5);
			end;
		end;

		sub$499C: procedure;
			call xputstr2cLst(.(' EXTERNAL(', 0), 0);
			call xnumLst(getExternId, 0, 10);
			call xwrnstrlst(.(')'), 1);
		end;


		sub$49BB: procedure;
			declare (p, q, r) address;
			declare pstr based curSymbol$p structure(len byte, str(1) byte);

			p = curInfo$p;
			call xputstr2cLst(.(' BASED(', 0), 0);
			curInfo$p = getBaseOffset;
			if testInfoFlag(F$MEMBER) then
			do;
				r = getSymbol;
				curInfo$p = getParentOffset;
				q = getSymbol;
			end;
			else
			do;
				q = getSymbol;
				r = 0;
			end;

			curSymbol$p = q;
			call xwrnstrlst(.pstr.str, pstr.len);
			if r <> 0 then
			do;
				call xwrnstrlst(.('.'), 1);
				curSymbol$p = r;
				call xwrnstrlst(.pstr.str, pstr.len);
			end;
			call xwrnstrlst(.(')'), 1);
			curInfo$p = p;
		end;


		sub$4A42: procedure;
			declare p address;
			declare pstr based curSymbol$p structure(len byte, str(1) byte);

			p = curInfo$p;
			curInfo$p = getParentOffset;
			call xputstr2cLst(.(' MEMBER(', 0), 0);
			curSymbol$p = getSymbol;
			call xwrnstrlst(.pstr.str, pstr.len);
			call xwrnstrlst(.(')'), 1);
			curInfo$p = p;
		end;

		sub$4A78: procedure(str);
			declare str address;
			call sub$4921;
			call sub$48A7;
			call xputstr2cLst(str, 0);
			call sub$480A;
		end;


		sub$4A92: procedure;
			declare p address;

			call sub$4921;
			call sub$48E2(getLinkVal, getDimension2);
			call sub$48A7;
			call xputstr2cLst(.('PROCEDURE', 0), 0);
			if getDataType <> 0 then
			do;
				if getDataType = 2 then
					p = .(' BYTE', 0);
				else
					p = .(' ADDRESS', 0);
				call xputstr2cLst(p, 0);
			end;
			if testInfoFlag(F$PUBLIC) then
				call xputstr2cLst(.(' PUBLIC', 0), 0);

			if testInfoFlag(F$EXTERNAL) then
				call sub$499C;

			if testInfoFlag(F$REENTRANT) then
				call xputstr2cLst(.(' REENTRANT', 0),0);

			if testInfoFlag(F$INTERRUPT) then
			do;
				call xputstr2cLst(.(' INTERRUPT(', 0), 0);
				call xnumLst(getIntrNo, 0, 10);
				call xwrnstrlst(.(')'), 1);
			end;
			if not testInfoFlag(F$EXTERNAL) then
			do; 
				call xputstr2cLst(.(' STACK=', 0), 0);
				call xnumLst(getBaseVal, 0fch, 0f0h);
			end;
			call sub$480A;
		end;

		sub$4B4A: procedure(str);
			declare str address;
			declare p address, i byte;

			call sub$4921;
			i = getType;
			if i = BYTE$T then
				p = 1;
			else if i = ADDRESS$T then
				p = 2;
			else if i = LABEL$T then
				p = 0;
			else
				p = getParentOffset;

			if testInfoFlag(F$ARRAY) then
				p = p * getDimension;
			call sub$48E2(getLinkVal, p);
			call sub$48A7;
			call xputstr2cLst(str, 0);
			if testInfoFlag(2) then
				call sub$49BB;
			if testInfoFlag(F$ARRAY) then
			do;
				call xputstr2cLst(.(' ARRAY(', 0), 0);
				call xnumLst(getDimension, 0, 10);
				call xwrnstrlst(.(')'), 1);
			end;
			if testInfoFlag(F$PUBLIC) then
				call xputstr2cLst(.(' PUBLIC', 0),0);

			if testInfoFlag(F$EXTERNAL) then
				call sub$499C;

			if testInfoFlag(F$AT) then
				call xputstr2cLst(.(' AT', 0), 0);
			if testInfoFlag(F$DATA) then
				call xputstr2cLst(.(' DATA', 0), 0);
			if testInfoFlag(F$INITIAL) then
				call xputstr2cLst(.(' INITIAL', 0), 0);

			if testInfoFlag(F$MEMBER) then
				call sub$4A42;

			if testInfoFlag(F$PARAMETER) then
				call xputstr2cLst(.(' PARAMETER', 0), 0);

			if testInfoFlag(F$AUTOMATIC) then
				call xputstr2cLst(.(' AUTOMATIC', 0), 0);

			if testInfoFlag(F$ABSOLUTE) then
				call xputstr2cLst(.(' ABSOLUTE', 0),0);

			call sub$480A;
		end;

		sub$4C84: procedure;
			declare pstr based curSymbol$p structure(len byte, str(1) byte);
			
			curSymbol$p = getSymbol;
			if b66D8 <> pstr.str(0) then
			do;
				call newLineLst;
				b66D8 = pstr.str(0);
			end;
			if getType < MACRO$T then
				do case getType;
					call sub$4A78(.('LITERALLY', 0));
					call sub$4B4A(.('LABEL', 0));
					call sub$4B4A(.('BYTE', 0));
					call sub$4B4A(.('ADDRESS', 0));
					call sub$4B4A(.('STRUCTURE', 0));
					call sub$4A92;
					call sub$4A78(.('BUILTIN', 0));
				end;
		end sub$4C84;

/* printRefs */
		defnCol = 3;
		addrCol = defnCol + 6;
		sizeCol = addrCol + 6;
		nameCol = sizeCol + 7;
		attribCol = nameCol + maxSymLen + 2;
		refContCol = attribCol + 1;
		call setMarkerInfo(attribCol, '-', 3);
		call newPageNextChLst;
		if XREF then
		do;
			call xputstr2cLst(.('CROSS-REFERENCE LISTING', 0), 0);
			call newLineLst;
			call xwrnstrlst(.dashes, 23);
			call newLineLst;
		end;
		else
		do;
			call xputstr2cLst(.('SYMBOL LISTING', 0), 0);
			call newLineLst;
			call xwrnstrlst(.dashes, 14);
			call newLineLst;
		end;
		call setSkipLst(2);
		call tabLst(-defnCol);
		call xputstr2cLst(.(' DEFN', 0), 0);
		call tabLst(-addrCol);
		call xputstr2cLst(.(' ADDR', 0), 0);
		call tabLst(-sizeCol);
		call xputstr2cLst(.(' SIZE', 0), 0);
		call tabLst(-nameCol);
		call xputstr2cLst(.('NAME, ATTRIBUTES, AND REFERENCES', 0), 0);
		call newLineLst;
		call tabLst(-defnCol);
		call xwrnstrlst(.dashes, 5);
		call tabLst(-addrCol);
		call xwrnstrlst(.dashes, 5);
		call tabLst(-sizeCol);
		call xwrnstrlst(.dashes, 5);
		call tabLst(-nameCol);
		call xwrnstrlst(.dashes, 32);
		call newLineLst;
		call newLineLst;

		do p = 1 to dictSize;
			curInfo$p = dictionary(p);
			if getType = BUILTIN$T then
			do;
				if getScope <> 0 then
					call sub$4C84;
			end;
			else
				call sub$4C84;
		end;
	end printRefs;






	createIXREFFile: procedure;
		declare (p, q, r) address,
			(i, j) byte, ixibuf(128) byte, k byte;
		declare pstr based curSymbol$p structure(len byte, str(1) byte);

		sub$4EAA: procedure(buf, cnt);
			declare buf address, cnt address;
			call fwrite(.ixiFile, buf, cnt);
		end;


		call openF(.ixiFile, 2);
		call creatF(.ixiFile, .ixibuf, 128, 2);
		curInfo$p = botInfo + procInfo(1);
		curSymbol$p = getSymbol;
		if curSymbol$p <> 0 then			/* write the module info */
		do;
			call sub$4EAA(.b3F0B, 1);
			k = 22 + pstr.len;
			call sub$4EAA(.k, 1);
			call sub$4EAA(.pstr.len, 1);		/* module name len */
			call sub$4EAA(.pstr.str, pstr.len);	/* module name */
		end;
		if low(srcFileTable(0)) = ':' then
			j = 2;
		else
			j = 0;
		call sub$4EAA(.srcFileTable(j), 10);		/* filename minus any :fx: */
		call sub$4EAA(.('---------'), 9);

		do p = 1 to dictSize;
			curInfo$p = dictionary(p);
			i = getType;
			if LABEL$T <= i and i <= PROC$T and 
			   (testInfoFlag(F$PUBLIC) or (testInfoFlag(F$EXTERNAL) and not testInfoFlag(F$AT))) then
			do;
				if testInfoFlag(F$PUBLIC) then
					call sub$4EAA(.(0), 1);
				else
					call sub$4EAA(.(1), 1);

				curSymbol$p = getSymbol;
				k = 6 + pstr.len;
				call sub$4EAA(.k, 1);
				call sub$4EAA(.pstr.len, 1);
				call sub$4EAA(.pstr.str, pstr.len);
				call sub$4EAA(.i, 1);
				if getType = PROC$T then
				do;
					r = getDataType;
					call sub$4EAA(.r, 2);
				end;
				else
				do;
					if testInfoFlag(F$ARRAY) then
						q = getDimension;
					else
						q = 0;
					call sub$4EAA(.q, 2);
				end;
			end;
		end;
		call fflush(.ixiFile);
		call closeF(.ixiFile);
	end;



	sub$4EC5: procedure;
		call loadDictionary;
		call sortDictionary;
		call prepXref;
		if (XREF or SYMBOLS) and PRINT then
			call printRefs;
		if IXREF then
			call createIXREFFile;
	end;

	botMem = .MEMORY + 100h;
	topSymbol = topSymbol + 4;
	if PRINT then
	do;
		lBuf$p = .lstBuf;
		lBufSz = 1279;
	end;
	call sub$4EC5;
	if PRINT then
		call lstModuleInfo;
	call deletf(.xrfFile);
	call endCompile;
	call exit;
end;

src/main6.plm
plm6: DO;
$include(:f2:main6.ipx)

declare copyright(*) byte data('(C) 1976, 1977, 1982 INTEL CORP');
declare errCont label public;
declare b7AD9 byte external,
	b7ADA byte external,
	listing byte external,
	listOff byte external,
	codeOn byte external,
	ERRNum address external,
	w7AE0 address external,
	STMTNum address external,
	b7AE4 byte external,
	w7AE5 address external,
	lineNo address external,
	w7AE9 address external,
	w7AEB address external,
	offLastCh address external,
	offCurCh address external,
	b7AF1 byte external,
	b7AF2 byte external,
	lstLineLen byte external,
	lstbuf(130) byte external,
	srcbuf(2048) byte external;



	sub$3F96: procedure;
		declare cmd BASED cmdLine$p STRUCTURE(link ADDRESS, pstr(1) BYTE);
		if PRINT then
		do;
			call newPageNextChLst;
			call xputstr2cLst(.('ISIS-II PL/M-80 ', 0), 0);
			call xwrnstrLst(.version, 4);
			call xputstr2cLst(.(' COMPILATION OF MODULE ', 0), 0);
			curInfo$p = botInfo + procInfo(1);
			curSymbol$p = getSymbol;
			if curSymbol$p <> 0 then
				call xwrnstrLst(.cursym.name(1), cursym.name(0));
			call newLineLst;
			if OBJECT then
				call xputstr2cLst(.('NO OBJECT MODULE GENERATED', 0), 0);
			else
				call xputstr2cLst(.('NO OBJECT MODULE REQUESTED', 0), 0);
			call newLineLst;
			call xputstr2cLst(.('COMPILER INVOKED BY:  ', 0), 0);
			cmdLine$p = startCmdLine$p;
			do while cmdLine$p <> 0;
				call tabLst(-23);
				call xputstr2cLst(.cmd.pstr(1), cr);
				cmdLine$p = cmd.link;
			end;
			call newLineLst;
			call setSkipLst(3);
		end;
	end;



	sub$404A: procedure;
		declare tx2Buf(2048) byte,
			nmsBuf(2048) byte,
			lstBuf(2048) byte;

		if PRINT then
		do;
			lbuf$p = .lstBuf;
			lBufSz = 2047;
		end;
		b7AD9 = PRINT or OBJECT;
		if OBJECT then
			call deletF(.objFile);
		if not lfOpen and PRINTSet then
		do;
			call deletF(.lstFil);
			PRINTSet = false;
		end;
		call closeF(.tx1File);
		call deletF(.tx1File);
		call creatf(.tx2File, .tx2Buf, 800h, 1);
		if b7AD9 or IXREF then
			call creatf(.nmsFile, .nmsBuf, 800h, 1);
		w7AEB = 0;
		if PRINT then
		do;
			srcFileIdx = 0;
			call initF(.srcFil, .('SOURCE'), .srcFileTable(srcFileIdx)); /* note word array used */
			call openF(.srcFil, 1);
		end;
		curInfo$p = procInfo(1) + botInfo;
		call setSkipLst(3);
		call setMarkerInfo(11, '-', 15);
		if fatalErrorCode > 0 then
		do;
			STMTNum, w7AE0 = 0;
			ERRNum = fatalErrorCode;
			call emitError;
			call setSkipLst(2);
		end;
		listing = PRINT;
		listOff = false;
		codeOn = false;
		programErrCnt, linesRead, csegSize = 0;
	end;

	sub$4149: procedure;
		topSymbol = localLabels$p - 3;
		curSymbol$p = topSymbol - 1;
		call fread(.nmsFile, .b7ADA, 1);
		do while b7ADA <> 0;
			curSymbol$p = curSymbol$p - b7ADA - 1;
			cursym.name(0) = b7ADA;
			call fread(.nmsFile, .cursym.name(1), b7ADA);
			call fread(.nmsFile, .b7ADA, 1);
		end;
		botSymbol = curSymbol$p + 4;
		botMem = botSymbol;
	end;


	sub$41B6: procedure;
		call closeF(.atFile);
		call deletF(.atFile);
		call closeF(.tx2File);
		call deletF(.tx2File);
		if b7AD9 or IXREF then
		do;
			call closeF(.nmsFile);
			call deletF(.nmsFile);
		end;
		linesRead = w7AE5;
		if PRINT then
		do;
			call tellF(.srcFil, .srcFileTable(srcFileIdx + 8));
			call backup(.srcFileTable(srcFileIdx + 8), offLastCh - offCurCh);
			call closeF(.srcFil);
			call flushLstBuf;
		end;
	end;

/* 3F3B */
	call sub$404A;
	if b7AD9 or IXREF then
		call sub$4149;
	call sub$3F96;
	do while b7AE4;
		call sub$42E7;
	end;

	call sub$6550;

errCont:
	call sub$41B6;
	if PRINT or IXREF then
	do;
		if XREF or  SYMBOLS or IXREF then
			call chain(.overlay5);
		else
			call lstModuleInfo;
	end;
	call endCompile;
	call exit;
end;
/* split file */
src/page.plm
page: DO;
$include(:f2:page.ipx)

newPgl: procedure public;
	declare (i, j, k, m) byte,
		pnum(3) byte;

	if not PAGING then
		return;
	call wrcLst(0ch);
	linlft = PAGELEN;
	pageNo = pageNo + 1;
	i = num2Asc(pageNo, 3, 10, .pnum);
	j = PWIDTH - 41;
	if j < TITLELEN then
		m = j;
	else
		m = TITLELEN;
	call wrnstrLst(.Plm80Compiler, 20);
	call wrnstrLst(.TITLE, m);
	k = j - m + 2;
	do while k <> 0;
		call wrcLst(' ');
		k = k - 1;
	end;
	call wrnstrLst(.DATE, 9);
	call wrnstrLst(.('  PAGE '), 7);
	call wrnstrLst(.pnum, 3);
	call wrnstrLst(.(cr, lf, lf, lf), 4);
	b3CFF = 0;
end;


nlLead: procedure public;
	call wr2cLst(0d0ah);
	col = 0;
	linlft = linlft - 1;
	if linlft = 0 then
		call newPgl;
	do while col < b3CFB;
		call wrcLst(' ');
		col = col + 1;
	end;
	if b3CFC <> 0 then
	do;
		call wrcLst(b3CFC);
		col = col + 1;
	end;
	do while col < b3CFD;
		call wrcLst(' ');
		col = col + 1;
	end;
end;
end;
src/page1.plm
page: DO;
$include(:f2:page1.ipx)

newPgl: procedure public;
	declare (i, j, k, m) byte,
		pnum(3) byte;

	if not PAGING then
		return;
	call wrcLst(0ch);
	linlft = PAGELEN;
	pageNo = pageNo + 1;
	i = num2Asc(pageNo, 3, 10, .pnum);
	j = PWIDTH - 41;
	if j < TITLELEN then
		m = j;
	else
		m = TITLELEN;
	call wrnstrLst(.Plm80Compiler, 20);
	call wrnstrLst(.TITLE, m);
	k = j - m + 2;
	do while k <> 0;
		call wrcLst(' ');
		k = k - 1;
	end;
	call wrnstrLst(.DATE, 9);
	call wrnstrLst(.('  PAGE '), 7);
	call wrnstrLst(.pnum, 3);
	call wrnstrLst(.(cr, lf, lf, lf), 4);
	b3CFF = 0;
end;

end;
src/page2.plm
page: DO;
$include(:f2:page2.ipx)

nlLead: procedure public;
	call wr2cLst(0d0ah);
	col = 0;
	linlft = linlft - 1;
	if linlft = 0 then
		call newPgl;
	do while col < b3CFB;
		call wrcLst(' ');
		col = col + 1;
	end;
	if b3CFC <> 0 then
	do;
		call wrcLst(b3CFC);
		col = col + 1;
	end;
	do while col < b3CFD;
		call wrcLst(' ');
		col = col + 1;
	end;
end;
end;
src/pdata4.plm
pdata: DO;
/* as this defines the record sizes so override the VALx$SIZE literals */

declare	VAL6$SIZE	literally	'1018',
	VAL8$SIZE	literally	'1021',
	VAL18$SIZE	literally	'300',
	VAL20$SIZE	literally	'1019',
	VAL22$SIZE	literally	'1019',
	VAL24$SIZE	literally	'101';
$include(:f2:pdata4.ipx)

declare (helperModId, endHelperId) byte public,
	listing byte public,
	listOff byte public,
	codeOn byte public,
	locLabStr(32) byte public,		/* used to hold symbol name */
	wa8125(3) address public,
	bo812B  byte public initial(true),
	baseAddr address public,
	cfCode byte public,
	w812F address public,
	lineNo address public,
	depth address public,
	stmtNo address public,
	olstch address public initial(0),
	ocurch address public initial(0),
	bo813B byte public initial(true),
	bo813C byte public initial(true),
	lstLineLen byte public,
	lstLine(130) byte public,
	rec6$4 REC6$ST public initial(6, 0, 1),
	rec22 REC22$ST public initial(22h, 0, 3),
	rec24$1 REC24$ST public initial(24h, 0, 2, 3),
	/* to allow common user defined types add in the extra val buf */
	/* 1019 - VAL24$SIZE => 918 */
	rec24$1$extra(918) byte,
	rec24$2 REC24$ST public initial(24h, 0, 3, 3),
	rec24$3 REC24$ST public initial(24h, 0, 4, 3),
	rec20 REC20$ST public initial(20h, 0, 3),
	rec8 REC8$ST public initial(8, 0, 1),
	rec4 REC4$ST  public initial(4, 4),
	rec4seg byte at(.rec4.seg) initial(1),
	b9692 byte public,
	helperId byte public,
	helperStr(1) byte public,
	ihelperStr(*) byte initial('@P    :'),
	b969C byte public,
	b969D byte public,
	w969E address public,
	wValAry(4) address public,
	sValAry(4) address public,
	b96B0 byte public,
	b96B1(37) byte public,
	b96D6 byte public,
	w96D7 address public,
	curExtId byte public,
	commentStr(1) byte public,
	commentStri(40) byte initial('; '),
	lineLen byte public,
	line(80) byte public,
	opByteCnt byte public,
	opBytes(3) byte public,
	dstRec byte public,
	srcbuf(640) byte public,
	tx1buf(640) byte public,
	objbuf(640) byte public,
	lstbuf(640) byte public;
END;
src/pdata6.plm
pdata: do;
$include(:f2:pdata6.ipx)

declare b7AD9 byte public,
	b7ADA byte public,
	listing byte public,
	listOff byte public,
	codeOn byte public,
	ERRNum address public,
	w7AE0 address public,
	STMTNum address public,
	b7AE4 byte public initial(true),
	w7AE5 address public,
	lineNo address public,
	w7AE9 address public,
	w7AEB address public,
	offLastCh address public initial(0),
	offCurCh address public initial(0),
	b7AF1 byte public initial(true),
	b7AF2 byte public initial(true),
	lstLineLen byte public,
	lstbuf(130) byte public,
	srcbuf(2048) byte public;


end;
src/plm0a.plm
plm0a:
DO;
$include(:f2:plm0a.ipx)

DECLARE	cClass(*) BYTE PUBLIC DATA(
	CC$NONPRINT, CC$NONPRINT, CC$NONPRINT, CC$NONPRINT,
	CC$NONPRINT, CC$NONPRINT, CC$NONPRINT, CC$NONPRINT,
	CC$NONPRINT, CC$WSPACE, CC$NEWLINE, CC$NONPRINT,
	CC$NONPRINT, CC$WSPACE, CC$NONPRINT, CC$NONPRINT,
	CC$NONPRINT, CC$NONPRINT, CC$NONPRINT, CC$NONPRINT,
	CC$NONPRINT, CC$NONPRINT, CC$NONPRINT, CC$NONPRINT,
	CC$NONPRINT, CC$NONPRINT, CC$NONPRINT, CC$NONPRINT,
	CC$NONPRINT, CC$NONPRINT, CC$NONPRINT, CC$NONPRINT,
	CC$WSPACE, CC$INVALID, CC$INVALID, CC$INVALID,
	CC$DOLLAR, CC$INVALID, CC$INVALID, CC$QUOTE,
	CC$LPAREN,  CC$RPAREN,  CC$STAR,  CC$PLUS,
	CC$COMMA,  CC$MINUS, CC$PERIOD,  CC$SLASH,
	CC$BINDIGIT, CC$BINDIGIT, CC$OCTDIGIT, CC$OCTDIGIT,
	CC$OCTDIGIT, CC$OCTDIGIT, CC$OCTDIGIT, CC$OCTDIGIT,
	CC$DECDIGIT, CC$DECDIGIT, CC$COLON, CC$SEMICOLON,
	CC$LESS, CC$EQUALS, CC$GREATER, CC$INVALID,
	CC$INVALID, CC$HEXCHAR, CC$HEXCHAR, CC$HEXCHAR,
	CC$HEXCHAR, CC$HEXCHAR, CC$HEXCHAR, CC$ALPHA,
	CC$ALPHA, CC$ALPHA, CC$ALPHA, CC$ALPHA,
	CC$ALPHA, CC$ALPHA, CC$ALPHA, CC$ALPHA,
	CC$ALPHA, CC$ALPHA, CC$ALPHA, CC$ALPHA,
	CC$ALPHA, CC$ALPHA, CC$ALPHA, CC$ALPHA,
	CC$ALPHA, CC$ALPHA, CC$ALPHA, CC$INVALID,
	CC$INVALID, CC$INVALID, CC$INVALID, CC$INVALID,
	CC$INVALID, CC$HEXCHAR, CC$HEXCHAR, CC$HEXCHAR,
	CC$HEXCHAR, CC$HEXCHAR, CC$HEXCHAR, CC$ALPHA,
	CC$ALPHA, CC$ALPHA, CC$ALPHA, CC$ALPHA,
	CC$ALPHA, CC$ALPHA, CC$ALPHA, CC$ALPHA,
	CC$ALPHA, CC$ALPHA, CC$ALPHA, CC$ALPHA,
	CC$ALPHA, CC$ALPHA, CC$ALPHA, CC$ALPHA,
	CC$ALPHA, CC$ALPHA, CC$ALPHA, CC$INVALID,
	CC$INVALID, CC$INVALID, CC$INVALID, CC$NONPRINT
	);

DECLARE tok2oprMap(*) BYTE PUBLIC DATA(
	L$VARIABLE, L$NUMBER, L$STRING, L$PLUSSIGN,
	L$MINUSSIGN, L$STAR, L$SLASH, L$MOD,
	L$PLUS, L$MINUS, L$AND, L$OR,
	L$XOR, L$NOT, 0, L$LT,
	L$LE, L$EQ, L$NE, L$GE,
	L$GT, L$COLONEQUALS, L$INVALID, L$INVALID,
	L$PERIOD, L$LPAREN, L$RPAREN, L$COMMA,
	L$CALL, L$INVALID, L$DISABLE, L$INVALID,
	L$ENABLE, L$END, L$GO, L$GOTO,
	L$HALT, L$IF, L$PROCEDURE, L$RETURN,
	L$INVALID, L$INVALID, L$INVALID, L$INVALID,
	L$INVALID, L$INVALID, L$INVALID, L$INVALID,
	L$INVALID, L$INVALID, L$INVALID, L$INVALID,
	L$INVALID, L$BY, L$INVALID, L$INVALID,
	L$INVALID, L$INVALID, L$TO, L$INVALID);


/* public variables */
DECLARE	macroPtrs(12) ADDRESS /* six inChr$p, info$p pairs */ PUBLIC,
	macroDepth ADDRESS PUBLIC INITIAL(0),
	tokenVal ADDRESS PUBLIC,
	inChr$p ADDRESS PUBLIC,
	stateStack(100) ADDRESS PUBLIC,
	stateIdX ADDRESS PUBLIC,
	stmtLabels(10) ADDRESS PUBLIC,
	stmtLabelCnt ADDRESS PUBLIC,
	curProcInfo$p ADDRESS PUBLIC,
	pad8FA1 ADDRESS,
	ocurch ADDRESS PUBLIC INITIAL(0),
	olstch ADDRESS PUBLIC INITIAL(0),
	curStmtCnt ADDRESS PUBLIC INITIAL(0),
	curBlkCnt ADDRESS PUBLIC INITIAL(0),
	curMacroInfo$p ADDRESS PUBLIC INITIAL(0),
	markedSymbol$p ADDRESS PUBLIC INITIAL(0),
	lineBuf(128) BYTE PUBLIC,
	inbuf(1280) BYTE PUBLIC,
	tokenType BYTE PUBLIC,
	tokenStr(256) BYTE PUBLIC INITIAL(0),
	lastch BYTE PUBLIC,
	stmtStartCode BYTE PUBLIC,
	labelBrkToken BYTE PUBLIC,
	lblBrkTxiCode BYTE PUBLIC,
	doBlkCnt ADDRESS PUBLIC INITIAL(0),
	tx1Buf(1280) BYTE PUBLIC,
	labelBrkSymbol ADDRESS PUBLIC,
	lineInfoToWrite BYTE PUBLIC INITIAL(FALSE),
	isNonCtrlLine BYTE PUBLIC INITIAL(FALSE),
	yyAgain BYTE PUBLIC INITIAL(FALSE),
	linfo LINFO$ST PUBLIC INITIAL(0, 0),
	(curDoBlkCnt, curProcId) BYTE PUBLIC INITIAL(0, 0),
	curProcData ADDRESS PUBLIC,
	state BYTE PUBLIC,
	skippingCOND BYTE PUBLIC INITIAL(FALSE),
	ifDepth ADDRESS PUBLIC INITIAL(0);
	

createTxi1File:	PROCEDURE PUBLIC;
	DECLARE tmp ADDRESS;

	tmp = tx1File.curoff;
	call openf(.tx1File, 3);
	call creatf(.tx1File, .tx1Buf, 1280, 2);
	tx1File.curoff = tmp;
end createTxi1File;

writeTx1: PROCEDURE(buf, len) PUBLIC;
	DECLARE (buf, len) ADDRESS;

	if tx1File.aftn = 0 then
		if tx1File.curoff > 1024 then
			call createTxi1File;
		else
		do;
			call movmem(len, buf, .tx1Buf(tx1File.curoff));
			tx1File.curoff = tx1File.curoff + len;
			return;
		end;
	call fwrite(.tx1File, buf, len);
end writeTx1;

sub$4119: PROCEDURE PUBLIC;
	if tx1File.aftn = 0 then
		call createTxi1File;
	call fflush(.tx1File);
	call rewind(.tx1File);
end sub$4119;


writeLineInfo: PROCEDURE PUBLIC;
	if lineInfoToWrite then
	do;
		call writeTx1(.linfo, 7);
		lineInfoToWrite = FALSE;
	end;
end writeLineInfo;


wrBuf: PROCEDURE(buf, len) PUBLIC;
	DECLARE (buf, len) ADDRESS;

	call writeLineInfo;
	call writeTx1(buf, len);
end wrBuf;

wrByte: PROCEDURE(v) PUBLIC;
	DECLARE v BYTE;

	call wrBuf(.v, 1);
end wrByte;



wrWord: PROCEDURE(v) PUBLIC;
	DECLARE v ADDRESS;

	call wrBuf(.v, 2);
end wrWord;


wrOffset: PROCEDURE(addr) PUBLIC;
	DECLARE addr ADDRESS;

	call wrWord(addr - botInfo);
end wrOffset; 

syntaxError: PROCEDURE(err) PUBLIC;
	DECLARE err BYTE;
	hasErrors = TRUE;
	call wrByte(L$SYNTAXERROR);
	call wrWord(err);
end syntaxError;


tokenErrorAt: PROCEDURE(err) PUBLIC;
	DECLARE err BYTE;

	hasErrors = TRUE;
	call wrByte(L$TOKENERROR);
	call wrWord(err);
	call wrWord(markedSymbol$p);
end tokenErrorAt;


tokenError: PROCEDURE(err, sym$p) PUBLIC;
	DECLARE err BYTE, sym$p ADDRESS;

	hasErrors = TRUE;
	call wrByte(L$TOKENERROR);
	call wrWord(err);
	call wrWord(sym$p);
end tokenError;


fatalError: PROCEDURE(err) PUBLIC;
	DECLARE err BYTE;

	hasErrors = TRUE;
	if state <> 20 then
	do;
		if err = ERR83 then	/* LIMIT EXCEEDED: DYNAMIC STORAGE */
			call fatal(.('DYNAMIC STORAGE OVERFLOW'), 24);
		call fatal(.('UNKNOWN FATAL ERROR'), 19);
	end;
	call tokenErrorAt(err);
	fatalErrorCode = err;
	goto resetPt;
end fatalError;

pushBlock: PROCEDURE(idAndLevel) PUBLIC;
	DECLARE idAndLevel ADDRESS;

	if blockDepth = 34 then
		call fatalError(ERR84);	/* LIMIT EXCEEDED: BLOCK NESTING */
	else
	do;
		procChains(blockDepth := blockDepth + 1) = idAndlevel;
		curBlkCnt = curBlkCnt + 1;
	end;
end pushBlock;

popDO:	PROCEDURE PUBLIC;
	DECLARE procDW BASED curProcData ADDRESS;
	if blockDepth = 0 then
		call fatalError(ERR96);	/* COMPILER ERROR: SCOPE STACK UNDERFLOW */
	else
	do;
		curBlkCnt = curBlkCnt - 1;
		procDW = procChains(blockDepth := blockDepth - 1);
	end;
end popDO;



wrOprAndValue:	PROCEDURE PUBLIC;
	if tok2oprMap(tokenType) = L$INVALID then
	do;
		call tokenErrorAt(ERR171);	/* INVALID USE OF DELIMITER OR RESERVED WORD IN EXPRESSION */
		return;
	end;
	call wrByte(tok2oprMap(tokenType));
	if tokenType = T$VARIABLE then
		call wrWord(curSymbol$p);
	else if tokenType = T$NUMBER then
		call wrWord(tokenVal);
	else if tokenType = T$STRING then
	do;
		call wrWord(tokenstr(0));
		call wrBuf(.tokenStr(1), tokenstr(0));
	end;
end wrOprAndValue;


wrXrefUse: PROCEDURE PUBLIC;
	if XREF then
	do;
		call wrByte(L$XREFINFO);
		call wrOffset(curInfo$p);
	end;
end;


wrXrefDef: PROCEDURE PUBLIC;
	if XREF or IXREF or SYMBOLS then
	do;
		call wrByte(L$XREF);
		call wrOffset(curInfo$p);
	end;
end;

END;
src/plm0b.plm
plm0b:
DO;
$include(:f2:plm0b.ipx)

DECLARE opttable(*) BYTE DATA(
	5,'PRINT', 0, 0, 0FFh, 7, 0,
	7,'NOPRINT', 0, 0, 0FFh, 8, 0,
	4,'LIST', 3, 1, 0, 0, 0,
	6,'NOLIST', 4, 1, 0, 0, 0,
	4,'CODE', 5, 1, 0, 0, 0,
	6,'NOCODE', 6, 1, 0, 0, 0,
	4,'XREF', 0, 0, 1, 1, 1,
	6,'NOXREF', 0, 0, 1, 0, 1,
	7,'SYMBOLS', 0, 0, 2, 1, 2,
	9,'NOSYMBOLS', 0, 0, 2, 0, 2,
	5,'DEBUG', 0, 0, 3, 1, 3,
	7,'NODEBUG', 0, 0, 3, 0, 3,
	6,'PAGING', 0, 0, 4, 1, 4,
	8,'NOPAGING', 0, 0, 4, 0, 4,
	10,'PAGELENGTH', 0, 0, 0FFh, 0, 5,
	9,'PAGEWIDTH', 0, 0, 0FFh, 1, 6,
	4,'DATE', 0, 0, 0FFh, 2, 7,
	5,'TITLE', 0, 0, 0FFh, 3, 8,
	5,'EJECT', 7, 1, 0, 0, 0,
	10,'LEFTMARGIN', 0, 1, 0FFh, 4, 0,
	6,'OBJECT', 0, 0, 0FFh, 5, 9,
	8,'NOOBJECT', 0, 0, 0FFh, 9, 9,
	8,'OPTIMIZE', 0, 0, 6, 1, 0Ah,
	10,'NOOPTIMIZE', 0, 0, 6, 0, 0Ah,
	7,'INCLUDE', 0, 1, 0FFh, 6, 0,
	9,'WORKFILES', 0, 0, 0FFh, 0Ah, 0Bh,
	9,'INTVECTOR', 0, 0, 0FFh, 0Bh, 0Ch,
	11,'NOINTVECTOR', 0, 0, 0FFh, 0Ch, 0Ch,
	5,'IXREF', 0, 0, 0FFh, 0Dh, 0Dh,
	7,'NOIXREF', 0, 0, 0FFh, 0Eh, 0Dh,
	4,'SAVE', 0, 1, 0FFh, 0Fh, 0,
	7,'RESTORE', 0, 1, 0FFh, 10h, 0,
	3,'SET', 0, 1, 0FFh, 11h, 0,
	5,'RESET', 0, 1, 0FFh, 12h, 0,
	2,'IF', 0, 1, 0FFh, 13h, 0,
	6,'ELSEIF', 0, 1, 0FFh, 14h, 0,
	4,'ELSE', 0, 1, 0FFh, 14h, 0,
	5,'ENDIF', 0, 1, 0FFh, 15h, 0,
	4,'COND', 0, 1, 0FFh, 16h, 0,
	6,'NOCOND', 0, 1, 0FFh, 17h, 0,
	0);

DECLARE ebadTail(*) BYTE DATA('ILLEGAL COMMAND TAIL SYNTAX OR VALUE');
DECLARE ebadcontrol(*) BYTE DATA('UNRECOGNIZED CONTROL IN COMMAND TAIL');
DECLARE errNotDisk(*) BYTE DATA('INCLUDE FILE IS NOT A DISKETTE FILE'),
	errWorkFiles(*) BYTE DATA('MISPLACED CONTROL: WORKFILES ALREADY OPEN');



DECLARE	primaryCtrlSeen(14) BYTE INITIAL(0,0,0,0,0,0,0,0,0,0,0,0,0,0),
	saveStack(5) STRUCTURE(code BYTE, list BYTE, cond BYTE, leftmargin ADDRESS),
	saveDepth BYTE INITIAL(0),
	CODE BYTE INITIAL(FALSE),
	LIST BYTE INITIAL(TRUE),
	COND BYTE INITIAL(TRUE),
	curCh$p ADDRESS,
	chrClass BYTE,
	tknLen BYTE,
	optStrVal$p ADDRESS,
	optNumValue ADDRESS,
	optFileName(16) BYTE,
	ixiGiven BYTE,
	objGiven BYTE,
	lstGiven BYTE,
	inIFpart BYTE,
	skippingCONDDepth ADDRESS,
	tknFlags$p ADDRESS,	
	tknFlags BASED tknFlags$p STRUCTURE(tokenId BYTE, primary BYTE,
			controlId BYTE, controlVal BYTE, primaryId BYTE);
	
DECLARE curCh BASED curCh$p BYTE;

nxtCh: PROCEDURE PUBLIC;
	if chrClass = CC$NEWLINE then
		return;
	curCh$p = curCh$p + 1;
	if curCh = CR or (offNxtCmdChM1 <> 0 and curCh = '&') then
		chrClass = CC$NEWLINE;
	else if (chrClass := cClass(curCh)) = CC$NONPRINT then
		curCh = ' ';
	if curCh >= 'a' then
		curCh = curCh and 5fh;
end nxtCh;
	

badCmdTail: PROCEDURE(err) PUBLIC;
	DECLARE err BYTE;

	if offNxtCmdChM1 <> 0 then
		call fatal(.ebadTail, length(ebadTail));
	else
		call syntaxError(err);
end;


unknownCtrl: PROCEDURE PUBLIC;

	if offNxtCmdChM1 <> 0 then
		call fatal(.ebadcontrol, length(ebadcontrol));
	else
		call syntaxError(ERR9);	/* INVALID CONTROL */
end;


skipWhite: PROCEDURE PUBLIC;
	do while curCh = ' ';
		call nxtCh;
	end;
end;


skipToRPARorEOL: PROCEDURE PUBLIC;
	do while curCh <> CR and curCh <> ')';
		call nxtCh;
	end;
	if curCh = ')' then
		call nxtCh;
end;	

acceptRPAR: PROCEDURE PUBLIC;
	call skipWhite;
	if curCh <> ')' then
	do;
		call badCmdTail(ERR12);	/* INVALID CONTROL PARAMETER */
		call skipToRPARorEOL;
	end;
	else
		call nxtCh;
end;

accessOptStrVal: PROCEDURE local;
	DECLARE nesting BYTE;
	nesting = 0;
	call skipWhite;
	if curCh <> '(' then
		tknLen = 0;
	else
	do;
		call nxtCh;
		optStrVal$p = curCh$p;
		loop:
			if chrClass = CC$NEWLINE or curCh = '''' then
				goto done;
			if curCh = '(' then
				nesting = nesting + 1;
			else if curCh = ')' then
			do;
				if nesting = 0 then
					goto done;
				nesting = nesting - 1;
			end;
			call nxtCh;
			goto loop;
		done:
		tknLen = curCh$p - optStrVal$p;
		call acceptRPAR;
	end;			

end accessOptStrVal;

acceptFileName:	PROCEDURE local;
	call skipWhite;
	if curCh <> '(' then
		tknLen = 0;
	else
	do;
		call nxtCh;
		call skipWhite;
		optStrVal$p = curCh$p;
		do while curCh <> ' ' and curCh <> ')' and chrClass <> CC$NEWLINE;
			call nxtCh;
		end;
		tknLen = curCh$p - optStrVal$p;
		if tknLen > 14 then
		do;
			call badCmdTail(ERR17);	/* INVALID PATH-NAME */
			tknLen = 0;
		end;
		else
		do;
			call FILL(16, .optFileName, ' ');
			call movmem(tknLen, optStrVal$p, .optFileName);
			optStrVal$p = .optFileName;
			tknLen = tknLen + 1;
		end;
		call acceptRPAR;
	end;
end;


asc2Num: PROCEDURE(firstch$p, lastch$p, radix) ADDRESS local;
	DECLARE (firstch$p, lastch$p) ADDRESS, radix BYTE;
	DECLARE num ADDRESS, digit BYTE, trial ADDRESS;
	DECLARE firstch BASED firstch$p BYTE;
	
    if lastch$p < firstch$p or radix = 0 then
		return 0ffffh;
	
    num = 0;
    do while firstch$p <= lastch$p;
	if cClass(firstch) <= CC$DECDIGIT then
		digit = firstch - '0';
	else if cClass(firstch) < CC$ALPHA then
		digit = firstch - '7';
	else
		return 0ffffh;
	if digit >= radix then
		return 0ffffh;
	if (trial := num * radix + digit) < digit or (num * radix + digit - digit) / radix <> num then
		return 0ffffh;
	num = trial;
	firstch$p = firstch$p + 1;
    end;
    return num;
end;

chkRadix: PROCEDURE(p$lastch) BYTE local;
	DECLARE p$lastch ADDRESS;
	DECLARE lastch BASED p$lastch ADDRESS;
	DECLARE p ADDRESS;
	DECLARE ch BASED p BYTE;

	p = lastch;
	if cClass(ch) <= CC$DECDIGIT then
		return 10;
	lastch = lastch - 1;
	if ch = 'B' then
		return 2;
	if ch = 'Q' or ch = 'O' then
		return 8;
	if ch = 'H' then
		return 16;
	if ch = 'D' then
		return 10;
	else
		return 0;
end;

parseNum: PROCEDURE ADDRESS local;
	DECLARE (firstch, lastch) ADDRESS;
	DECLARE radix BYTE;

	call nxtCh;
	call skipWhite;
	firstch = curCh$p;
	do while chrClass <= CC$ALPHA;
		call nxtCh;
	end;	
	lastch = curCh$p - 1;
	call skipWhite;
	radix = chkRadix(.lastch);
	return asc2Num(firstch, lastch, radix);
end;

getOptNumVal: PROCEDURE local;
	call skipWhite;
	optNumValue = 0;
	if curCh <> '(' then
		call badCmdTail(Err11);
	else
	do;
		optNumValue = parseNum;
		call acceptRPAR;
	end;
end;


getToken: PROCEDURE local;
	optStrVal$p = curCh$p;
	do while curCh <> ' ' and curCh <> '(' and chrClass <> CC$NEWLINE;
		call nxtCh;
	end;
	tknLen = curCh$p - optStrVal$p;
end;



parseWord: PROCEDURE(maxlen) local;
	DECLARE maxlen BYTE;
    	DECLARE pstr(33) BYTE;
	
	optStrVal$p = .pstr(1);
	tknLen = 0;
	call skipWhite;
	if chrClass = CC$HEXCHAR or chrClass = CC$ALPHA then
		do while chrClass <= CC$ALPHA or chrClass = CC$DOLLAR;
			if chrClass <> CC$DOLLAR and tknLen <= maxlen then
			do;
				pstr(tknLen + 1) = curCh;
				tknLen = tknLen + 1;
			end;
			call nxtCh;
		end;
	if tknLen > maxlen then
		pstr(0) = maxlen;
	else
		pstr(0) = tknLen;
end;


getval:	PROCEDURE local;
	DECLARE tmp ADDRESS;
	tmp = curCh$p - 1;
	call parseWord(31);
	if tknLen = 0 then
	do;
		curInfo$p = 0FFFFh;
		curCh$p = tmp;
		chrClass = 0;
		call nxtCh;
		return;
	end;
	if tknlen > 31 then
	do;
		tknlen = tknlen - 1;
		call badCmdTail(ERR184);	/* CONDITIONAL COMPILATION PARAMETER NAME TOO LONG */
	end;
	call lookup(optStrVal$p - 1);
	if HIGH(cursym.info$p) = 0FFH then	/* special */
	do;
		curInfo$p = 0FFFFh;
		curCh$p = tmp;
		chrClass = 0;
		call nxtCh;
		return;
	end;

	call findScopedInfo(1);
end;


getlogical: PROCEDURE BYTE local;
	call parseWord(3);
	if tknLen = 0 and chrClass = CC$NEWLINE then
		return 0;
	if tknLen = 2 then
	do;
		if strncmp(optStrVal$p, .('OR'), 2) = 0 then
			return 1;
	end;
	else if tknLen = 3 then
		if strncmp(optStrVal$p, .('AND'), 3) = 0 then
			return 2;
		else if strncmp(optStrVal$p, .('XOR'), 3) = 0 then
			return 3;
	
	call badCmdTail(ERR185);	/* MISSING OPERATOR IN CONDITIONAL COMPILATION EXPRESSION */
	call skipToRPARorEOL;
	return 4;
end;


getTest: PROCEDURE BYTE local;
	DECLARE test BYTE;

	test = 0;
	call skipWhite;
	if curCh = '<' then
	do;
		call nxtCh;
		if curCh = '>' then
		do;
			call nxtCh;
			return 6;
		end;
		test = 2;
	end;
	else if curCh = '>' then
	do;
		call nxtCh;
		test = 4;
	end;
	if curCh = '=' then
	do;
		call nxtCh;
		test = test + 1;
	end;
	return test;
end;

chkNot: PROCEDURE BOOLEAN local;
	DECLARE notStatus BYTE, tmp ADDRESS;

	notStatus = FALSE;

	do while (1);
		tmp = curCh$p - 1;
		call parseWord(3);
		if tknLen <> 3 or strncmp(optStrVal$p, .('NOT'), 3) <> 0 then
		do;
			curCh$p = tmp;
			return notStatus;
		end;
		notStatus = not notStatus;
	end;
end;

getIFVal: PROCEDURE ADDRESS local;
	DECLARE val ADDRESS;

	chrClass = 0;
	call nxtCh;
	call skipWhite;
	if chrClass < CC$HEXCHAR then
	do;
		curCh$p = curCh$p - 1;
		val = parseNum;
		if val > 255 then
			call badCmdTail(ERR186);	/* INVALID CONDITIONAL COMPILATION CONSTANT, TOO LARGE */
		return low(val);
	end;
	else
	do;
		call getval;
		if curInfo$p = 0ffffh then
		do;
			call badCmdTail(ERR180);	/* MISSING OR INVALID CONDITIONAL COMPILATION PARAMETER */
			call skipToRPARorEOL;
			return 256;
		end;
		else if curInfo$p = 0 then
		do;
			return 0;
		end;
		else
			return getCondFlag;
	end;
end;

parseIfCond: PROCEDURE BOOLEAN local;
	DECLARE (andFactor, orFactor, xorFactor) BYTE;
	DECLARE (val1, val2) ADDRESS;
	DECLARE (relOp, not1, not2) BYTE;

	andFactor = TRUE;
	orFactor = FALSE;
	xorFactor = FALSE;
	
	do while (1);
		not1 = chkNot;
		val1 = getIfVal;
		if val1 > 255 then
			return TRUE;
		
		relOp = getTest;
		if relOp > 0 then
		do;
			not2 = chkNot;
			val2 = getIfVal;
			if val2 > 255 then
				return TRUE;
			val2 = not2 xor val2;
			do case relOp - 1;
			val1 = val1 = val2;
			val1 = val1 < val2;
			val1 = val1 <= val2;
			val1 = val1 > val2;
			val1 = val1 >= val2;
			val1 = val1 <> val2;
			end;
		end;
		val1 = (not1 xor val1) and andFactor;
		andFactor = TRUE;
		do case getlogical;
		return (val1 or orFactor) xor xorFactor;
		do;
			orFactor = (val1 or orFactor) xor xorFactor; 
			xorFactor = FALSE;
		end;
		andFactor = val1;
		do;
			xorFactor = (val1 or orFactor) xor xorFactor;
			orFactor = FALSE;
		end;
		return TRUE;
		end;
	end;
end;


optPageLen: PROCEDURE local;
	call getOptNumVal;
	if optNumValue < 4 or optNumValue = 0FFFFH then
		call badCmdTail(ERR91);	/* ILLEGAL PAGELENGTH CONTROL VALUE */
	else
		call setPAGELEN(optNumValue - 3);
end;

optPageWidth: PROCEDURE local;
	call getOptNumVal;
	if optNumValue < 60 or optNumValue = 0FFFFH then
		call badCmdTail(ERR92);	/* ILLEGAL PAGEWIDTH CONTROL VALUE */
	else if optNumValue > 132 then
		call badCmdTail(ERR92);	/* ILLEGAL PAGEWIDTH CONTROL VALUE */
	else
		call setPAGEWIDTH(optNumValue);
end;

optDate: PROCEDURE local;
	call accessOptStrVal;
	call setDate(optStrVal$p, tknLen);
end;

optTitle: PROCEDURE local;

	localSetTITLE: PROCEDURE BYTE;
		DECLARE len BYTE;
		call nxtCh;
		if curCh <> '''' then
			return 0;
		len = 0;
		do while 1;
			call nxtCh;
			if curCh = CR then
				goto done;
			if curCh = '''' then
			do;
				call nxtCh;
				if curCh <> '''' then
					goto done;
			end;
			if len <= 59 then
			do;
				TITLE(len) = curCh;
				len = len + 1;
			end;
		end;
	done:	if len <> 0 then
			TITLELEN = len;
		else
		do;
			TITLELEN = 1;
			TITLE(0) = ' ';
		end;
		if curch <> ')' then
			return 0;
		else
		do;
			call nxtCh;
			return TRUE;
		end;
	end;

	call skipWhite;
	if curCh <> '(' then
	do;
		call badCmdTail(ERR11);	/* MISSING CONTROL PARAMETER */
		return;
	end;
	if not localSetTITLE then
	do;
		call badCmdTail(ERR12);	/* INVALID CONTROL PARAMETER */
		call skipToRPARorEOL;
	end;
end;


optLeftMargin:	PROCEDURE local;
	call getOptNumVal;
	if optNumValue = 0 then
	do;
		call badCmdTail(ERR12);	/* INVALID CONTROL PARAMETER */
		optNumValue = 1;
	end;
	else if optNumValue = 0FFFFh then
	do;
		call badCmdTail(ERR12);	/* INVALID CONTROL PARAMETER */
		return;
	end;
	LEFTMARGIN = optNumValue;
end;

optIXRef: PROCEDURE local;
	call acceptFileName;
	if tknLen <> 0 then
		call initf(.ixiFile, .('IXREF '), optStrVal$p);
	else
		call initf(.ixiFile, .('IXREF '), .ixiFileName);
	IXREFSet = TRUE;
	IXREF = TRUE;
	call openf(.ixiFile, 2);
	ixiGiven = TRUE;
end;

optObject: PROCEDURE local;
	call acceptFileName;
	if tknLen <> 0 then
		call initf(.objFile, .('OBJECT'), optStrVal$p);
	else
		call initf(.objFile, .('OBJECT'), .objFileName);
	objBlk, objByte = 0;
	OBJECT = TRUE;
	OBJECTSet = TRUE;
	call openf(.objFile, 2);
	objGiven = TRUE;
end;

optInclude: PROCEDURE local;
	call acceptFileName;
	if tknLen = 0 then
	do;
		call badCmdTail(ERR15);	/* MISSING INCLUDE CONTROL PARAMETER */
		return;
	end;
	if optFileName(0) = ':' then
	do;
		if optFileName(1) <> 'F' then
			if offNxtCmdChM1 <> 0 then
				call fatal(.errNotDisk, length(errNotDisk));
			else
				call fatalError(ERR98);	/* INCLUDE FILE IS NOT A DISKETTE FILE */
	end;
	if srcFileIdx >= 50 then
		call syntaxError(ERR13);	/* LIMIT EXCEEDED: INCLUDE NESTING */
	else
	do;
		call tellf(.srcFil, .srcFileTable(srcFileIdx + 8));
		call backup(.srcFileTable(srcFileIdx + 8), olstch - ocurch);
		srcFileIdx = srcFileIdx + 10;
		call movmem(tknLen, optStrVal$p, .srcFileTable(srcFileIdx));
		call closef(.srcFil);
		call initf(.srcFil, .('SOURCE'), optStrVal$p);
		call openf(.srcFil, 1);
		ocurch = olstch;
		call wrByte(L$INCLUDE);
		call wrBuf(optStrVal$p + 12, 6);
		call wrByte(L$INCLUDE);
		call wrBuf(optStrVal$p + 6, 6);
		call wrByte(L$INCLUDE);
		call wrBuf(optStrVal$p, 6);
	end;
	call skipWhite;
	if curCh <> CR then
		call badCmdTail(ERR14);	/* INVALID CONTROL FORMAT, INCLUDE NOT LAST CONTROL */
end;


optPrint: PROCEDURE local;
	call acceptFileName;
	if lfOpen then
		call badCmdTail(ERR16);	/* ILLEGAL PRINT CONTROL */
	else
	do;
		if tknLen <> 0 then
			call initf(.lstFil, .('LIST '), optStrVal$p);
		else
			call initf(.lstFil, .('PRINT '), .lstFileName);
		PRINTSet = TRUE;
	end;
	PRINT = TRUE;
	call openf(.lstFil, 2);
	lstGiven = TRUE;
end;


optIntVector: PROCEDURE local;
	DECLARE vecNum BYTE, vecLoc ADDRESS;

	call skipWhite;
	if curCh <> '(' then
		call badCmdTail(ERR11);	/* MISSING CONTROL PARAMETER */
	else
	do;
		vecNum = parseNum;
		if vecNum <> 4 and vecNum <> 8 then
		do;
			call badCmdTail(ERR176);	/* INVALID INTVECTOR INTERVAL VALUE */
			call skipToRPARorEOL;
		end;
		else if curCh <> ',' then
		do;
			call badCmdTail(ERR177);	/* INVALID INTVECTOR LOCATION VALUE */
			call skipToRPARorEOL;
		end;
		else
		do;
			vecLoc = parseNum;
			if vecLoc > 0FFE0H or vecLoc mod (vecNum * 8) <> 0 or curCh <> ')' then
			do;
				call badCmdTail(ERR177);	/* INVALID INTVECTOR LOCATION VALUE */
				call skipToRPARorEOL;
			end;
			else
			do;
				call nxtCh;
				intVecNum = vecNum;
				intVecLoc = vecLoc;
			end;
		end;
	end;
end;

acceptDrive: PROCEDURE(fname, follow) BOOLEAN local;
	DECLARE fname ADDRESS, follow BYTE;
	DECLARE isOK boolean;
	DECLARE fnch BASED fname BYTE;

	acceptRangeChrs: PROCEDURE(lch, hch);
		DECLARE (lch, hch) BYTE;
		if isOK then
			if curch < lch or hch < curch then
			do;
				call badCmdTail(ERR12);	/* INVALID CONTROL PARAMETER */
				call skipToRPARorEOL;
				isOK = FALSE;
			end;
			else
			do;
				fnch = curch;
				fname = fname + 1;
				call nxtch;
			end;
	end;
	
	isOK = TRUE;
	call skipWhite;
    	call acceptRangeChrs(':', ':');
    	call acceptRangeChrs('F', 'F');
    	call acceptRangeChrs('0', '9');
    	call acceptRangeChrs(':', ':');
    	call skipWhite;
	call acceptRangeChrs(follow, follow);
	return isOK;
end;


optWorkFiles: PROCEDURE local;
	DECLARE wrkFiles1(5) BYTE, wrkFiles2(5) BYTE;

	call skipWhite;
	if curCh <> '(' then
		call badCmdTail(ERR11);	/* MISSING CONTROL PARAMETER */
	else
	do;
		call nxtCh;
		if not acceptDrive(.wrkFiles1, ',') then
			return;
		if not acceptDrive(.wrkFiles2, ')') then
			return;
		if tx1File.aftn <> 0 then
			call fatal(.errWorkFiles, length(errWorkFiles));
		call movmem(4, .wrkFiles1, .atFile.fnam);
		call movmem(4, .wrkFiles1, .nmsFile.fnam);
		call movmem(4, .wrkFiles1, .tx1File.fnam);
		call movmem(4, .wrkFiles1, .xrfFile.fnam);
		call movmem(4, .wrkFiles2, .tx2File.fnam);
	end;
end;

optSave: PROCEDURE local;
	if saveDepth >= 5 then
		call badCmdTail(ERR187);	/* LIMIT EXCEEDED: NUMBER OF SAVE LEVELS > 5 */
	else
	do;
		saveStack(saveDepth).code = CODE;
		saveStack(saveDepth).list = LIST;
		saveStack(saveDepth).cond = COND;
		saveStack(saveDepth).leftmargin = LEFTMARGIN;
		saveDepth = saveDepth + 1;
	end;
end;

optRestore: PROCEDURE local;
	if saveDepth = 0 then
		call badCmdTail(ERR188);	/* MISPLACED RESTORE OPTION */
	else
	do;
		saveDepth = saveDepth - 1;
		CODE = saveStack(saveDepth).code;
		LIST = saveStack(saveDepth).list;
		COND = saveStack(saveDepth).cond;
		LEFTMARGIN = saveStack(saveDepth).leftmargin;
		if CODE then
			call wrByte(L$CODE);
		else
			call wrByte(L$NOCODE);
		if LIST then
			call wrByte(L$LIST);
		else
			call wrByte(L$NOLIST);
	end;
end;


optSetReset: PROCEDURE(isSet) local;
	DECLARE isSet BYTE;
	DECLARE val ADDRESS;

	call skipWhite;	
	if curCh <> '(' then
		call badCmdTail(ERR11);	/* MISSING CONTROL PARAMETER */
	else 
		do while (1);
			call nxtCh;
			call getval;
			if curInfo$p = 0ffffh then
			do;
				call badCmdTail(ERR180);	/* MISSING OR INVALID CONDITIONAL COMPILATION PARAMETER */
				call skipToRPARorEOL;
				return;
			end;
			if curInfo$p = 0 then
				call createInfo(1, TEMP$T);
			call skipWhite;
			if curCh = '=' and isSet then
			do;
				val = parseNum;
				if val > 255 then
				do;
					call badCmdTail(ERR181);	/* MISSING OR INVALID CONDITIONAL COMPILATION CONSTANT */
					call skipToRPARorEOL;
					return;
				end;
				call setCondFlag(val);
			end;
			else
				call setCondFlag(isSet);
			if curCh <> ',' then
			do;
				call acceptRPAR;
				return;
			end;
		end;
end;

optIf: PROCEDURE local;

	ifDepth = ifDepth + 1;
	if not parseIfCond then
	do;
		skippingCOND = TRUE;
		inIFpart = TRUE;
		skippingCONDDepth = ifDepth;
		if not COND then
			if LIST then
				call wrByte(L$NOLIST);
	end;
end;

optElseElseIf: PROCEDURE local;
	if ifDepth = 0 then
		call badCmdTail(ERR182);	/* MISPLACED ELSE OR ELSEIF OPTION */
	else
	do;
		skippingCOND = TRUE;
		inIFpart = FALSE;
		skippingCONDDepth = ifDepth;
		if not COND then
			if LIST then
				call wrByte(L$NOLIST);
	end;
	do while curCh <> CR;
		call nxtCh;
	end;
end;


optEndIf: PROCEDURE local;
	if ifDepth = 0 then
		call badCmdTail(ERR183);	/* MISPLACED ENDIF OPTION */
	else
		ifDepth = ifDepth - 1;
end;


sub$550C: PROCEDURE local;

	do case tknFlags.controlVal;
	call optPageLen;
	call optPageWidth;
	call optDate;
	call optTitle;
	call optLeftMargin;
	call optObject;
	call optInclude;
	call optPrint;
	do;
		PRINT = FALSE; PRINTSet = FALSE;
	end;
	do;
		OBJECT = FALSE; OBJECTSet = FALSE;
	end;
	call optWorkFiles;
	call optIntVector;
	intVecNum = 0;
	call optIXRef;
	do;
		IXREF = FALSE; IXREFSet = FALSE;
	end;
	call optSave;
	call optRestore;
	call optSetReset(TRUE);
	call optSetReset(FALSE);
	call optIf;
	call optElseElseIf;
	call optEndif;
	COND = TRUE;
	COND = FALSE;
	end;
end;

findOption: PROCEDURE local;
	DECLARE (off, clen) ADDRESS;
	off = 0;
	clen = optTable(0);	

	do while clen <> 0;
		if clen = tknLen then
			if strncmp(optStrVal$p, .optTable(off) + 1, clen) = 0 then
			do;
				tknFlags$p = .optTable(off) + clen + 1;
				return;
			end;
		clen = optTable(off := off + clen + 6);
	end;
	tknFlags$p = 0;
end;


skipControlParam: PROCEDURE local;
	call skipWhite;
	if curCh = '(' then
	do;
		call nxtCh;
		call skipToRPARorEOL;
	end;
end;



doControls: PROCEDURE local;
	call getToken;
	if tknLen = 0 then
	do;
		call badCmdTail(ERR8);	/* INVALID CONTROL FORMAT */
		call skipControlParam;
	end;
	else
	do;
		call findOption;
		if tknFlags$p = 0 then
		do;
			call unknownCtrl;
			call skipControlParam;
		end;
		else
		do;
			if tknFlags.primary = 0 then
				if isNonCtrlLine then
				do;
					call syntaxError(ERR10);	/* ILLEGAL USE OF PRIMARY CONTROL AFTER NON-CONTROL LINE */
					call skipControlParam;
					return;
				end;
				else if primaryCtrlSeen(tknFlags.PrimaryId) then
				do;
					call badCmdTail(ERR95);	/* ILLEGAL RESPECIFICATION OF PRIMARY CONTROL IGNORED */
					call skipControlParam;
					return;
				end;
				else
					primaryCtrlSeen(tknFlags.PrimaryId) = TRUE;

			if tknFlags.controlId <> 0FFH then
				if tknFlags.tokenId = 0 then
					CONTROLS(tknFlags.controlId) = tknFlags.controlVal;
				else 
				do;
					call wrByte(tknFlags.tokenId);
					if tknFlags.tokenId = 5 then
						CODE = TRUE;
					else if tknFlags.tokenId = 6 then
						CODE = FALSE;
					else if tknFlags.tokenId = 3 then
						LIST = TRUE;
					else if tknFlags.tokenId = 4 then
						LIST = FALSE;
				end;
			else
				call sub$550C;
		end;
	end;
end;

do$Control: PROCEDURE(pch) public;
	DECLARE pch ADDRESS;

	curCh$p = pch;
	chrClass = 0;
	ixiGiven, objGiven, lstGiven = 0;
	call nxtCh;

	do while (1);
		call skipWhite;
		if chrClass = CC$NEWLINE then
		do;
			if ixiGiven then
				call closef(.ixiFile);
			if objGiven then
				call closef(.objFile);
			if lstGiven then
				call closef(.lstFil);
			return;
		end;
		call doControls;
	end;
end;


doCONDcompile: PROCEDURE(pch) public;
	DECLARE pch ADDRESS;

	curCh$p = pch;
	if curCh = '$'then
	do;
		chrClass = 0;
		call nxtCh;
		call skipWhite;
		call getToken;
		if tknLen = 2 and strncmp(optStrVal$p, .('IF'), 2) = 0 then
			ifDepth = ifDepth + 1;
		else if tknLen = 5 and strncmp(optStrVal$p, .('ENDIF'), 5) = 0 then
		do;
			if (ifDepth := ifDepth - 1) < skippingCONDDepth then
				skippingCOND = FALSE;
		end;
		else if skippingCONDDepth = ifDepth and inIFpart then
			if tknLen = 4 and strncmp(optStrVal$p, .('ELSE'), 4) = 0 then
				skippingCOND = FALSE;
			else if tknLen = 6 and strncmp(optStrVal$p, .('ELSEIF'), 6) = 0 then
				skippingCOND = not parseIfCond;
		if not skippingCOND then
			if not COND then
				if LIST then
					call wrByte(L$LIST);
	end;
end;


end;

src/plm0d.plm
plm0d:
DO;
$include(:f2:plm0d.ipx)

getlin: PROCEDURE public;
	DECLARE tmp ADDRESS;

	getSrcLine: PROCEDURE;
		call writeLineInfo;
		inChr$p = .lineBuf;
		call ingetc;
		if inchr = 81H then	/* EOF */
			return;
		trunc = FALSE;
		call rsrcln;
		inchr = CR;
		inChr$p = inChr$p + 1;
		inChr = LF;
		inChr$p = .lineBuf;
		linfo.lineCnt = linfo.lineCnt + 1;
		linfo.stmtCnt, linfo.blkCnt = 0;
		lineInfoToWrite = TRUE;
	end;


	getCodeLine: PROCEDURE;
		DECLARE startOfLine ADDRESS;

		do while (1);
			call getSrcLine;
			if inchr <> ISISEOF then
			do;
				startOfLine = inChr$p + LEFTMARGIN - 1;
				do while inChr$p < startOfLine;
					if inchr = CR then
						return;
					inChr$p = inChr$p + 1;
				end;
				if skippingCOND then
					call doCONDCompile(inChr$p);
				else if inchr = '$' then
				do;
					call wrByte(L$STMTCNT);
					call wrWord(0);
					if trunc then
					do;
						call syntaxError(ERR86);	/* LIMIT EXCEEDED: SOURCE LINE LENGTH */
						trunc = FALSE;
					end;
					call do$Control(inChr$p);
				end;
				else
				do;
					isNonCtrlLine = TRUE;
					return;
				end;
			end;
			else if srcFileIdx = 0 then
			do;
				if ifDepth <> 0 then
					call syntaxError(ERR188);	/* MISPLACED RESTORE OPTION */
				inChr$p = .('/*',27h,'/**/EOF   ');
				return;
			end;
			else
			do;
				call closef(.srcFil);
				srcFileIdx = srcFileIdx - 10;
				call initf(.srcFil, .('SOURCE'), .srcFileTable(srcFileIdx));
				call openf(.srcFil, 1);
				call seekf(.srcFil, .srcFileTable(srcFileIdx + 8));
				ocurch = olstch;
			end;
		end;
	end;




	if macroDepth <> 0 then
	do;
		tmp = curInfo$p;
		curInfo$p = curMacroInfo$p;
		call setType(0);
		curMacroInfo$p = macroPtrs(macroDepth + 1);
		inChr$p = macroPtrs(macroDepth);
		macroDepth = macroDepth - 2;
		curInfo$p = tmp;
	end;
	else
		call getCodeLine;
end;


END;
src/plm0e.plm
plm0e: DO;
$include(:f2:plm0e.ipx)

DECLARE ENDorSEMICOLON(2) BYTE DATA(T$END, T$SEMICOLON);
DECLARE tokenTypeTable(*) BYTE DATA(
	T$NUMBER, T$NUMBER, T$NUMBER, T$VARIABLE,
	T$VARIABLE, T$PLUSSIGN, T$MINUSSIGN, T$STAR,
	T$SLASH, T$LPAREN, T$RPAREN, T$COMMA,
	T$COLON, T$SEMICOLON, T$STRING, T$PERIOD,
	T$EQ, T$LT, T$GT, T$VARIABLE,
	T$VARIABLE, T$VARIABLE, T$VARIABLE, T$VARIABLE);

DECLARE typeProcIdx(*) BYTE DATA(
	1, 1, 1, 2, 2, 3, 3, 3,
	4, 3, 3, 3, 5, 3, 6, 3,
	3, 7, 8, 0, 9, 9, 10, 0);

DECLARE binValidate(4) BYTE DATA(0, 1, 1, 1),
	octValidate(4) BYTE DATA(0, 0, 1, 1),
	decValidate(4) BYTE DATA(0, 0, 0, 1),
	hexValidate(4) BYTE DATA(0, 0, 0, 2);


DECLARE endToggle BYTE INITIAL(0);

yylex: PROCEDURE public;
    DECLARE saveClass BYTE,
    pad ADDRESS, curOff ADDRESS;


	toupper: PROCEDURE(c) BYTE;
	    DECLARE c BYTE;

	    if 'a' <= c and c <= 'z' then
		c = c and 5FH;
	    return c;
	end;



	token2Num: PROCEDURE;
		DECLARE (tokenLen, ch) BYTE;

		str2num: PROCEDURE(radix, validate$p);
			DECLARE radix byte, validate$p ADDRESS;
			DECLARE validate BASED validate$p(4) BYTE;
			DECLARE trial ADDRESS, valId BYTE,
				errored BYTE, curoff BYTE, ct BYTE;

		    
			tokenVal, trial, errored = 0;
			do curoff = 1 to tokenLen;
				if (ct := cClass(ch := tokenStr(curoff))) > CC$HEXCHAR then
				    valId = 1;
				else
				    valId = validate(ct);
				do case valId;
					ch = ch - '0';
					do;
						if not errored then
						do;
							call tokenErrorAt(ERR5);	/* INVALID CHARACTER IN NUMERIC CONSTANT */
							errored = TRUE;
						end;
						ch = 0;
					end;
					ch = ch - 'A' + 10;
				end;

				if (trial := tokenVal * radix + ch) < tokenVal then
				do;
				    call tokenErrorAt(ERR94);	/* ILLEGAL CONSTANT, VALUE > 65535 */
				    return;
				end;
				tokenVal = trial;
			end;
		end;


		if cClass(ch := tokenStr(tokenlen := tokenStr(0))) <= CC$DECDIGIT then
			call str2Num(10, .decValidate);
		else 
		do;
			tokenlen = tokenLen - 1;
			if ch = 'H' then
				call str2num(16, .hexValidate);
			else if ch = 'Q' or ch = 'O' then
				call str2num(8, .octValidate);
			else if ch = 'B' then
				call str2num(2, .binValidate);
			else if ch = 'D' then
				call str2num(10, .decValidate);
			else
			do;
				call tokenErrorAt(ERR4);	/* ILLEGAL NUMERIC CONSTANT TYPE */
				tokenVal = 0;
			end;
		end;
	end token2num;

	nestMacro: PROCEDURE;
		DECLARE tmp ADDRESS;

		tmp = getLitAddr + 2;	
		call wrXrefUse;
		if macroDepth = 10 then
			call tokenErrorAT(ERR7);	/* LIMIT EXCEEDED: MACROS NESTED TOO DEEPLY */
		else
		do;
			call setType(7);
			macroPtrs(macroDepth := macroDepth + 2) = inChr$p;
			macroPtrs(macroDepth + 1) = curMacroInfo$p;
			inChr$p = tmp - 1;
			curMacroInfo$p = curInfo$p;
		end;
	end nestMacro;

	chkMacro: PROCEDURE BOOLEAN;

	    call lookup(.tokenStr);
	    markedSymbol$p = curSymbol$p;
	    if high(cursym.info$p) = 0FFH then	/* simple key word */
		tokenType = low(cursym.info$p);
	    else
	    do; 
		call findInfo;
		if curInfo$p <> 0 then
			if getType = LIT$T then
			do;
				call nestMacro;
				return FALSE;
			end;
			else if getType = MACRO$T then
			do;
				call tokenErrorAt(ERR6);	/* ILLEGAL MACRO REFERENCE, RECURSIVE EXPANSION */
				return FALSE;
			end;
	    end;
	    return TRUE;
	end;

	getName: PROCEDURE(maxlen);
		DECLARE maxlen ADDRESS;
		DECLARE ct BYTE;

	    curOff = 1;
	   
	    ct = cClass(lastch); 
	    do while ct <= CC$ALPHA or lastch = '$';
		if lastch = '$' then
		    call gnxtch;
		else if curOff > maxlen then
		do;
		    call tokenErrorAt(ERR3);	/* IDENTIFIER, STRING, OR NUMBER TOO LONG, TRUNCATED */
		    do while ct <= CC$ALPHA or lastch = '$';
			call gnxtch;
			ct = cClass(lastch);
		    end;
		    curOff = maxlen + 1;
		end;
		else
		do;
		    tokenStr(curOff) = toupper(lastch);
		    curOff = curOff + 1;
		    call gnxtch;
		end;
		ct = cClass(lastch);
	    end;
	    
	    tokenStr(0) = curOff - 1;
	end;


	parseString: PROCEDURE;
		DECLARE tooLong BYTE;

		tooLong = FALSE;
		curOff = 1;
		
		do while 1;
			call gnxtch;
			do while lastch <> QUOTE;
				do while lastch = CR or lastch = LF;
					call gnxtch;
				end;
				if lastch <> QUOTE then
				do;
					if curOff <> 256 then
					do;
						tokenStr(curOff) = lastch;
						curOff = curOff + 1;
					end;
					else
					do;
						toolong = TRUE;
						if lastch = ';' then
						do;
							call tokenErrorAt(ERR85);	/* LONG STRING ASSUMED CLOSED AT NEXT SEMICOLON OR QUOTE */
							goto L5F4E;
						end;
					end;
					call gnxtch;
				end;
			end;
			call gnxtch;
			if lastch = QUOTE then
				if curOff <> 256 then
				do;
					tokenStr(curOff) = lastch;
					curOff = curOff + 1;
				end;
				else
					toolong = TRUE;
			else
				goto L5F4E;
		end;
	l5F4E:
	    tokenStr(0) = curOff - 1;
	    if tokenStr(0) = 0 then
			call tokenErrorAt(ERR189);	/* LONG STRING ASSUMED CLOSED AT NEXT SEMICOLON OR QUOTE */
	    if toolong then
			call tokenErrorAt(ERR3);	/* IDENTIFIER, STRING, OR NUMBER TOO LONG, TRUNCATED */
	end;


	locyylex: PROCEDURE;
		DECLARE tmp ADDRESS, inComment BYTE;

		do while 1;
			saveClass = cClass(lastch);
			tokenType = tokenTypeTable(saveClass);
			do case typeProcIdx(saveClass);
			do;	/* white space */
				call gnxtch;
				saveClass = cClass(lastch);
				do while saveClass = CC$WSPACE;
					call gnxtch;
					saveClass = cClass(lastch);
				end;
			end;
			do;	/* digits */
				call getName(31);
				call token2Num;
				return;
			end;
			do;	/* letters */
				tmp = curInfo$p;
				call getName(255);
				if chkMacro then
					return;
				curInfo$p = tmp;
				call gnxtch;
			end;
			do;	/* -, +, *, (, ), ,, ;, = */
				call gnxtch;
				return;
			end;
			do;	/* slash */
				call gnxtch;
				inComment = TRUE;
				if lastch <> '*' then
					return;
				call gnxtch;
				do while inComment;
					do while lastch <> '*';
						call gnxtch;
					end;
					call gnxtch;
					if lastch = '/' then
					do;
						inComment = FALSE;
						call gnxtch;
					end;
				end;
			end;
			do;	/* : */
				call gnxtch;
				if lastch = '=' then
				do;
					tokenType = T$COLON$EQUALS;
					call gnxtch;
				end;
				return;
			end;
			do;	/* quote */
				call parseString;
				return;
			end;
			do;	/* < */
				call gnxtch;
				if lastch = '>' then
				do;
					tokenType = T$NE;
					call gnxtch;
				end;
				else if lastch = '=' then
				do;
					tokenType = T$LE;
					call gnxtch;
				end;
				return;
			end;
			do;	/* > */
				call gnxtch;
				if lastch = '=' then
				do;
					tokenType = T$GE;
					call gnxtch;
				end;
				return;
			end;
			do;	/* $, !, ", #, %, &, ?, @, [, \, ], ^, $, `, {, |, end;, ~ */
				call tokenErrorAt(ERR1);	/* INVALID PL/M-80 CHARACTER */
				call gnxtch;
			end;
			do;	/* non white space control chars and DEL */
				call tokenErrorAt(ERR2);	/* UNPRINTABLE ASCII CHARACTER */
				call gnxtch;
			end;
			end;
		end;
	end locyylex;

	if yyAgain then
		yyAgain = FALSE;
	else if unexpectedEOF then
		tokenType = ENDorSEMICOLON(endToggle := (endToggle + 1) and 1);
	else 
	do;
		call locyylex;
		if tokenType = T$EOF then
		do;
		    unexpectedEOF = TRUE;
		    tokenType = T$END;
		end;
	end;
end;

setYyAgain: PROCEDURE public;
	yyAgain = TRUE;
end;

/*
	look for matching token
*/
yylexMatch: PROCEDURE(token) BOOLEAN public;
	DECLARE token BYTE;

    call yylex;			/* get the token to check */
    if tokenType = token then
		return TRUE;
    else
    do;
	    call setYyAgain;	/* not matching but push back */
	    return FALSE;
    end;
end;

yylexNotMatch: PROCEDURE(token) BOOLEAN public;
	DECLARE token BYTE;
    return not yylexMatch(token);
end;

sub$60F9: PROCEDURE;
	DECLARE i ADDRESS;

	i = 1;
	call wrOprAndValue;
	call yylex;
    
	do while 1;
		if tokenType = T$LPAREN then
		    i = i + 1;
		else if tokenType = T$RPAREN then
		do;
		    if (i := i - 1) = 0 then
		    do;
			call wrOprAndValue;
			return;
		    end;
		end;
		else if tokenType = T$SEMICOLON or
				(tokenType >= T$CALL and tokenType <= T$RETURN)  then
		do;
			call tokenErrorAt(ERR82);	/* INVALID SYNTAX, MISMATCHED '(' */
			do while i <> 0;
				call wrByte(L$RPAREN);
				i = i - 1;
			end;
			call setYyAgain;
			return;
		end;
		call wrOprAndValue;
		call yylex;
	end;
end;


parseExpresion: PROCEDURE(endTok) public;
	DECLARE endTok BYTE;
	call yylex;
	do while tokenType <> endTok and tokenType <> T$SEMICOLON;
		if T$CALL <= tokenType and tokenType <= T$RETURN then
			goto L61CB;
		call wrOprAndValue;
		call yylex;
	end;
L61CB:
	call setYyAgain;
end;


/*
	error recovery to ) or end of statement
	skip to ; or
		) unless inside nested ()
*/
sub$61CF: PROCEDURE;
	DECLARE i ADDRESS;

	i = 0;
	do while (1);
		if tokenType = T$SEMICOLON then
			goto L6216;
		if tokenType = T$LPAREN then
			i = i + 1;
		else if tokenType = T$RPAREN then
			if i = 0 then
				goto L6216;
			else
				i = i - 1;
		call yylex;	/* get next token */
	end;
L6216:
	call setYyAgain;	/* push back token */
end;


/*
	error recovery to next element in parameter list
	skip to ; or
		) or , unless inside nested ()
*/
sub$621A: PROCEDURE;
	DECLARE i ADDRESS;
	i = 0;
	do while 1;
		if tokenType = T$SEMICOLON then
			goto L6278;
		if i = 0 then
			if tokenType = T$COMMA then
				goto L6278;
		if tokenType = T$LPAREN then
			i = i + 1;
		else if tokenType = T$RPAREN then
			if i = 0 then
				goto L6278;
			else
				i = i - 1;
		call yylex;	/* get next token */
	end;
L6278:
	call setYyAgain;	/* push back token */
end;



DECLARE declNames(33) ADDRESS,
	declBasedNames(33) ADDRESS,
	declNameCnt ADDRESS,
	declaringName ADDRESS,
	declaringBase ADDRESS,
	parentStructure ADDRESS,
	basedInfo ADDRESS,
	dclFlags(3) BYTE,
	dclType BYTE,
	lastLit ADDRESS,
	arrayDim ADDRESS,
	structMembers(33) ADDRESS,
	structMemDim(33) ADDRESS,
	structMemType(33) BYTE,
	structMCnt ADDRESS,
	byte$9D7B BYTE,
	flag BYTE;



parseDcl: PROCEDURE public;

	sub$62B0: PROCEDURE(errcode);
		DECLARE errcode ADDRESS;

		call tokenError(errcode, declaringName);
	end;



	chkModuleLevel: PROCEDURE;	/* 62C2 */

		if curscope <> 100H then
			call tokenErrorAt(ERR73);	/* INVALID ATTRIBUTE OR INITIALIZATION, NOT AT MODULE LEVEL */
	end;

	chkNotArray: PROCEDURE;	/* 62D5 */

		if testFlag(.dclFlags, F$ARRAY) then
		do;
			call tokenErrorAt(ERR63);	/* INVALID DIMENSION WITH THIS ATTRIBUTE */
			call clrFlag(.dclFlags, F$ARRAY);
			call clrFlag(.dclFlags, F$STARDIM);
			arrayDim = 0;
		end;
	end;


	chkNotStarDim: PROCEDURE;

		if testFlag(.dclFlags, F$STARDIM) then
		do;
			call tokenErrorAt(ERR62);	/* INVALID STAR DIMENSION WITH 'STRUCTURE' OR 'EXTERNAL' */
			call clrFlag(.dclFlags, F$STARDIM);
			arrayDim = 1;
		end;
	end;

	createStructMemberInfo: PROCEDURE;

		DECLARE (i, memDim) ADDRESS, memType BYTE;

		if structMCnt = 0 then
			return;

		do i = 1 to structMCnt;
			curSymbol$p = structMembers(i);
			memType = structMemType(i);
			memDim = structMemDim(i);
			call createInfo(curscope, memType);
			call wrXrefDef;
			call setInfoFlag(F$MEMBER);
			call setInfoFlag(F$LABEL);
			if memDim <> 0 then
			do;
				call setInfoFlag(F$ARRAY);
				call setDimension(memDim);
			end;
			else
				call setDimension(1);
			call setParentOffset(parentStructure);
		end;
	end;

	sub$63B7: PROCEDURE(v);
		DECLARE v ADDRESS;
		DECLARE (cFlags, i) BYTE;
	    
		curSymbol$p = declaringName;
		call findScopedInfo(curscope);
		if curInfo$p <> 0 then
		do;
			call wrXrefUse;
			if testInfoFlag(F$PARAMETER) and not testInfoFlag(F$LABEL) then
			do;
				cFlags = 0;
				do i = 0 to 2;
					cFlags = cFlags or dclFlags(i);
				end;
				if cFlags <> 0 then
					call sub$62B0(ERR76);	/* CONFLICTING ATTRIBUTE WITH PARAMETER */
				if dclType <> 2 and dclType <> 3 then
					call sub$62B0(ERR79);	/* ILLEGAL PARAMETER TYPE, NOT BYTE OR ADDRESS */
				else
					call setType(dclType);
				if declaringBase <> 0 then
				do;
					call sub$62B0(ERR77);	/* INVALID PARAMETER DECLARATION, BASE ILLEGAL */
					declaringBase = 0;
				end;
			end;
			else
			do;
			    call sub$62B0(ERR78);	/* INVALID PARAMETER DECLARATION, BASE ILLEGAL */
			    return;
			end;
		end;
		else
		do;
			call createInfo(curscope, dclType);
			call wrXrefDef;
			call cpyFlags(.dclFlags);
		end;
		parentStructure = curInfo$p;
		if dclType = 0 then
		do;
			if declaringBase <> 0 then
			    call sub$62B0(ERR81);	/* CONFLICTING ATTRIBUTE WITH 'BASE' */
			call setLitaddr(lastLit);
			return;
		end;
		else if dclType = 1 then
		do;
			if declaringBase <> 0 then
			    call sub$62B0(ERR80);	/* INVALID DECLARATION, LABEL MAY NOT BE BASED */
			if testInfoFlag(F$EXTERNAL) then
			    call setInfoFlag(F$LABEL);
			return;
		end;
		else
		do;
			if declaringBase <> 0 then
			do;
				if testInfoFlag(F$PUBLIC) or testInfoFlag(F$EXTERNAL)
				    or testInfoFlag(F$AT) or testInfoFlag(F$INITIAL)
				    or testInfoFlag(F$DATA) then
				do;
				    call sub$62B0(ERR81);	/* CONFLICTING ATTRIBUTE WITH 'BASE' */
				    declaringBase = 0;
				end;
				else
				    call setInfoFlag(F$BASED);
			end;
			call setDimension(arrayDim);
			call setBaseOffset(declaringBase);
			curInfo$p = curProcInfo$p;
			if testInfoFlag(F$REENTRANT) then
			do;
				curInfo$p = parentStructure;
				if not( testInfoFlag(F$DATA) or testInfoFlag(F$BASED)
				   or testInfoFlag(F$AT)) then
				    call setInfoFlag(F$AUTOMATIC);
			end;
			curInfo$p = parentStructure;
		end;
		if testInfoFlag(F$PARAMETER) then
			byte$9D7B = byte$9D7B + 1;
		else if v - byte$9D7B <> 1 then
			call setInfoFlag(F$PACKED);
		call setInfoFlag(F$LABEL);
		if dclType = 4 then
			call createStructMemberInfo;
	end;

	sub$65AF: PROCEDURE;
		DECLARE i ADDRESS;

		byte$9D7B = 0;
		do i = 1 to declNameCnt;
			declaringName = declNames(i);
			declaringBase = declBasedNames(i);
			call sub$63B7(i);
		end;
	end;

	/*
		parse AT, DATA or INITIAL argument
	*/
	sub$65FA: PROCEDURE(lexItem, locflag);
		DECLARE (lexitem, locflag) BYTE;

		if testFlag(.dclFlags, F$EXTERNAL) then
			call tokenErrorAt(ERR41);	/* CONFLICTING ATTRIBUTE */
		if yylexMatch(T$LPAREN) then
		do;
			call wrByte(lexItem);
			if flag then
				call wrOffset(topInfo + 1);
			else
				call wrOffset(botinfo);
			call setFlag(.dclFlags, locflag);
			call sub$60F9;
		end;
		else
			call tokenErrorAt(ERR75);	/* MISSING ARGUMENT OF 'AT' , 'DATA' , OR 'INITIAL' */
	end;


	parseDclInitial: PROCEDURE;

		if yylexMatch(T$INITIAL) then
		do;
			call chkModuleLevel;
			call sub$65FA(L$INITIAL, F$INITIAL);
		end;
		else if yylexMatch(T$DATA) then
			call sub$65FA(L$DATA, F$DATA);
		else if testFlag(.dclFlags, F$STARDIM) then
		do;
			call tokenErrorAt(ERR74);	/* INVALID STAR DIMENSION, NOT WITH 'DATA' OR 'INITIAL' */
			call clrFlag(.dclFlags, F$STARDIM);
			arrayDim = 1;
		end;
	end;

	parseDclAt: PROCEDURE;
		if yylexMatch(T$AT) then
			call sub$65FA(L$AT, F$AT);
	end;

	parseDclScope: PROCEDURE;
		if yylexMatch(T$PUBLIC) then
		do;
			call chkModuleLevel;
			call setFlag(.dclFlags, F$PUBLIC);
		end;
		else if yylexMatch(T$EXTERNAL) then
		do;
			call chkNotStarDim;
			call chkModuleLevel;
			call setFlag(.dclFlags, F$EXTERNAL);
		end;
	end;

	parseStructMType: PROCEDURE;
		DECLARE type ADDRESS;
		
		if yylexMatch(T$BYTE) then
			type = 2;
		else if yylexMatch(T$ADDRESS) then
			type = 3;
		else
		do;
			type = 2;
			if yylexMatch(T$STRUCTURE) then
			do;
				call tokenErrorAt(ERR70);	/* INVALID MEMBER TYPE, 'STRUCTURE' ILLEGAL */
				if yylexMatch(T$LPAREN) then
				do;
					call sub$61CF;
					call yylex;
				end;
			end;
			else if yylexMatch(T$LABEL) then
				call tokenErrorAt(ERR71);	/* INVALID MEMBER TYPE, 'LABEL' ILLEGAL */
			else
				call tokenErrorAt(ERR72);	/* MISSING TYPE FOR STRUCTURE MEMBER */
		end;
		structMemType(structMCnt) = type;
	end;

	parseStructMDim: PROCEDURE;
		DECLARE dim ADDRESS;
		
		if yylexMatch(T$LPAREN) then
		do;
			if yylexMatch(T$NUMBER) then
				dim = tokenVal;
			else if yylexMatch(T$STAR) then
			do;
				dim = 1;
				call tokenErrorAt(ERR69);	/* INVALID STAR DIMENSION WITH STRUCTURE MEMBER */
			end;
			else
			do;
				dim = 1;
				call tokenErrorAt(ERR59);	/* ILLEGAL DIMENSION ATTRIBUTE */
			end;
			if dim = 0 then
			do;
				dim = 1;
				call tokenErrorAt(ERR57);	/* ILLEGAL DIMENSION ATTRIBUTE */
			end;
			if yylexNotMatch(T$RPAREN) then
			do;
				call tokenErrorAt(ERR60);	/* MISSING ') ' AT END OF DIMENSION */
				call sub$61CF;
				call yylex;
			end;
			structMemDim(structMCnt) = dim;
		end;
	end;


	locParseStructMem: PROCEDURE;
		DECLARE mcnt BYTE;

		if yylexNotMatch(T$VARIABLE) then
			call tokenErrorAt(ERR66);	/* INVALID STRUCTURE MEMBER, NOT AN IDENTIFIER */
		else
		do;
			do mcnt = 1 to structMCnt;
				if curSymbol$p = structMembers(mcnt) then
					call tokenErrorAt(ERR67);	/* DUPLICATE STRUCTURE MEMBER NAME */
			end;
			if structMCnt = 32 then
				call tokenErrorAt(ERR68);	/* LIMIT EXCEEDED: NUMBER OF STRUCTURE MEMBERS */
			else
				structMCnt = structMCnt + 1;
			structMembers(structMCnt) = curSymbol$p;
			structMemType(structMCnt) = 0;
			structMemDim(structMCnt) = 0;
			call parseStructMDim;
			call parseStructMType;
	    end;
	end;

	parseStructMem: PROCEDURE;
		structMCnt = 0;
		if yylexNotMatch(T$LPAREN) then
			call tokenErrorAt(ERR64);	/* MISSING STRUCTURE MEMBERS */
		else
		do;
			do while 1;
				call locParseStructMem;
				if yylexNotMatch(T$COMMA) then
					goto exit;
			end;
			exit:
			if yylexNotMatch(T$RPAREN) then
			do;
				call tokenErrorAt(ERR65);	/* MISSING ') ' AT END OF STRUCTURE MEMBER LIST */
				call sub$61CF;
				call yylex;
			end;
		end;
	end;

	parseDclDataType: PROCEDURE;
		if yylexMatch(T$BYTE) then
			dclType = 2;
		else if yylexMatch(T$ADDRESS) then
			dclType = 3;
		else if yylexMatch(T$STRUCTURE) then
		do;
			dclType = 4;
			call chkNotStarDim;
			call parseStructMem;
		end;
		else if yylexMatch(T$LABEL) then
		do;
			dclType = 1;
			call chkNotArray;
		end;
		else
		do;
			call tokenErrorAt(ERR61);	/* MISSING TYPE */
			dclType = 2;
		end;
	end;

	parseArraySize: PROCEDURE;
		if yylexMatch(T$LPAREN) then
		do;
			call setFlag(.dclFlags, F$ARRAY);
			if yylexMatch(T$NUMBER) then
			do;
				if tokenVal = 0 then
				do;
					call tokenErrorAt(ERR57);	/* INVALID DIMENSION, ZERO ILLEGAL */
					arrayDim = 1;
				end;
				else
					arrayDim = tokenVal;
			end;
			else if yylexMatch(T$STAR) then
			do;
				if declNameCnt > 1 then
				do;
					call tokenErrorAt(ERR58);	/* INVALID STAR DIMENSION IN FACTORED DECLARATION */
					arrayDim = 1;
				end;
				else
					call setFlag(.dclFlags, F$STARDIM);
			end;
			else
			do;
				call tokenErrorAt(ERR59);	/* ILLEGAL DIMENSION ATTRIBUTE */
				arrayDim = 1;
			end;
			if yylexNotMatch(T$RPAREN) then
			do;
				call tokenErrorAt(ERR60);	/* MISSING ') ' AT END OF DIMENSION */
				call sub$61CF;
				call yylex;
			end;
		end;
	end;

	parseDeclType: PROCEDURE;
		call parseArraySize;
		call parseDclDataType;
		call parseDclScope;
		call parseDclAt;
		call parseDclInitial;
	end;


	parseLiterally: PROCEDURE;
		if yylexNotMatch(T$STRING) then
		do;
			call tokenErrorAt(ERR56);	/* INVALID MACRO TEXT, NOT A STRING CONSTANT */
			tokenStr(0) = 1;
			tokenStr(1) = ' ';
		end;
		lastLit = createLit(.tokenStr);
		dclType = 0;
	end;


	parseLitOrType: PROCEDURE;

		arrayDim = 1;
		call clrFlags(.dclFlags);
		dclType = 0;
		if yylexMatch(T$LITERALLY) then
			call parseLiterally;
		else
			call parseDeclType;
	end;

	getBaseInfo: PROCEDURE;
	    DECLARE (base1Name, base2Name) ADDRESS;

		basedInfo = 0;
		if yylexNotMatch(T$VARIABLE) then
			call tokenErrorAt(ERR52);	/* INVALID BASE, MEMBER OF BASED STRUCTURE OR ARRAY OF STRUCTURES */
		else 
		do;
			base1Name = curSymbol$p;
			if yylexMatch(T$PERIOD) then
				if yylexMatch(T$VARIABLE) then
					base2Name = curSymbol$p;
				else 
				do;
					call tokenErrorAt(ERR53);	/* INVALID STRUCTURE MEMBER IN BASE */
					return;
				end;
			else
				base2Name = 0;
			curSymbol$p = base1Name;
			call findInfo;
			if curInfo$p = 0 then
			do;
				call tokenErrorAt(ERR54);	/* UNDECLARED BASE */
				return;
			end;
			call wrXrefUse;
			if base2Name = 0 then
				basedInfo = curInfo$p;
			else 
			do;
				curSymbol$p = base2Name;
				call findMemberInfo;
				if curInfo$p = 0 then
				do;
					call tokenErrorAt(ERR55);	/* UNDECLARED STRUCTURE MEMBER IN BASE */
					return;
				end;
				call wrXrefUse;
				basedInfo = curInfo$p;
			end;
		end;
	end getBaseInfo;


	sub$6A68: PROCEDURE;
		if yylexNotMatch(T$VARIABLE) then
			call tokenErrorAt(ERR48);	/* ILLEGAL DECLARATION STATEMENT SYNTAX */
		else
		do;
			if declNameCnt = 32 then
				call tokenErrorAt(ERR49);	/* LIMIT EXCEEDED: NUMBER OF ITEMS IN FACTORED DECLARE */
			else
				declNameCnt = declNameCnt + 1;

			declNames(declNameCnt) = curSymbol$p;
			declBasedNames(declNameCnt) = 0;
			if not flag then
			do;
				call findScopedInfo(curscope);
				if curInfo$p = 0 then
					flag = TRUE;
			end;
			if yylexMatch(T$BASED) then
			do;
				call getBaseInfo;
				if basedInfo <> 0 then
				do;
					curInfo$p = basedInfo;
					if testInfoFlag(F$BASED) or testInfoFlag(F$ARRAY) or getType <> ADDRESS$T then
					do; 
						call tokenErrorAt(ERR50);	/* INVALID ATTRIBUTES FOR BASE */
						basedInfo = 0;
					end;
					else if testInfoFlag(F$MEMBER) then
					do;
						curInfo$p = getParentOffset;
						if testInfoFlag(F$ARRAY) or testInfoFlag(F$BASED) then
						do;
							call tokenErrorAt(ERR52);	/* INVALID BASE, MEMBER OF BASED STRUCTURE OR ARRAY OF STRUCTURES */
							basedInfo = 0;
						end;
					end;
					declBasedNames(declNameCnt) = basedInfo;
				end;
			end;
		end;
	end;


	getDclNames: PROCEDURE;

		declNameCnt = 0;
		flag = FALSE;
		if yylexMatch(T$LPAREN) then
		do;
			do while 1;
				call sub$6A68;
				if yylexNotMatch(T$COMMA) then
					goto exit;
			end;
			exit:
			if yylexNotMatch(T$RPAREN) then
			do;
				call tokenErrorAt(ERR47);	/* MISSING ') ' AT END OF FACTORED DECLARATION */
				call sub$61CF;
				call yylex;
			end;
		end;
		else
			call sub$6A68;
	end;
	if stmtLabelCnt <> 0 then
		call syntaxError(ERR46);	/* ILLEGAL USE OF LABEL */
	do while 1;
		call getDclNames;
		if declNameCnt <> 0 then
		do;
			call parseLitOrType;
			call sub$65AF;
		end;
		if yylexNotMatch(T$COMMA) then
			return;
    	end;
end;

parseProcDcl: PROCEDURE public;
	DECLARE hasParams BYTE, tmp ADDRESS;

	setPublic: PROCEDURE;
		if getScope <> 100h then
			call tokenErrorAt(ERR39);	/* INVALID ATTRIBUTE OR INITIALIZATION, NOT AT MODULE LEVEL */
		else if testInfoFlag(F$PUBLIC) then
			call tokenErrorAt(ERR40);	/* DUPLICATE ATTRIBUTE */
		else if testInfoFlag(F$EXTERNAL) then
			call tokenErrorAt(ERR41);	/* CONFLICTING ATTRIBUTE */
		else
			call setInfoFlag(F$PUBLIC);
	end;


	setExternal: PROCEDURE;

		if getScope <> 100H then
			call tokenErrorAt(ERR39);	/* INVALID ATTRIBUTE OR INITIALIZATION, NOT AT MODULE LEVEL */
		else if testInfoFlag(F$EXTERNAL) then
			call tokenErrorAt(ERR40);	/* DUPLICATE ATTRIBUTE */
		else if testInfoFlag(F$REENTRANT) or testInfoFlag(F$PUBLIC) then
			call tokenErrorAt(ERR41);	/* CONFLICTING ATTRIBUTE */
		else
			call setInfoFlag(F$EXTERNAL);
	end;

	setReentrant: PROCEDURE;

		if getScope <> 100h then
			call tokenErrorAt(ERR39);	/* INVALID ATTRIBUTE OR INITIALIZATION, NOT AT MODULE LEVEL */
		else if testInfoFlag(F$REENTRANT) then
			call tokenErrorAt(ERR40);	/* DUPLICATE ATTRIBUTE */
		else if testInfoFlag(F$EXTERNAL) then
			call tokenErrorAt(ERR41);	/* CONFLICTING ATTRIBUTE */
		else
			call setInfoFlag(F$REENTRANT);
	end;

	setInterruptNo: PROCEDURE;

		if yylexMatch(T$NUMBER) then
		do;
			if tokenVal > 255 then
			do;
				call tokenErrorAt(ERR42);	/* INVALID INTERRUPT VALUE */
				tokenVal = 0;
			end;
		end;
		else 
		do;
			call tokenErrorAt(ERR43);	/* MISSING INTERRUPT VALUE */
			tokenVal = 0;
		end;
		if getScope <> 100h then
			call tokenErrorAt(ERR39);	/* INVALID ATTRIBUTE OR INITIALIZATION, NOT AT MODULE LEVEL */
		else if testInfoFlag(F$INTERRUPT) then
			call tokenErrorAt(ERR40);	/* DUPLICATE ATTRIBUTE */
		else if hasParams then
			call tokenErrorAt(ERR44);	/* ILLEGAL ATTRIBUTE, 'INTERRUPT' WITH PARAMETERS */
		else if getDataType <> 0 then
			call tokenErrorAt(ERR45);	/* ILLEGAL ATTRIBUTE, 'INTERRUPT' WITH TYPED PROCEDURE */
		else if testInfoFlag(F$EXTERNAL) then
			call tokenErrorAt(ERR41);	/* CONFLICTING ATTRIBUTE */
		else
		do;
			call setInfoFlag(F$INTERRUPT);
			call setIntrNo(tokenVal);
		end;
	end;


	parseProcAttrib: PROCEDURE;

	    curInfo$p = curProcInfo$p;
		
	    do while 1;
			if yylexMatch(T$PUBLIC) then
				call setPublic;
			else if yylexMatch(T$EXTERNAL) then
				call setExternal;
			else if yylexMatch(T$REENTRANT) then
				call setReentrant;
			else if yylexMatch(T$INTERRUPT) then
				call setInterruptNo;
			else
				return;
	    end;
	end;

	parseRetType: PROCEDURE;

	    curInfo$p = curProcInfo$p;
	    if yylexMatch(T$BYTE) then
			call setDataType(2);
	    else if yylexMatch(T$ADDRESS) then
			call setDataType(3);
	end;

	DECLARE paramCnt ADDRESS;

	sub$6E4B: PROCEDURE;

	    call findScopedInfo(curscope);
	    if curInfo$p <> 0 then
			call tokenErrorAt(ERR38);	/* DUPLICATE PARAMETER NAME */
	    call createInfo(curscope, BYTE$T);
	    call wrXrefDef;
	    call setInfoFlag(F$PARAMETER);
	    paramCnt = paramCnt + 1;
	end;

	parseParams: PROCEDURE;

		paramCnt = 0;
		if yylexMatch(T$LPAREN) then
		do;
			do while 1;
				hasParams = TRUE;
				if yylexMatch(T$VARIABLE) then
					call sub$6E4B;
				else
				do;
					call tokenErrorAt(ERR36);	/* MISSING PARAMETER */
					call sub$621A;
				end;
				if yylexNotMatch(T$COMMA) then
					goto exit;
			end;
		exit:	
			if yylexNotMatch(T$RPAREN) then
			do;
				call tokenErrorAt(ERR37);	/* MISSING ') ' AT END OF PARAMETER LIST */
				call sub$61CF;
				call yylex;
			end;
			curInfo$p = curProcInfo$p;
			call setParamCnt(paramCnt);
		end;
		else
			hasParams = FALSE;
	end;


	tmp = curProcInfo$p;
	curSymbol$p = stmtLabels(1);
	call findScopedInfo(curscope);
	if curInfo$p <> 0 then
		call syntaxError(ERR34);	/* DUPLICATE PROCEDURE DECLARATION */
	call createInfo(curscope, PROC$T);
	call setInfoFlag(F$LABEL);
	call wrXrefDef;
	if procCnt = 254 then
		call fatalError(ERR35);	/* LIMIT EXCEEDED: NUMBER OF PROCEDURES */
	procInfo(procCnt := procCnt + 1) = curInfo$p;
	curProcId = procCnt;
	curProcInfo$p = curInfo$p;
	curDoBlkCnt = 0;
	doBlkCnt = 0;
	call pushBlock(curscope);
	call parseParams;
	call parseRetType;
	call parseProcAttrib;
	curInfo$p = curProcInfo$p;
	if not testInfoFlag(F$EXTERNAL) then
	do;
		call wrByte(L$PROCEDURE);
		call wrOffset(curInfo$p);
		call wrByte(L$SCOPE);
		call wrWord(curscope);
	end;
	else
	do;
		call wrByte(L$EXTERNAL);
		call wrOffset(curInfo$p);
	end;
	call setProcId(curProcId);
	if tmp <> 0 then
	do;
		curInfo$p = tmp;
		if testInfoFlag(F$REENTRANT) then
			call syntaxError(ERR88);	/* INVALID PROCEDURE NESTING, ILLEGAL IN REENTRANT PROCEDURE */
		curInfo$p = curProcInfo$p;
	end;
end;
END;
src/plm0f.plm
plm0f: DO;
$include(:f2:plm0f.ipx)

DECLARE brkTxiCodes(*) BYTE DATA(
	L$STATEMENT, L$SEMICOLON, L$CALL, L$LINEINFO,
	L$DISABLE, L$DO, L$ENABLE, L$END,
	L$GO, L$GOTO, L$HALT, L$IF,
	L$PROCEDURE, L$RETURN);


DECLARE curState ADDRESS PUBLIC, endSeen BYTE PUBLIC;

sub$6F00: PROCEDURE public;

	skipToSemiColon: PROCEDURE;
		do while tokenType <> T$SEMICOLON;
			call yylex;
		end;
		
		yyAgain = FALSE;
	end;

	expectSemiColon: PROCEDURE;
		if yylexNotMatch(T$SEMICOLON) then
		do;
			call tokenErrorAt(ERR32);	/* INVALID SYNTAX, TEXT IGNORED UNTIL ';' */
			call skipToSemiColon;
		end;
	end;

	errorSkip: PROCEDURE;
		call skipToSemiColon;
		call setYyAgain;
	end;

	popStateWord: PROCEDURE(state$p);
		DECLARE state$p ADDRESS,
			state BASED state$p ADDRESS;

		if stateIdx = 0 then
			call fatalError(ERR97);		/* COMPILER ERROR: PARSE STACK UNDERFLOW */
		state = stateStack(stateIdx);
		stateIdx = stateIdx - 1;
	end;

	genLocalLabel: PROCEDURE;
		call alloc(3, 3);
		localLabelCnt = localLabelCnt + 1;
	end;

	/*
		collect labels (max 9)
		looks for Variable ':'
		sybmol references stored in stmtLabels array
		count is in stmtLabelCnt
	*/
	parseStmtLabels: PROCEDURE;
		stmtLabelCnt = 0;
		
		do while (1);
			labelBrkToken = tokenType;
			labelBrkSymbol = curSymbol$p;
			if tokenType <> T$VARIABLE then
				return;
			
			if yylexMatch(T$COLON) then
			do;
				if stmtLabelCnt = 9 then
					call tokenErrorAt(ERR30);	/* LIMIT EXCEEDED: NUMBER OF LABELS ON STATEMENT */
						/* LIMIT EXCEEDED: NUMBER OF LABELS ON STATEMENT */
				else
					stmtLabelCnt = stmtLabelCnt + 1;
				stmtLabels(stmtLabelCnt) = curSymbol$p;
			end;
			else
				return;
			call yylex;
		end;
	end;

	parseStartStmt: PROCEDURE;
		DECLARE tmp BYTE;
		
		if endSeen then
		do;
			endSeen = FALSE;
			return;
		end;
		tmp = XREF;
		XREF = FALSE;
		call yylex;
		XREF = tmp;
		curStmtCnt = curStmtCnt + 1;
		if linfo.stmtCnt = 0 then
		do;
			linfo.stmtCnt = curStmtCnt;
			linfo.blkCnt = curBlkCnt;
		end;
		call wrByte(L$STMTCNT);
		call wrWord(curStmtCnt);
		if trunc then
		do;
			call syntaxError(ERR86);	/* LIMIT EXCEEDED: SOURCE LINE LENGTH */
			trunc = FALSE;
		end;
		call parseStmtLabels;
		if labelBrkToken = T$SEMICOLON then
		do;
			stmtStartCode = 1;
			call setYyAgain;
		end;
		else if labelBrkToken = T$VARIABLE then
			stmtStartCode = 0;
		else if labelBrkToken >= T$CALL and labelBrkToken <= T$RETURN then
			stmtStartCode = labelBrkToken - T$CALL + 2;
		else
		do;
			call tokenErrorAt(ERR29);	/* ILLEGAL STATEMENT */
			stmtStartCode = 1;
			call errorSkip;
		end;
		lblBrkTxiCode = brkTxiCodes(stmtStartCode);
	end;

	wrLabelDefs: PROCEDURE;
		DECLARE i ADDRESS, tmp ADDRESS;

		tmp = curSymbol$p;
		if stmtLabelCnt <> 0 then
		do;
			do i = 1 to stmtLabelCnt;
				curSymbol$p = stmtLabels(i);
				call findScopedInfo(curscope);
				if curInfo$p <> 0 then		/* already seen at this scope */
				do;
					if testInfoFlag(F$LABEL) then
						call tokenError(ERR33, curSymbol$p);	/* DUPLICATE LABEL DECLARATION */
							/* DUPLICATE LABEL DECLARATION */
					else
					do;
						call wrByte(L$LABELDEF);
						call wrOffset(curInfo$p);
						call setInfoFlag(F$LABEL);
					end;
					call wrXrefUse;
				end;
				else
				do;
					call createInfo(curscope, LABEL$T);
					call wrXrefDef;
					call wrByte(L$LABELDEF);
					call wrOffset(curInfo$p);
					call setInfoFlag(F$LABEL);
				end;
			end;
			if curscope = 100h then
				call wrByte(L$MODULE);
		end;
		curSymbol$p = tmp;
	end wrLabelDefs;

	sub$723A: PROCEDURE BYTE;
		if yylexMatch(T$VARIABLE) then
		do;
			curInfo$p = procInfo(1);
			if getSymbol <> curSymbol$p then
			    call tokenErrorAt(ERR20);	/* MISMATCHED IDENTIFIER AT END OF BLOCK */
		end;
		call expectSemiColon;
		if unexpectedEOF then
		do;
			call wrByte(L$END);
			return TRUE;
		end;
		else
		do;
			call yylex;
			if unexpectedEOF then
			do;
				call wrByte(L$END);
				unexpectedEOF = FALSE;
				return TRUE;
			end;
			else
			do;
				call syntaxError(ERR93);	/* MISSING 'DO' FOR 'END' , 'END' IGNORED */
				call setYyAgain;
				return FALSE;
			end;
		end;
	end sub$723A;

	sub$7296: PROCEDURE;
		DECLARE (i, v) BYTE;
		
		call popDO;
		if yylexMatch(T$VARIABLE) then
		do;
			curInfo$p = curProcInfo$p;
			if getSymbol <> curSymbol$p then
				call tokenErrorAt(ERR20);	/* MISMATCHED IDENTIFIER AT END OF BLOCK */
		end;
		curInfo$p = curProcInfo$p;
		v = getParamCnt;
		do i = 1 to v;
			call advNxtInfo;
			if not testInfoFlag(F$LABEL) then
				call tokenError(ERR25, getSymbol);	/* UNDECLARED PARAMETER */
		end;
		call popStateWord(.doBlkCnt);
		call popStateWord(.curProcInfo$p);
		call expectSemiColon;
	end;

	pushStateWord: PROCEDURE(v);
		DECLARE v ADDRESS;
		if stateIdx <> 63h then
		do;
			stateStack(stateIdx := stateIdx + 1) = v;
		end;
		else
			call fatalError(ERR31);		/* LIMIT EXCEEDED: PROGRAM TOO COMPLEX */
	end;


	pushStateByte: PROCEDURE(state);
		DECLARE state BYTE;
		call pushStateWord(state);
	end;


	createModuleInfo: PROCEDURE(symptr);
		DECLARE symptr ADDRESS;

		curSymbol$p = symptr;
		call createInfo(0, PROC$T);
		call setInfoFlag(F$LABEL);
		call wrXrefDef;
		curProcInfo$p = curInfo$p;
		call setProcId(1);
		procCnt = 1;
		procInfo(1) = curInfo$p;
		curscope = 100H;			/* proc = 1,  do level = 0 */
		call wrByte(L$DO);
		call wrByte(L$SCOPE);
		call wrWord(curscope);
		call pushBlock(curscope);
	end;


	state0: PROCEDURE;
		call parseStartStmt;
		call pushStateByte(1);
		if stmtStartCode <> (T$DO - T$CALL + 2) then
		do;
			call syntaxError(ERR89);		/* MISSING 'DO' FOR MODULE */
			call lookup(.(6, 'MODULE'));
			call createModuleInfo(curSymbol$p);
			call pushStateByte(19);
		end;
		else
		do;
			if stmtLabelCnt = 0 then
			do;
				call syntaxError(ERR90);	/* MISSING NAME FOR MODULE */
				call lookup(.(6, 'MODULE'));
				stmtLabelCnt = 1;
				stmtLabels(1) = curSymbol$p;
			end;
			else if stmtLabelCnt > 1 then
				call syntaxError(ERR18);	/* INVALID MULTIPLE LABELS AS MODULE NAMES */
			call createModuleInfo(stmtLabels(1));
			call expectSemiColon;
			call pushStateByte(3);
		end;
	end state0;



	state1: PROCEDURE;
		if stmtStartCode <> (T$END - T$CALL + 2) then
		do;
			haveModule = TRUE;
			call wrByte(L$MODULE);
			call pushStateByte(2);
		end;
		else
		do;
			if stmtLabelCnt <> 0 then
				call tokenErrorAt(ERR19);	/* INVALID LABEL IN MODULE WITHOUT MAIN PROGRAM */
			if not sub$723A then
			do;
				call pushStateByte(1);
				call pushStateByte(10);
			end;
		end;
	end state1;


	state2: PROCEDURE;
		if stmtStartCode <> (T$END - T$CALL + 2) then
		do;
			call pushStateByte(2);
			call pushStateByte(10);
			call pushStateByte(11);
		end;
		else
		do;
			call wrLabelDefs;
			if sub$723A then
				call wrByte(L$HALT);
			else
			do;
				call pushStateByte(2);
				call pushStateByte(10);
			end;
		end;
	end state2;


	state3: PROCEDURE;
		call parseStartStmt;
		call pushStateByte(19);
	end;


	state19: PROCEDURE;	/* check for DECLARE or PROCEDURE */
		if stmtStartCode = (T$DECLARE - T$CALL + 2) then
		do;
			call parseDcl;
			call pushStateByte(3);
			call expectSemiColon;
		end;
		else if stmtStartCode = (T$PROCEDURE - T$CALL + 2) then
		do;
			call pushStateByte(3);
			call pushStateByte(4);
		end;
	end;

	state4: PROCEDURE;
		if stmtLabelCnt = 0 then
		do;
			call syntaxError(ERR21);	/* MISSING PROCEDURE NAME */
			call pushStateByte(7);
		end;
		else
		do;
			if stmtLabelCnt <> 1 then
			do;
				call tokenErrorAt(ERR22);	/* INVALID MULTIPLE LABELS AS PROCEDURE NAMES */
				stmtLabelCnt = 1;
			end;
			call pushStateWord(curProcInfo$p);
			call pushStateWord(doBlkCnt);
			call parseProcDcl;
			call expectSemiColon;
			curInfo$p = curProcInfo$p;
			if testInfoFlag(F$EXTERNAL) then
				call pushStateByte(5);
			else
			do;
				call pushStateByte(6);
				call pushStateByte(21);
				call pushStateByte(3);
			end;
		end;
	end;


	state5: PROCEDURE;
		call parseStartStmt;
		if stmtStartCode = (T$END - T$CALL + 2) then
		do;
			if stmtLabelCnt <> 0 then
			do;
				call tokenErrorAt(ERR23);	/* INVALID LABELLED END IN EXTERNAL PROCEDURE */
				stmtLabelCnt = 0;
			end;
			call sub$7296;
		end;
		else
		do;
			call pushStateByte(5);
			if stmtStartCode = (T$DECLARE - T$CALL + 2) then
			do;
				call parseDcl;
				call expectSemiColon;
			end;
			else
			do;
				call tokenErrorAt(ERR24);	/* INVALID STATEMENT IN EXTERNAL PROCEDURE */
				if stmtStartCode = (T$PROCEDURE - T$CALL + 2) or
				   stmtStartCode = (T$DO - T$CALL + 2) then
					call pushStateByte(7);
				else
					call skipToSemiColon;
			end;
		end;
	end;


	state21: PROCEDURE;
		if stmtStartCode = (T$END - T$CALL + 2) then
			call tokenErrorAt(ERR174);	/* INVALID NULL PROCEDURE */
		else
			call pushStateByte(9);
	end;


	state6: PROCEDURE;
		call wrLabelDefs;
		call sub$7296;
		call wrByte(L$END);
	end;


	/* states 7 & 8 skip to end of block, handling nested blocks */
	state7: PROCEDURE;
		call skipToSemiColon;
		call pushStateByte(8);
	end;


	state8: PROCEDURE;
		call parseStartStmt;
		if stmtStartCode = (T$PROCEDURE - T$CALL + 2) or 	/* nested block */
		   stmtStartCode = (T$DO - T$CALL + 2) then
		do;
			call pushStateByte(8);
			call pushStateByte(7);				/* proc nested block */
		end;
		else
		do;
			call skipToSemiColon;				/* skip to end of statement */
			if stmtStartCode <> (T$END - T$CALL + 2) then	/* if not an END then go again */
				call pushStateByte(8);
		end;
	end;

	state9: PROCEDURE;
		if stmtStartCode <> (T$END - T$CALL + 2) then
		do;
			call pushStateByte(9);
			call pushStateByte(10);
			call pushStateByte(11);
		end;
	end;


	state10: PROCEDURE;
		call parseStartStmt;
	end;

	state11: PROCEDURE;
		if stmtStartCode = (T$DECLARE - T$CALL + 2) or
			stmtStartCode = (T$PROCEDURE - T$CALL + 2) or
			stmtStartCode = (T$END - T$CALL + 2) then
		do;

			call tokenErrorAt(ERR26);	/* INVALID DECLARATION, STATEMENT OUT OF PLACE */
			call pushStateByte(20);
		end;
		else if stmtStartCode = (T$DO - T$CALL + 2) then
			call pushStateByte(12);
		else if stmtStartCode = (T$IF - T$CALL + 2) then
			call pushStateByte(16);
		else
		do;
			call wrLabelDefs;
			call wrByte(lblBrkTxiCode);
			if stmtStartCode <> 1 then		/* Semicolon */
			do;
				if stmtStartCode = 0 then 	/* Variable */
				do;
					call wrByte(L$VARIABLE);
					call wrWord(labelBrkSymbol);
				end;
				call parseExpresion(T$SEMICOLON);
			end;
			call expectSemiColon;
			end;
	end;


	state20: PROCEDURE;
		if stmtStartCode = (T$DECLARE - T$CALL + 2) then
		do;
			call parseDcl;
			call expectSemiColon;
			call pushStateByte(20);
			call pushStateByte(10);
		end;
		else if stmtStartCode = (T$PROCEDURE - T$CALL + 2) then
		do;
			call pushStateByte(20);
			call pushStateByte(10);
			call pushStateByte(4);
		end;
		else if stmtStartCode = (T$END - T$CALL + 2) then
			endSeen = TRUE;
		else
			call pushStateByte(11);
	end;


	state12: PROCEDURE;	/* process DO */
		call wrLabelDefs;
		if stmtLabelCnt <> 0 then
			call pushStateWord(stmtLabels(stmtLabelCnt));
		else
			call pushStateWord(0);
		if yylexMatch(T$VARIABLE) then
		do;
			call wrByte(L$DOLOOP);	/* start of do loop */
			call wrOprAndValue;
			call parseExpresion(T$SEMICOLON);
			call pushStateByte(13);
			call pushStateByte(9);
			call pushStateByte(10);
		end;
		else if yylexMatch(T$WHILE) then
		do;
			call wrByte(L$WHILE);	/* start of while */
			call parseExpresion(T$SEMICOLON);
			call pushStateByte(13);
			call pushStateByte(9);
			call pushStateByte(10);
		end;
		else if yylexMatch(T$CASE) then
		do;
			call wrByte(L$CASE);	/* start of case */
			call parseExpresion(T$SEMICOLON);
			call genLocalLabel;
			call pushStateWord(localLabelCnt);
			call pushStateByte(14);
		end;
		else
		do;
			call wrByte(L$DO);	/* simple do end block */
			call pushStateByte(13);
			call pushStateByte(9);
			call pushStateByte(3);
		end;
		call expectSemiColon;		/* we should now see a semicolon */
		if doBlkCnt >= 255 then
			call syntaxError(ERR27);	/* LIMIT EXCEEDED: NUMBER OF DO BLOCKS */
		else
			doBlkCnt = doBlkCnt + 1;

		curDoBlkCnt = doBlkCnt;
		call pushBlock(curscope);
		call wrByte(L$SCOPE);
		call wrWord(curscope);
	end;



	state13: PROCEDURE;
		DECLARE labelPtr ADDRESS;

		call wrLabelDefs;
		call popDO;
		call popStateWord(.labelPtr);
		if yylexMatch(T$VARIABLE) then
			if curSymbol$p <> labelPtr then
				call tokenErrorAt(ERR20);	/* MISMATCHED IDENTIFIER AT END OF BLOCK */
		call wrByte(L$END);
		call expectSemiColon;
	end;


	state14: PROCEDURE;	/* process CASE statements */
		DECLARE labelptr ADDRESS, stateWord ADDRESS;
		
		call parseStartStmt;
		if stmtStartCode <> (T$END - T$CALL + 2) then
		do;
			call genLocalLabel;
			call wrByte(L$CASELABEL);
			call wrWord(localLabelCnt);
			call pushStateByte(15);
			call pushStateByte(11);
		end;
		else
		do;
			call popStateWord(.stateWord);	/* get the head jump */
			call wrLabelDefs;
			if stmtLabelCnt <> 0 then
			do;
				call wrByte(L$JMP);
				call wrWord(stateWord);
			end;
			call popDO;
			call popStateWord(.labelptr);
			call wrByte(L$END);
			call wrByte(L$LOCALLABEL);
			call wrWord(stateWord);
			/* check end label if present */
			if yylexMatch(T$VARIABLE) then
				if curSymbol$p <> labelptr then
					call syntaxError(ERR20);	/* MISMATCHED IDENTIFIER AT END OF BLOCK */
			call expectSemiColon;
		end;
	end;


	state15: PROCEDURE;
		DECLARE stateWord ADDRESS;
		
		call popStateWord(.stateWord);
		call wrByte(L$JMP);
		call wrWord(stateWord);
		call pushStateWord(stateWord);
		call pushStateByte(14);
	end;


	state16: PROCEDURE;	/* process if condition then */
		call wrLabelDefs;
		call wrByte(L$IF);
		call parseExpresion(T$THEN);
		if yylexNotMatch(T$THEN) then
		do;
			call tokenErrorAt(ERR28);	/* MISSING 'THEN' */
			call wrByte(L$JMPFALSE);
			call wrWord(0);
		end;
		else
		do;
			call genLocalLabel;
			call pushStateWord(localLabelCnt);
			call wrByte(L$JMPFALSE);
			call wrWord(localLabelCnt);
			call pushStateByte(17);
			call pushStateByte(11);
			call pushStateByte(10);
		end;
	end;


	state17: PROCEDURE;	/* process optional ELSE */
		DECLARE stateWord ADDRESS, tmp BYTE;
		
		call popStateWord(.stateWord);	/* labelref for if condition false */
		call yylex;
		tmp = lineInfoToWrite;			/* supress line info for labeldefs etc */
		lineInfoToWrite = FALSE;
		if tokenType = T$ELSE then
		do;
			call genLocalLabel;
			call wrByte(L$JMP);
			call wrWord(localLabelCnt);	/* jump round else labelref */
			call pushStateWord(localLabelCnt);	/* save labelref for end of else statement */
			call pushStateByte(18);
			call pushStateByte(11);
			call pushStateByte(10);
		end;
		else
			call setYyAgain;

		call wrByte(L$LOCALLABEL);	/* emit label for if condition false */
		call wrWord(stateWord);
		lineInfoToWrite = tmp;
	end;



	state18: PROCEDURE;		/* end of else */
		DECLARE stateWord ADDRESS, tmp BYTE;

		tmp = lineInfoToWrite;				/* supress line info for labeldefs */
		
		lineInfoToWrite = FALSE;
		call popStateWord(.stateWord);		/* labelref for end of else */
		call wrByte(L$LOCALLABEL);	/* emit label */
		call wrWord(stateWord);
		lineInfoToWrite = tmp;
	end;

	stateIdx = 0;
	endSeen = FALSE;
	call pushStateByte(0);
	do while stateIdx <> 0;
		curState = stateStack(stateIdx);
		stateIdx = stateIdx - 1;
		do case curState;
			call state0;
			call state1;
			call state2;
			call state3;
			call state4;
			call state5;
			call state6;
			call state7;
			call state8;
			call state9;
			call state10;
			call state11;
			call state12;
			call state13;
			call state14;
			call state15;
			call state16;
			call state17;
			call state18;
			call state19;
			call state20;
			call state21;
		end;
	end;
end;end;
src/plm0g.plm
plm0g: DO;
$include(:f2:plm0g.ipx)

createLit: PROCEDURE(pstr) ADDRESS PUBLIC;
	DECLARE pstr ADDRESS, str BASED pstr(1) BYTE;
	DECLARE (litLen, litSymbol) ADDRESS;
	DECLARE litStr BASED litSymbol(1) BYTE;

	litLen = str(0) + 1;
	litSymbol = allocSymbol(litLen + 3);
	call movmem(litLen, pstr, litSymbol + 1);
	call movmem(2, .(' ', LF), litSymbol + litLen + 1);	/* add " \n" */
	litStr(0) = 255;		/* put max size \n will terminate */
	return litSymbol;
end;


end;


src/plm0h.plm
plm0h: DO;
$include(:f2:plm0h.ipx)

setDate: PROCEDURE(str, len) PUBLIC;
	DECLARE str ADDRESS, len BYTE;
	if len > 9 then
		len = 9;
	call fill(9, .DATE, ' ');
	call movmem(len, str, .DATE);
end setDate;

setPageLen: PROCEDURE(len) PUBLIC;
	DECLARE len ADDRESS;
	PAGELEN = len;
end setPageLen;

setPageWidth: PROCEDURE(width) PUBLIC;
	DECLARE width ADDRESS;
	PWIDTH = width;
end setPAGEWIDTH;


end;

src/plm1a.plm
plm1a: DO;
$include(:f2:plm1a.ipx)

/* index into precedence table */
DECLARE tx1Aux1Map(*) BYTE DATA(0, 0, 0, 0, 0, 0, 0, 0,
	      0, 0, 0, 0, 0, 0, 0, 0,
	      0, 0, 0, 0, 0, 0, 0, 0,
	      0, 0, 0, 0, 0, 0, 0, 0,
	      0, 0, 0, 0, 1, 2, 0, 3,
	      4, 5, 6, 7, 8, 9, 1Dh, 0Ah,
	      0Bh, 0Ch, 0Dh, 0Eh, 0Fh, 10h, 11h, 12h,
	      13h, 0, 0, 0, 0, 0, 0, 0,
	      0, 0, 0, 0);

DECLARE b402F(*) BYTE PUBLIC DATA(
    /* L$LINEINFO, L$SYNTAXERROR, L$TOKENERROR, L$LIST, L$NOLIST, L$CODE, L$NOCODE, L$EJECT, */
    T2$LINEINFO, T2$SYNTAXERROR, T2$TOKENERROR, T2$LIST, T2$NOLIST, T2$CODE, T2$NOCODE, T2$EJECT,
    /* L$INCLUDE, L$STMTCNT, L$LABELDEF, L$LOCALLABEL, L$JMP, L$JMPFALSE, L$PROCEDURE, L$SCOPE, */
    T2$INCLUDE, T2$STMTCNT, T2$LABELDEF, T2$LOCALLABEL, T2$JMP, T2$JMPFALSE, T2$PROCEDURE, 0,
    /* L$END, L$DO, L$DOLOOP, L$WHILE, L$CASE, L$CASELABEL, L$IF, L$STATEMENT, */
    0, 0, 0, 0, T2$CASE, T2$CASELABEL, 0, 0,
    /* L$CALL, L$RETURN, L$GO, L$GOTO, L$SEMICOLON, L$ENABLE, L$DISABLE, L$HALT, */
    0, T2$RETURN, T2$GO$TO, T2$GO$TO, T2$SEMICOLON, T2$ENABLE, T2$DISABLE, T2$HALT,
    /* L$EOF, L$AT, L$INITIAL, L$DATA, L$VARIABLE, L$NUMBER, L$STRING, L$PLUSSIGN, */
    0, 0, 0, 0,T2$VARIABLE, 0, 0, T2$ADDB,
    /* L$MINUSSIGN, L$PLUS, L$MINUS, L$STAR, L$SLASH, L$MOD, L$COLONEQUALS, L$AND, */
    T2$MINUSSIGN, T2$PLUS, T2$MINUS, T2$STAR, T2$SLASH, T2$MOD, T2$STORE, T2$AND,
    /* L$OR, L$XOR, L$NOT, L$LT, L$LE, L$EQ, L$NE, L$GE, */
    T2$OR, T2$XOR, T2$NOT, T2$LT, T2$LE, T2$EQ, T2$NE, T2$GE,
    /* L$GT, L$COMMA, L$LPAREN, L$RPAREN, L$PERIOD, L$TO, L$BY, L$UNUSED, */
    T2$GT, 0, 0, 0, 0, 0, 0, 0,
    /* L$MODULE, L$XREFINFO, L$XREF, L$EXTERNAL */
    T2$MODULE, 0, 0, 0);

/* 80h	- expression item */
/* 40h - binary operator */
/* 20h - pass through */
/* 10h - PROCEDURE, AT, DATA, INITIAL or EXTERNAL */

DECLARE tx1Aux2Map(*) BYTE DATA(
        20h, 20h, 20h, 20h, 20h, 20h, 20h, 20h,
        20h, 0, 0, 0, 0, 0, 10h, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 10h, 10h, 10h, 80h, 80h, 80h,0C0h,
        0C0h,0C0h,0C0h,0C0h,0C0h,0C0h, 80h,0C0h,
        0C0h,0C0h, 80h,0C0h,0C0h,0C0h,0C0h,0C0h,
        0C0h, 80h, 80h, 80h, 80h, 80h, 80h, 0,
        20h, 0, 0, 10h);

DECLARE b40B7(*) BYTE public DATA(
    /* L$LINEINFO, L$SYNTAXERROR, L$TOKENERROR, L$LIST, L$NOLIST, L$CODE, L$NOCODE, L$EJECT, */
    12h, 12h, 12h, 12h, 12h, 12h, 12h, 12h,
    /* L$INCLUDE, L$STMTCNT, L$LABELDEF, L$LOCALLABEL, L$JMP, L$JMPFALSE, L$PROCEDURE, L$SCOPE,  */
    12h, 0, 13h, 13h, 13h, 13h, 7, 1,
    /* L$END, L$DO, L$DOLOOP, L$WHILE, L$CASE, L$CASELABEL, L$IF, L$STATEMENT,  */
    2, 6, 4, 5, 8, 13h, 3, 9,
    /* L$CALL, L$RETURN, L$GO, L$GOTO, L$SEMICOLON, L$ENABLE, L$DISABLE, L$HALT,  */
    0Ah, 0Bh, 0Dh, 0Ch, 0Eh, 0Fh, 0Fh, 0Fh,
    /* L$EOF, L$AT, L$INITIAL, L$DATA, L$VARIABLE, L$NUMBER, L$STRING, L$PLUSSIGN,  */
    12h, 10h, 11h, 11h, 12h, 12h, 12h, 12h,
    /* L$MINUSSIGN, L$PLUS, L$MINUS, L$STAR, L$SLASH, L$MOD, L$COLONEQUALS, L$AND,  */
    12h, 12h, 12h, 12h, 12h, 12h, 12h, 12h,
    /* L$OR, L$XOR, L$NOT, L$LT, L$LE, L$EQ, L$NE, L$GE,  */
    12h, 12h, 12h, 12h, 12h, 12h, 12h, 12h,
    /* L$GT, L$COMMA, L$LPAREN, L$RPAREN, L$PERIOD, L$TO, L$BY, L$INVALID,  */
    12h, 12h, 12h, 12h, 12h, 12h, 12h, 12h,
    /* L$MODULE, L$XREFINFO, L$XREF, L$EXTERNAL */
    12h, 12h, 12h, 14h);


DECLARE tx1ItemLengths(*) BYTE DATA(
    6, 2, 4, 0, 0, 0, 0, 0,
    6, 2, 2, 2, 2, 2, 2, 2,
    0, 0, 0, 0, 0, 2, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 2, 2, 2, 2, 2,0FFh, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 2, 2, 2);


DECLARE b413F(*) BYTE public DATA(
    /* ?, I$VARIABLE, I$NUMBER, I$PLUSSIGN, I$MINUSSIGN, I$PLUS, I$MINUS, I$STAR */
    0 , T2$VARIABLE, T2$NUMBER, T2$ADDB, T2$MINUSSIGN, T2$PLUS, T2$MINUS, T2$STAR,
    /* I$SLASH, I$MOD, I$AND, I$OR, I$XOR, I$NOT, I$LT, I$LE */
    T2$SLASH, T2$MOD, T2$AND, T2$OR, T2$XOR, T2$NOT, T2$LT, T2$LE,
    /* I$EQ, I$NE, I$GE, I$GT, I$ADDRESSOF, I$UNARYMINUS, I$STACKPTR, I$INPUT */
    T2$EQ, T2$NE, T2$GE, T2$GT, T2$ADDRESSOF, T2$UNARYMINUS, T2$STACKPTR, T2$INPUT,
    /* I$OUTPUT, I$CALL, I$CALLVAR, I$BYTEINDEX, I$WORDINDEX, I$COLONEQUALS, I$MEMBER, I$BASED */
    T2$OUTPUT, T2$CALL, T2$CALLVAR, T2$BYTEINDEX, T2$WORDINDEX, T2$STORE, T2$MEMBER, T2$BASED,
    /* I$CARRY, I$DEC, I$DOUBLE, I$HIGH, I$LAST, I$LENGTH, I$LOW, I$MOVE, */
    T2$CARRY, T2$DEC, T2$DOUBLE, T2$HIGH, T2$LAST, T2$LENGTH, T2$LOW, T2$MOVE,
    /* I$PARITY, I$ROL, I$ROR, I$SCL, I$SCR, I$SHL, I$SHR, I$SIGN, */
    T2$PARITY, T2$ROL, T2$ROR, T2$SCL, T2$SCR, T2$SHL, T2$SHR, T2$SIGN,
    /* I$SIZE, I$TIME, I$ZERO, */
    T2$SIZE, T2$TIME, T2$ZERO);

DECLARE b4172(*) BYTE public DATA(
/* I$STRING, I$VARIABLE, I$NUMBER, I$PLUSSIGN, I$MINUSSIGN, I$PLUS, I$MINUS, I$STAR */
	10, 0, 0, 60, 60, 60, 60, 70,
/* I$SLASH, I$MOD, I$AND, I$OR, I$XOR, I$NOT, I$LT, I$LE */
        70, 70, 30, 20, 20, 40, 50, 50,
/* I$EQ, I$NE, I$GE, I$GT,$ADDRESSOF,I$UNARYMINUS, I$STACKPTR, I$INPUT */
        50, 50, 50, 50, 0, 80, 0, 0,
/* I$OUTPUT, I$CALL, I$CALLVAR, I$BYTEINDEX, I$WORDINDEX, I$COLONEQUALS, I$MEMBER, I$BASED */
        0, 0, 0, 0, 0, 0, 0, 0,
/* I$CARRY, I$DEC, I$DOUBLE, I$HIGH, I$LAST, I$LENGTH, I$LOW, I$MOVE  */
        0, 0, 0, 0, 0, 0, 0, 0,
/* I$PARITY, I$ROL, I$ROR, I$SCL, I$SCR, I$SHL, I$SHR, I$SIGN */
        0, 0, 0, 0, 0, 0, 0, 0,
/*  I$SIZE, I$TIME, I$ZERO */
        0, 0, 0);


DECLARE builtinsMap(*) BYTE public DATA(
     I$CARRY, I$DEC, I$DOUBLE, I$HIGH, I$INPUT, I$LAST, I$LENGTH, I$LOW,
     I$MOVE, I$OUTPUT, I$PARITY, I$ROL, I$ROR, I$SCL, I$SCR, I$SHL,
     I$SHR, I$SIGN, I$SIZE, I$STACKPTR, I$TIME, I$ZERO);




declare parseSP address public,
	parseStack(100) address public,
	operatorSP address public,
	operatorStack(50) address public,
	exSP address public,
	ex1Stack(100) byte public,
	ex2Stack(100) byte public,
	ex3Stack(100) address public,
	stSP address public,
	st1Stack(300) byte public,
	st2Stack(300) byte public,
	st3Stack(300) address public;


fatalError: PROCEDURE(err) public;
    DECLARE err BYTE;
    hasErrors = TRUE;
    b91C0, fatalErrorCode = err;
    goto cleanup;
end;


optWrXrf: PROCEDURE public;
    DECLARE tmp STRUCTURE(type BYTE, info ADDRESS, stmt ADDRESS);

    if not XREF then
	return;
    tmp.type = T2$65;
    tmp.info = curInfo$p - botInfo;
    tmp.stmt = curStmtNum;
    call fwrite(.xrfFile, .tmp, 5);
end;

wrTx2File: PROCEDURE(buf, cnt) public;
    DECLARE buf ADDRESS, cnt BYTE;
    DECLARE type BASED buf BYTE;

    T2CntForStmt = T2CntForStmt + 1;
    if not hasErrors then 
	call fwrite(.tx2File, buf, cnt);
    else if T2$STMTCNT <= type and type <= T2$ERROR then
	call fwrite(.tx2File, buf, cnt);
end;

sub$4251: PROCEDURE(type$p, cnt);
    DECLARE type$p ADDRESS, cnt BYTE;
    DECLARE type BASED type$p BYTE;

    if b88B3 then
	if type = T2$STMTCNT then
	do;
	    call wrTx2File(.linfo, 7);
	    b88B3 = 0;
	    if tx1Item.dataw(0) = 0 then
		return;
	end;
    call wrTx2File(type$p, cnt);
end;

wrTx2Item: PROCEDURE(arg1b) ADDRESS public;
    DECLARE arg1b BYTE;
    call sub$4251(.arg1b, 1);
    return T2CntForStmt;
end;

wrTx2Item1Arg: PROCEDURE(arg1b, arg2w) ADDRESS public;
    DECLARE arg1b BYTE, arg2w ADDRESS;
    call sub$4251(.arg1b, 3);
    return T2CntForStmt;
end;

wrTx2Item2Arg: PROCEDURE(arg1b, arg2w, arg3w) ADDRESS public;
    DECLARE arg1b BYTE, (arg2w, arg3w) ADDRESS;
    call sub$4251(.arg1b, 5);
    return T2CntForStmt;
end;

wrTx2Item3Arg: PROCEDURE(arg1b, arg2w, arg3w, arg4w) ADDRESS public;
    DECLARE arg1b BYTE, (arg2w, arg3w, arg4w) ADDRESS;
    call sub$4251(.arg1b, 7);
    return T2CntForStmt;
end;

sub$42EF: PROCEDURE(arg1w) ADDRESS public;
    declare arg1w address;
    return (T2CntForStmt + 1 - arg1w);
end;

mapLtoT2: PROCEDURE public;
    DECLARE i BYTE;
    i = tx1ItemLengths(tx1Item.type) + 1;
    tx1Item.type = b402F(tx1Item.type);
    call sub$4251(.tx1Item.type, i);
end;

wrTx2Error: PROCEDURE(arg1b) public;
    DECLARE arg1b BYTE, junk ADDRESS;
    hasErrors = TRUE;
    junk = wrTx2Item1Arg(T2$SYNTAXERROR, arg1b);
end;


wrTx2ExtError: PROCEDURE(arg1b) public;
    declare arg1b byte, junk address;
    hasErrors = TRUE;
    if curInfo$p <> 0 then 
	junk = wrTx2Item2Arg(T2$TOKENERROR, arg1b, curInfo$p - botInfo);
    else
	junk = wrTx2Item1Arg(T2$SYNTAXERROR, arg1b);
end;

setRegetTx1Item: PROCEDURE public;
    regetTx1Item = TRUE;
end;

rdTx1Item: PROCEDURE public;
    DECLARE tx1ItemLen ADDRESS;
    call fread(.tx1File, .tx1Item, 1);
    tx1ItemLen = tx1ItemLengths(tx1Item.type);
    if tx1ItemLen <> 0 then
	if tx1ItemLen <> 255 then
	do;		/* i.e. not a string */
	    call fread(.tx1File, .tx1Item.dataw, tx1ItemLen);
	end;
	else
	do;
	    call fread(.tx1File, .tx1Item.dataw, 2);
	    tx1ItemLen = tx1Item.dataw(0);
	    call fread(.tx1File, .tx1Item.dataw(1), tx1Item.dataw(0));
	end;
    tx1Aux1 = tx1Aux1Map(tx1Item.type);
    tx1Aux2 = tx1Aux2Map(tx1Item.type);
end;
end;
src/plm1b.plm
plm1b: DO;
$include(:f2:plm1b.ipx)

getTx1Item: PROCEDURE public;

    if regetTx1Item then
    do;
	regetTx1Item = FALSE;
	return;
    end;
    do while 1;
	call rdTx1Item;
	if tx1Item.type = L$TOKENERROR then
	do;
	    if (curSymbol$p := tx1Item.dataw(1)) <> 0 then
	    do;
		if high(cursym.info$p) = 0ffh then
			cursym.info$p = 0;
		if (curInfo$p := cursym.info$p) = 0 then
			call createInfo(0, UNK$T);
		tx1Item.dataw(1) = curInfo$p - botInfo;
	    end;
	    call mapLtoT2;
	end;
	else if (tx1Item.type = L$XREFINFO and XREF)
	      or (tx1Item.type = L$XREF and (IXREF or XREF or SYMBOLS)) then
	do;
	    tx1Item.dataw(1) = curStmtNum;
	    call fwrite(.xrfFile, .tx1Item, 5);
	end;
	else if tx1Item.type = L$LINEINFO then
	do;
	    if b88B3 then
		call wrTx2File(.linfo, 7);
	    call move(7, .tx1Item, .linfo);
	    linfo.type = T2$LINEINFO;
	    b88B3 = TRUE;
	end;
	else if (tx1Aux2 and 20h) <> 0 then
	    call mapLtoT2;
	else if tx1Item.type = L$STMTCNT and tx1Item.dataw(0) = 0 then
	    call mapLtoT2;
	else if tx1Item.type <> L$XREF and tx1Item.type <> L$XREFINFO then
	    goto done;
    end;
done:	if tx1Item.type = L$VARIABLE then
	curSymbol$p = tx1Item.dataw(0);
    if (tx1Aux2 and 10h) <> 0 then
	tx1Item.dataw(0) = tx1Item.dataw(0) + botInfo;
end;

matchTx2Item: PROCEDURE(arg1b) BYTE public;
    declare arg1b byte;
    call getTx1Item;
    if tx1Item.type = arg1b then
	return TRUE;
    else
    do;
	call setRegetTx1Item;
	return FALSE;
    end;
end;

notMatchTx2Item: PROCEDURE(arg1b) BYTE public;
    declare arg1b byte;
    return not matchTx2Item(arg1b);
end;

matchTx2AuxFlag: PROCEDURE(arg1b) BYTE public;
    declare arg1b byte;

    call getTx1Item;
    if (tx1Aux2 and arg1b) <> 0 then
	return TRUE;
    else
    do;
	call setRegetTx1Item;
	return FALSE;
    end;
end;


sub$4599: PROCEDURE public;
    do while 1;
	call getTx1Item;
	if (tx1Aux2 and 80h) = 0 then
	    goto done;
	else if tx1Item.type = L$RPAREN then
	    goto done;
    end;
done:
    call setRegetTx1Item;
end;

resyncRPAREN: PROCEDURE public;
    call sub$4599;
    if matchTx2Item(L$RPAREN) then
	;
end;

expectRPAREN: PROCEDURE(arg1b) public;
    declare arg1b byte;
    if notMatchTx2Item(L$RPAREN) then
    do;
	call wrTx2ExtError(arg1b);
	call resyncRPAREN;
    end;
end;

sub$45E0: PROCEDURE public;
    call findInfo;
    if curInfo$p = 0 or getType = LIT$T then
	call createInfo(256, BYTE$T);
    call optWrXrf;
    if getType <> BUILTIN$T then
	if  not testInfoFlag(F$LABEL) then
	    if not testInfoFlag(F$DECLARED) then
	    do;
		call wrTx2ExtError(105);	/* UNDECLARED IDENTIFIER */
		call setInfoFlag(F$DECLARED);
	    end;
end;

sub$4631: PROCEDURE public;
    declare tmp address;

    tmp = curInfo$p;
    call findMemberInfo;
    if curInfo$p = 0 then
    do;
	call createInfo(0, BYTE$T);
	call setParentOffset(tmp);
	call setInfoFlag(F$MEMBER);
    end;
    if not testInfoFlag(F$LABEL) then
	if not testInfoFlag(F$DECLARED) then
	do;
	    call wrTx2ExtError(112);	/* UNDECLARED STRUCTURE MEMBER */
	    call setInfoFlag(F$DECLARED);
	end;
    call optWrXrf;
end;

sub$467D: PROCEDURE public;
    call sub$45E0;
    if matchTx2Item(L$PERIOD) then
	if getType <> STRUCT$T then
	    call wrTx2ExtError(110);	/* INVALID LEFT OPERAND OF QUALIFICATION, NOT A STRUCTURE */
	else if notMatchTx2Item(L$VARIABLE) then
	    call wrTx2ExtError(111);	/* INVALID RIGHT OPERAND OF QUALIFICATION, NOT IDENTIFIER */
	else
	    call sub$4631;
end;

wrAtFile: PROCEDURE(buf, cnt) public;
    declare (buf, cnt) address;
    call fwrite(.atFile, buf, cnt);
end;

wrAtFileByte: PROCEDURE(arg1b) public;
    declare arg1b byte;
    call wrAtFile(.arg1b, 1);
end;

wrAtFileWord: PROCEDURE(arg1w) public;
    declare arg1w address;
    call wrAtFile(.arg1w, 2);
end;
end;
src/plm1c.plm
plm1c: DO;
$include(:f2:plm1c.ipx)

getRestrictedExpr: PROCEDURE public;
	declare rValue address,
		use8bit byte;


	simpleUExpr: PROCEDURE;
	    if matchTx2Item(L$NUMBER) then
		rValue = tx1Item.dataw(0);
	    else
	    do;
		if matchTx2Item(L$VARIABLE) then
		    call sub$45E0;
		call wrTx2ExtError(151);	/* INVALID OPERAND IN RESTRICTED EXPRESSION */
		rValue = 0;
	    end;
	    use8bit = use8bit and (high(rValue) = 0);
	end;

	simpleNExpr: PROCEDURE;
	    if matchTx2Item(L$MINUSSIGN) then
	    do;
		call simpleUExpr;
		if use8bit then 
		    rValue = - low(rValue);
		else
		    rValue = - rValue;
	    end;
	    else
		call simpleUExpr;
	end;

	evalSimpleExpr: PROCEDURE;
	    declare p address;
	    call simpleNExpr;
	    p = rValue;
	    do while 1;
		if matchTx2Item(L$PLUSSIGN) then
		do;
		    call simpleNExpr;
		    if use8bit then
		    do;
			p = (p := p + rValue) and 0ffh;
			
		    end;
		    else 
			p =  p + rValue;
		end;
		else if matchTx2Item(L$MINUSSIGN) then
		do;
		    call simpleNExpr;
		    if use8bit then
			p = (p := p - rValue) and 0ffh;
		    else
			p =  p - rValue;
		end;
		else
		    goto done;
	    end;
	done:
	    rValue = p;
	end;


	getRestrictedArrayIndex: PROCEDURE;
	    use8bit = TRUE;
	    if not(testInfoFlag(F$ARRAY)) then
		call wrTx2ExtError(149);	/* INVALID SUBSCRIPTING IN RESTRICTED REFERENCE */
	    call evalSimpleExpr;
	    call expectRPAREN(150);	/* MISSING ') ' AT END OF RESTRICTED SUBSCRIPT */
	end;

	getRestrictedVar: PROCEDURE;
	    if notMatchTx2Item(L$VARIABLE) then
	    do;
		call wrTx2Error(147);	/* MISSING IDENTIFIER FOLLOWING DOT OPERATOR */
		call sub$4599;
		return;
	    end;
	    call sub$45E0;
	    varInfoOffset = curInfo$p;
	    if getType = BUILTIN$T then
	    do;
		call wrTx2Error(123);	/* INVALID DOT OPERAND, BUILT-IN PROCEDURE ILLEGAL */
		call sub$4599;
		return;
	    end;
	    if matchTx2Item(L$LPAREN) then
	    do;
		call getRestrictedArrayIndex;
		varArrayIndex = rValue;
	    end;
	    if matchTx2Item(L$PERIOD) then
	    do;
		curInfo$p = varInfoOffset;
		if getType <> STRUCT$T then
		do;
		    call wrTx2ExtError(148);	/* INVALID QUALIFICATION IN RESTRICTED REFERENCE */
		    call sub$4599;
		    return;
		end;
		if notMatchTx2Item(L$VARIABLE) then
		do;
		    call wrTx2Error(147);	/* MISSING IDENTIFIER FOLLOWING DOT OPERATOR */
		    varInfoOffset = varInfoOffset - botInfo;
		    return;
		end;
		call sub$4631;
		varInfoOffset = curInfo$p;
		if matchTx2Item(L$LPAREN) then
		do;
		    call getRestrictedArrayIndex;
		    varNestedArrayIndex = rValue;
		end;
	    end;
	    varInfoOffset = varInfoOffset - botInfo;
	end;

    varInfoOffset, varArrayIndex, varNestedArrayIndex, varVal = 0;
    if matchTx2Item(L$PERIOD) then
    do;
	call getRestrictedVar;
	if matchTx2Item(L$PLUSSIGN) then
	    ;
	else if matchTx2Item(L$MINUSSIGN) then
	    call setRegetTx1Item;
	else
	    return;
	use8bit = FALSE;
	call evalSimpleExpr;
	varVal = rValue;
    end;
    else if matchTx2Item(L$RPAREN) then
	call setRegetTx1Item;
    else
    do;
	use8bit = TRUE;
	call evalSimpleExpr;
	varVal = rValue;
    end;
end;

parseDataItems: PROCEDURE(arg1w) ADDRESS public;
    declare arg1w address;
    declare p address;

    p = 0;
    call wrAtFileByte(ATI$DHDR);
    call wrAtFileWord(arg1w - botInfo);
    call wrAtFileWord(curStmtNum);
    do while 1;
	if matchTx2Item(L$STRING) then
	do;
	    call wrAtFileByte(ATI$STRING);
	    call wrAtFileWord(tx1Item.dataw(0));
	    call wrAtFile(.tx1Item.dataw(1), tx1Item.dataw(0));
	    curInfo$p = arg1w;
	    if getType = ADDRESS$T then 
		p = p + (tx1Item.dataw(0) + 1) / 2;
	    else 
		p = p + tx1Item.dataw(0);
	end;
	else
	do;
	    call getRestrictedExpr;
	    call wrAtFileByte(ATI$DATA);
	    call wrAtFile(.varInfoOffset, 8);
	    p = p + 1;
	end;
	if notMatchTx2Item(L$COMMA) then
	    goto done;
	else if matchTx2Item(L$RPAREN) then
	do;
	    call wrTx2Error(151);	/* INVALID OPERAND IN RESTRICTED EXPRESSION */
	    call setRegetTx1Item;
	    goto done;
	end;
    end;
done:
    call wrAtFileByte(ATI$END);
    call expectRPAREN(152);	/* MISSING ') ' AFTER CONSTANT LIST */
    curInfo$p = arg1w;;
    return p;
end;

resetStacks: PROCEDURE public;
    parseSP, exSP, operatorSP, stSP = 0;
end;

pushParseWord: PROCEDURE(arg1w) public;
    declare arg1w address;
    if parseSP = 63h then
	call fatalError(119);	/* LIMIT EXCEEDED: PROGRAM TOO COMPLEX */
    parseStack(parseSP := parseSP + 1) = arg1w;
end;


popParseStack: PROCEDURE public;
    if parseSP = 0 then
	call fatalError(159);	/* COMPILER ERROR: PARSE STACK UNDERFLOW */
    parseSP = parseSP - 1;
end;


pushParseByte: PROCEDURE(arg1b) public;
    declare arg1b byte;
    call pushParseWord(arg1b);
end;

exprPush3: PROCEDURE(arg1b, arg2b, arg3w);
    declare (arg1b, arg2b) byte, arg3w address;
    if exSP = 63h then
	call fatalError(121);	/* LIMIT EXCEEDED: EXPRESSION TOO COMPLEX */
    ex1Stack(exSP := exSP + 1) = arg1b;
    ex2Stack(exSP) = arg2b;
    ex3Stack(exSP) = arg3w;
end;

exprPop: PROCEDURE public;
    if exSP = 0 then
	call fatalError(160);	/* COMPILER ERROR: OPERAND STACK UNDERFLOW */
    exSP = exSP - 1;
end;


swapOperandStack: PROCEDURE;
    declare i address, (op1, op2) byte, op3 address;

    if exSP < 2 then
	call fatalError(161);	/* COMPILER ERROR: ILLEGAL OPERAND STACK EXCHANGE */
    i = exSP - 1;
    op1 = ex1Stack(exSP);
    op2 = ex2Stack(exSP);
    op3 = ex3Stack(exSP);
    ex1Stack(exSP) = ex1Stack(i);
    ex2Stack(exSP) = ex2Stack(i);
    ex3Stack(exSP) = ex3Stack(i);
    ex1Stack(i) = op1;
    ex2Stack(i) = op2;
    ex3Stack(i) = op3;
end;

exprPush2: PROCEDURE(arg1b, arg2w) public;
    declare arg1b byte, arg2w address;
    call exprPush3(arg1b, 0, arg2w);
end;

stmtPush3: PROCEDURE(arg1b, arg2b, arg3w);
    declare (arg1b, arg2b) byte, arg3w address;
    if stSP = 299 then
	call fatalError(122);	/* LIMIT EXCEEDED: PROGRAM TOO COMPLEX	 */
    st1Stack(stSP := stSP + 1) = arg1b;
    st2Stack(stSP) = arg2b;
    st3Stack(stSP) = arg3w;
end;

moveExpr2Stmt: PROCEDURE public;
    call stmtPush3(ex1Stack(exSP), ex2Stack(exSP), ex3Stack(exSP));
    call exprPop;
end;

pushOperator: PROCEDURE(arg1b) public;
    declare arg1b byte;
    if operatorSP = 31h then
	call fatalError(120);	/* LIMIT EXCEEDED: EXPRESSION TOO COMPLEX */
    operatorStack(operatorSP := operatorSP + 1) = arg1b;
end;


popOperatorStack: PROCEDURE public;
    if operatorSP = 0 then
	call fatalError(162);	/* COMPILER ERROR: OPERATOR STACK UNDERFLOW */
    operatorSP = operatorSP - 1;
end;


exprMakeNode: PROCEDURE(arg1b, arg2b) public;
    declare (arg1b, arg2b) byte;
    declare w address, (j, i) byte;

    w = stSP + 1;

    if exSP < arg2b then
	call fatalError(163);	/* COMPILER ERROR: GENERATION FAILURE  */
    j = exSP - arg2b + 1;
    i = arg2b;
    do while i <> 0;
	call stmtPush3(ex1Stack(j), ex2Stack(j), ex3Stack(j));
	i = i - 1;
	j = j + 1;
    end;

    exSP = exSP - arg2b;
    if arg2b = 0 then
	w = 0;
    call exprPush3(arg1b, arg2b, w);
end;

acceptOpAndArgs: PROCEDURE public;
    declare i byte;

    i = operatorStack(operatorSP);
    if i = I$NOT or i = I$UNARYMINUS then
	call exprMakeNode(i, 1);
    else
	call exprMakeNode(i, 2);
    call popOperatorStack;
end;


sub$4CC2: PROCEDURE;
    declare p address;
    if testInfoFlag(F$MEMBER) then
    do;
	p = curInfo$p;
	curInfo$p = getParentOffset;
	call exprPush2(I$VARIABLE, curInfo$p);
	call exprPush2(I$VARIABLE, p);
	call exprMakeNode(I$MEMBER, 2);
    end;
    else
	call exprPush2(I$VARIABLE, curInfo$p);
end;

sub$4CFD: PROCEDURE(arg1w) public;
    declare arg1w address;

    curInfo$p = arg1w;
    if testInfoFlag(F$BASED) then
    do;
	curInfo$p = getBaseOffset;
	call sub$4CC2;
	curInfo$p = arg1w;
	call swapOperandStack;
	call exprMakeNode(I$BASED, 2);
    end;
end;

sub$4D2C: PROCEDURE public;
    call sub$4CC2;
    call sub$4CFD(curInfo$p);
end;


sub$4D38: PROCEDURE public;
    if getDataType = 0 then
	call wrTx2ExtError(131);	/* ILLEGAL REFERENCE TO UNTYPED PROCEDURE */
end;


getCallArgCnt: PROCEDURE BYTE public;
    declare (i, j, k) byte;
    i = parseStack(parseSP);
    j = operatorStack(operatorSP);
    call popParseStack;
    call popOperatorStack;
    if i = j then
	return i;
    if i < j then
    do;
	call wrTx2ExtError(153);	/* INVALID NUMBER OF ARGUMENTS IN CALL, TOO MANY */
	k = j - i;
	do while k <> 0;
	    call exprPop;
	    k = k - 1;
	end;
    end;
    else
    do;
	call wrTx2ExtError(154);	/* INVALID NUMBER OF ARGUMENTS IN CALL, TOO FEW */
	k = i - j;
	do while k <> 0;
	    call exprPush2(I$NUMBER, 0);
	    k = k - 1;
	end;
    end;
    return i;
end;

sub$4DCF: PROCEDURE(arg1b) public;
    declare arg1b byte;

    if notMatchTx2Item(L$LPAREN) then
    do;
	call wrTx2ExtError(124);	/* MISSING ARGUMENTS FOR BUILT-IN PROCEDURE */
	call exprPush2(I$NUMBER, 0);
    end;
    else
    do;	if notMatchTx2Item(L$VARIABLE) then
	do;
	    call wrTx2Error(125);	/* ILLEGAL ARGUMENT FOR BUILT-IN PROCEDURE */
	    call exprPush2(I$NUMBER, 0);
	end;
	else
	do;
	    call sub$45E0;
	    if matchTx2Item(L$LPAREN) then
	    do;
		if testInfoFlag(F$ARRAY) then
		do;
			call resyncRPAREN;
			if matchTx2Item(L$RPAREN) then
			do;
				if arg1b = I$LENGTH or arg1b = I$LAST then
				do;
					call wrTx2ExtError(125); /*  ILLEGAL ARGUMENT FOR BUILT-IN PROCEDURE */
					call exprPush2(I$NUMBER, 0);
				end;
				else 
					call exprPush2(arg1b, curInfo$p);
				return;
			end;
		end;
		else 
			call wrTx2ExtError(127);	/* INVALID SUBSCRIPT ON NON-ARRAY */
	    end; 
	    if matchTx2Item(L$PERIOD) then
	    do;
		if getType <> STRUCT$T then
			call wrTx2ExtError(110); /* INVALID LEFT OPERAND OF QUALIFICATION, NOT A STRUCTURE */
		else if notMatchTx2Item(L$VARIABLE) then
			call wrTx2ExtError(111); /* INVALID RIGHT OPERAND OF QUALIFICATION, NOT IDENTIFIER */
		else
			call sub$4631;
	    end;
	    if matchTx2Item(L$LPAREN) then
	    do;
		if testInfoFlag(F$ARRAY) then
		do;
			call resyncRPAREN;
			if arg1b = I$LENGTH or arg1b = I$LAST then
			do;
				call wrTx2ExtError(125);	/* ILLEGAL ARGUMENT FOR BUILT-IN PROCEDURE */
				call exprPush2(I$NUMBER, 0);
			end;
			else 
				call exprPush2(arg1b, curInfo$p);
		end;
		else
		do;
			call wrTx2ExtError(127);	/* INVALID SUBSCRIPT ON NON-ARRAY */
			call exprPush2(I$NUMBER, 0);
		end;
	    end;
	    else if arg1b = I$LENGTH or arg1b = I$LAST then
	    do;
		if testInfoFlag(F$ARRAY) then 
			call exprPush2(arg1b, curInfo$p);
		else
		do;
			call wrTx2ExtError(157);
				/* INVALID ARGUMENT, ARRAY REQUIRED FOR LENGTH OR LAST */
			call exprPush2(I$NUMBER, 0);
		end;
	    end;
	    else
	    do;
		call exprPush2(arg1b, curInfo$p);
		call exprPush2(I$LENGTH, curInfo$p);
		call exprMakeNode(I$STAR, 2);
	    end;
	end;
	call expectRPAREN(126);	/* MISSING ') ' AFTER BUILT-IN PROCEDURE ARGUMENT LIST */
    end;
end;


mkIndexNode: PROCEDURE public;
    declare (p, q) address;
    declare i byte, r address;

    curInfo$p = ex3Stack(exSP-1);	/* get var */
    if ex1Stack(exSP) = I$PLUSSIGN then
    do;	/* see if index is of form expr + ?? */
	p = ex3Stack(exSP) + 1;
	if st1Stack(p) = I$NUMBER then
	do;	/* expr + number */
	    ex1Stack(exSP) = st1Stack(q := p - 1);	/* pull up expression */
	    ex2Stack(exSP) = st2Stack(q);
	    ex3Stack(exSP) = st3Stack(q);
	    call exprPush2(I$NUMBER, st3Stack(p));	/* and get the number as an offset */
	end;
	else 
	    call exprPush2(I$NUMBER, 0);		/* no simple 0 offset */
    end;
    else
	call exprPush2(I$NUMBER, 0);			/* 0 offset */

    if getType = ADDRESS$T then		/* simple word array */
	i = I$WORDINDEX;
    else
    do;
	i = I$BYTEINDEX;
	if getType = STRUCT$T then
	do;	/* scale structure index */
	    r = exSP - 1;					/* the index expr (ex offset) */
	    call exprPush3(ex1Stack(r), ex2Stack(r), ex3Stack(r));	/* calc dimension */
	    call exprPush2(I$SIZE, curInfo$p);
	    call exprMakeNode(I$STAR, 2);
	    ex1Stack(r) = ex1Stack(exSP);	/* replace index expr */
	    ex2Stack(r) = ex2Stack(exSP);
	    ex3Stack(r) = ex3Stack(exSP);
	    call exprPop;						/* waste intermediate */
	end;
    end;
    call exprMakeNode(i, 3);
end;


parsePortNum: PROCEDURE(arg1b) public;
    declare arg1b byte;
    declare p address;

    p = 0;
    if matchTx2Item(L$LPAREN) then
    do;
	if matchTx2Item(L$NUMBER) then
	do;
	    if tx1Item.dataw(0) <= 255 then
		p = tx1Item.dataw(0);
	    else
		call wrTx2ExtError(106);	/* INVALID INPUT/OUTPUT PORT NUMBER */
	end;
	else
	    call wrTx2ExtError(107);/* ILLEGAL INPUT/OUTPUT PORT NUMBER, NOT NUMERIC CONSTANT */
	call expectRPAREN(108);	/* MISSING ') ' AFTER INPUT/OUTPUT PORT NUMBER */
    end;
    else
	call wrTx2ExtError(109);	/* MISSING INPUT/OUTPUT PORT NUMBER */

    call exprPush2(arg1b, p);
end;


sub$50D5: PROCEDURE public;
    declare p address, i byte;

    p = curInfo$p;
    if (curInfo$p := curProcInfo$p) = 0 then
	i = FALSE;
    else
	i = testInfoFlag(F$REENTRANT);
    curInfo$p = p;
    if testInfoFlag(F$REENTRANT) and i then
	return;
    if not testInfoFlag(F$DECLARED) then 
	call wrTx2ExtError(169);		/* ILLEGAL FORWARD CALL */
    else if not testInfoFlag(F$DEFINED) then
	call wrTx2ExtError(170);		/* ILLEGAL RECURSIVE CALL */
end;


sub$512E: PROCEDURE(arg1w) BYTE public;
    declare arg1w address, c byte;
    if (c := ex1Stack(arg1w)) = I$OUTPUT or c = I$STACKPTR or c = I$BASED then
	return FALSE;
    if c = I$VARIABLE then 
	curInfo$p = ex3Stack(arg1w);
    else if c = I$BYTEINDEX or c = I$WORDINDEX then
	curInfo$p = st3Stack(ex3Stack(arg1w));
    else if c = I$MEMBER then
    do;
	if st1Stack(ex3Stack(arg1w)) = I$VARIABLE then
	    curInfo$p = st3Stack(ex3Stack(arg1w));
	else
	    curInfo$p = st3Stack(st3Stack(ex3Stack(arg1w)));
    end;
    else
	return TRUE;
    if testInfoFlag(F$DATA) then
	call wrTx2ExtError(173);
    /*  INVALID LEFT SIDE OF ASSIGNMENT: VARIABLE DECLARED WITH DATA ATTRIBUTE */
    return FALSE;
end;

sub$521B: PROCEDURE public;
    declare (q, p) address;

    p = curSymbol$p;
    curSymbol$p = 0;
    call createInfo(256, BYTE$T);
    call setInfoFlag(F$DATA);
    curSymbol$p = p;
    call exprPush2(I$VARIABLE, curInfo$p);
    call setInfoFlag(F$ARRAY);
    call setInfoFlag(F$STARDIM);
    q = parseDataItems(curInfo$p);
    call setDimension(q);
end;
end;
src/plm1d.plm
plm1d: DO;
$include(:f2:plm1d.ipx)

exprParse0: PROCEDURE public;
    call pushOperator(0);
    if matchTx2Item(L$VARIABLE) then
    do;
	call pushParseByte(1);
	call sub$45E0;
	call pushParseByte(11);
    end;
    else
    do;
	call pushParseByte(3);
	call pushParseByte(4);
    end;
end;

exprParse1: PROCEDURE public;
    if matchTx2Item(L$COLONEQUALS) then
    do;
	if sub$512E(exSP) then
	do;
	    call wrTx2ExtError(ERR128);	/* INVALID LEFT-HAND OPERAND OF ASSIGNMENT */
	    call exprPop;
	end;
	else
	    call pushParseByte(2);
	call pushParseByte(3);
	call pushParseByte(4);
    end;
    else
    do;
	if ex1Stack(exSP) = I$OUTPUT then
	do;
	    call wrTx2Error(ERR130);	/*  ILLEGAL REFERENCE TO OUTPUT FUNCTION */
	    call exprPop;
	    call exprPush2(I$NUMBER, 0);
	end;
	call pushParseByte(3);
    end;
end;

exprParse2: PROCEDURE public;
    call exprMakeNode(I$COLONEQUALS, 2);
end;


exprParse3: PROCEDURE public;
    if matchTx2AuxFlag(64) then
    do;
	do while b4172(tx1Aux1) <= b4172(operatorStack(operatorSP));
	    if b4172(tx1Aux1) = 50 and b4172(operatorStack(operatorSP)) = 50 then
		call wrTx2ExtError(ERR218);	/* ILLEGAL SUCCESSIVE USES OF RELATIONAL OPERATORS */
	    call acceptOpAndArgs;
	end;
	call pushOperator(tx1Aux1);
	call pushParseByte(3);
	call pushParseByte(4);
    end;
    else
    do;
	do while operatorStack(operatorSP) <> 0;
	    call acceptOpAndArgs;
	end;
	call popOperatorStack;
    end;
end;


exprParse4: PROCEDURE public;
    if matchTx2Item(L$MINUSSIGN) then
	call pushOperator(I$UNARYMINUS);
    else if matchTx2Item(L$NOT) then
	call pushOperator(I$NOT);
    call pushParseByte(5);
end;

exprParse5: PROCEDURE public;
    declare (p, q) address; 
    declare bpair based q(2) byte;

    if matchTx2Item(L$VARIABLE) then
    do;
	call sub$45E0;
	if getType = BUILTIN$T and getBuiltinId = 9 then
	do;	 /* 9 -> OUTPUT */
	    call wrTx2ExtError(ERR130);	/* ILLEGAL REFERENCE TO OUTPUT FUNCTION */
	    if matchTx2Item(L$LPAREN) then
		call resyncRPAREN;
	    call exprPush2(I$NUMBER, 0);
	end;
	else 
	    call pushParseByte(11);
    end;
    else if matchTx2Item(L$NUMBER) then
	call exprPush2(I$NUMBER, tx1Item.dataw(0));
    else if matchTx2Item(L$STRING) then
    do;
	if tx1Item.dataw(0) = 1 then
	    p = low(tx1Item.dataw(1));
	else if tx1Item.dataw(0) = 2 then
	do;
	    q = .p;
	    bpair(0) = high(tx1Item.dataw(1));
	    bpair(1) = low(tx1Item.dataw(1));
	end;
	else
	do;
	    call wrTx2ExtError(ERR100);	/* INVALID STRING CONSTANT IN EXPRESSION  */
	    p = 0;
	end;
	call exprPush2(I$NUMBER, p);
    end;
    else if matchTx2Item(L$LPAREN) then
    do;
	call pushParseByte(6);
	call pushParseByte(0);
    end;
    else if matchTx2Item(L$PERIOD) then
    do;
	if matchTx2Item(L$VARIABLE) then
	do;
	    call pushParseByte(7);
	    call pushParseByte(8);
	end;
	else if matchTx2Item(L$LPAREN) then
	do;
	    call sub$521B;
	    call pushParseByte(7);
	end;
	else
	do;
	    call wrTx2ExtError(ERR101);	/* INVALID ITEM FOLLOWS DOT OPERATOR */
	    call pushParseByte(5);
	end;
    end;
    else
    do;
	call wrTx2ExtError(ERR102);	/* MISSING PRIMARY OPERAND */
	call exprPush2(I$NUMBER, 0);
    end;
end;


exprParse6: PROCEDURE public;
    call expectRPAREN(ERR103);	/* MISSING ') ' AT END OF SUBEXPRESSION */
end;

exprParse7: PROCEDURE public;
    call exprMakeNode(I$ADDRESSOF, 1);
end;


exprParse8: PROCEDURE public;
    call sub$45E0;
    if getType = BUILTIN$T then
    do;
	call popParseStack;
	call wrTx2ExtError(ERR123);	/* INVALID DOT OPERAND, BUILT-IN PROCEDURE ILLEGAL */
	if matchTx2Item(L$LPAREN) then
	    call resyncRPAREN;
	call exprPush2(I$NUMBER, 0);
    end;
    else
    do;
	call exprPush2(I$VARIABLE, curInfo$p);
	if getType = PROC$T then
	do;
	    if matchTx2Item(L$LPAREN) then
	    do;
		call wrTx2ExtError(ERR104);	/* ILLEGAL PROCEDURE INVOCATION WITH DOT OPERATOR */
		call resyncRPAREN;
	    end;
	end;
	else
	do;
	    if getType = LABEL$T then
		call wrTx2ExtError(ERR158);	/* INVALID DOT OPERAND, LABEL ILLEGAL */
	    call pushParseByte(9);
	end;
    end;
end;

exprParse9: PROCEDURE public;
    call pushParseWord(curInfo$p);
    call pushParseByte(0ah);
    if matchTx2Item(L$LPAREN) then
    do;
	if not testInfoFlag(F$ARRAY) then
	    call wrTx2ExtError(ERR127);	/* INVALID SUBSCRIPT ON NON-ARRAY */
	call pushParseByte(13h);
    end;
end;

exprParse10: PROCEDURE public;
    declare p address;
    p = parseStack(parseSP);
    call popParseStack;
    if matchTx2Item(L$PERIOD) then
    do;
	curInfo$p = p;
	if getType <> STRUCT$T then
	    call wrTx2ExtError(ERR110);	/* INVALID LEFT OPERAND OF QUALIFICATION, NOT A STRUCTURE */
	else if notMatchTx2Item(L$VARIABLE) then
	    call wrTx2ExtError(ERR111);	/* INVALID RIGHT OPERAND OF QUALIFICATION, NOT IDENTIFIER */
	else
	do;
	    call sub$4631;
	    call exprPush2(I$VARIABLE, curInfo$p);
	    call pushParseWord(p);
	    call pushParseByte(14);
	    if matchTx2Item(L$LPAREN) then
		call pushParseByte(19);
	end;
    end;
    else 
	call sub$4CFD(p);
end;

exprParse11: PROCEDURE public;
    declare p address;
    if getType = BUILTIN$T then
    do;
	p = builtinsMap(getBuiltinId);
	if p = I$INPUT or p = I$OUTPUT then
	    call parsePortNum(p);
	else if p = I$LENGTH or p = I$LAST or p = I$SIZE then
	    call sub$4DCF(p);
	else
	do;
	    call pushParseWord(p);
	    call pushParseWord(getParamCnt);
	    call pushOperator(0);
	    call pushParseByte(17);
	    call sub$4D38;
	    if matchTx2Item(L$LPAREN) then
	    do;
		call pushParseByte(15);
		call pushParseByte(0);
	    end;
	end;
    end;
    else if getType = PROC$T then
    do;
	call sub$50D5;
	call exprPush2(I$VARIABLE, curInfo$p);
	call sub$4D38;
	call pushParseWord(getParamCnt);
	call pushOperator(0);
	call pushParseByte(16);
	if matchTx2Item(L$LPAREN) then
	do;
	    call pushParseByte(15);
	    call pushParseByte(0);
	end;
    end;
    else
	call pushParseByte(12);
end;

exprParse12: PROCEDURE public;
    call exprPush2(I$VARIABLE, curInfo$p);
    call pushParseWord(curInfo$p);
    if getType = LABEL$T then
	call wrTx2ExtError(ERR132);	/* ILLEGAL USE OF LABEL */
    call pushParseByte(13);
    if testInfoFlag(F$ARRAY) then
    do;
	if matchTx2Item(L$LPAREN) then
	    call pushParseByte(19);
	else
	    call wrTx2ExtError(ERR133);	/* ILLEGAL REFERENCE TO UNSUBSCRIPTED ARRAY */
    end;
    else if matchTx2Item(L$LPAREN) then
    do;
	call wrTx2ExtError(ERR127);	 /* INVALID SUBSCRIPT ON NON-ARRAY */
	call pushParseByte(19);
    end;
end;

exprParse13: PROCEDURE public;
    declare p address;

    p, curInfo$p = parseStack(parseSP);
    call popParseStack;
    if matchTx2Item(L$PERIOD) then
    do;
	if getType <> STRUCT$T then
	    call wrTx2ExtError(ERR110);	/* INVALID LEFT OPERAND OF QUALIFICATION, NOT A STRUCTURE */
	else if notMatchTx2Item(L$VARIABLE) then
	    call wrTx2ExtError(ERR111);	/* INVALID RIGHT OPERAND OF QUALIFICATION, NOT IDENTIFIER */
	else
	do;
	    call sub$4631;
	    call exprPush2(I$VARIABLE, curInfo$p);
	    call pushParseWord(p);
	    call pushParseByte(14);
	    if testInfoFlag(F$ARRAY) then
	    do;
		if matchTx2Item(L$LPAREN) then
			call pushParseByte(19);
		else
			call wrTx2ExtError(ERR134);	/* ILLEGAL REFERENCE TO UNSUBSCRIPTED MEMBER ARRAY */
	    end;
	    else if matchTx2Item(L$LPAREN) then
		call wrTx2ExtError(ERR127);	/* INVALID SUBSCRIPT ON NON-ARRAY */
	end;
    end;
    else
    do;
	if getType = STRUCT$T then
	    call wrTx2ExtError(ERR135);	/* ILLEGAL REFERENCE TO AN UNQUALIFIED STRUCTURE */
	call sub$4CFD(p);
    end;
end;

exprParse14: PROCEDURE public;
    declare p address;
    p = parseStack(parseSP);
    call popParseStack;
    call exprMakeNode(I$MEMBER, 2);
    call sub$4CFD(p);
end;


exprParse15: PROCEDURE public;
    operatorStack(operatorSP) = operatorStack(operatorSP) + 1;
    if matchTx2Item(L$COMMA) then
    do;
	call pushParseByte(0fh);
	call pushParseByte(0);
    end;
    else
	call expectRPAREN(ERR113);	/* MISSING ') ' AT END OF ARGUMENT LIST */
end;


exprParse16: PROCEDURE public;
    call exprMakeNode(I$CALL, getCallArgCnt + 1);
end;


exprParse17: PROCEDURE public;
    declare (i, j) byte;
    j = getCallArgCnt;
    i = parseStack(parseSP);
    call popParseStack;
    call exprMakeNode(i, j);
end;


exprParse18: PROCEDURE public;
    call exprMakeNode(I$CALLVAR, operatorStack(operatorSP)+1);
    call popOperatorStack;
end;


exprParse19: PROCEDURE public;
    call pushParseByte(20);
    call pushParseByte(0);
end;


exprParse20: PROCEDURE public;
    if matchTx2Item(L$COMMA) then
    do;
	call wrTx2ExtError(ERR114);	/* INVALID SUBSCRIPT, MULTIPLE SUBSCRIPTS ILLEGAL */
	call sub$4599;
    end;
    call expectRPAREN(ERR115);	/* MISSING ') ' AT END OF SUBSCRIPT */
    call mkIndexNode;
end;

exprParse: PROCEDURE public;
    declare p address;
    do while parseSP <> 0;
	p = parseStack(parseSP);
	parseSP = parseSP - 1;
	do case p;
	    call exprParse0;
	    call exprParse1;
	    call exprParse2;
	    call exprParse3;
	    call exprParse4;
	    call exprParse5;
	    call exprParse6;
	    call exprParse7;
	    call exprParse8;
	    call exprParse9;
	    call exprParse10;
	    call exprParse11;
	    call exprParse12;
	    call exprParse13;
	    call exprParse14;
	    call exprParse15;
	    call exprParse16;
	    call exprParse17;
	    call exprParse18;
	    call exprParse19;
	    call exprParse20;
	end;
    end;
end;
END;
src/plm1e.plm
plm1e: DO;
$include(:f2:plm1e.ipx)

sub$5945: PROCEDURE BYTE public;
	declare i byte;

	call resetStacks;
	i = 0;
	do while 1;
		if notMatchTx2Item(L$VARIABLE) then
		do;
			call wrTx2ExtError(ERR128);	/* INVALID LEFT-HAND OPERAND OF ASSIGNMENT */
			return 0;
		end;
		call sub$45E0;
		call pushParseByte(11);
		call exprParse;
		if sub$512E(exSP) then
		do;
			call wrTx2ExtError(ERR128);	/* INVALID LEFT-HAND OPERAND OF ASSIGNMENT */
			call exprPop;
		end;
		else
			i = i + 1;
		if notMatchTx2Item(L$COMMA) then
			goto done;
	end;
done:	
	if matchTx2Item(L$EQ) then
	do;
		call pushParseByte(0);
		call exprParse;
		if i <> 0 then
		do;
			call exprMakeNode(I$COLONEQUALS, i + 1);
			call moveExpr2Stmt;
			markedStSP = stSP;
			return TRUE;
		end;
		else
			return FALSE;
	end;
	else
	do;
		call wrTx2ExtError(ERR116);	/* MISSING '=' IN ASSIGNMENT STATEMENT */
		return FALSE;
	end;
end;

sub$59D4: PROCEDURE BYTE public;
	declare i byte;
	call resetStacks;
	if notMatchTx2Item(L$VARIABLE) then
	do;
		call wrTx2ExtError(ERR117);	/* MISSING PROCEDURE NAME IN CALL STATEMENT */
		return FALSE;
	end;
	call sub$467D;
	i = getType;
	if i = PROC$T then
	do;
		call sub$50D5;
		if getDataType <> 0 then
			call wrTx2ExtError(ERR129);	/* ILLEGAL 'CALL' WITH TYPED PROCEDURE */
		call exprPush2(I$VARIABLE, curInfo$p);
		call pushParseWord(getParamCnt);
		call pushOperator(0);
		call pushParseByte(16);
		if matchTx2Item(L$LPAREN) then
		do;
			call pushParseByte(15);
			call pushParseByte(0);
		end;
	end;
	else if i = BUILTIN$T then
	do;
		if getDataType <> 0 then
		do;
			call wrTx2ExtError(ERR129);	/* ILLEGAL 'CALL' WITH TYPED PROCEDURE */
			return FALSE;
		end;
		call pushParseWord(builtinsMap(getBuiltinId));
		call pushParseWord(getParamCnt);
		call pushOperator(0);
		call pushParseByte(17);
		if matchTx2Item(L$LPAREN) then
		do;
			call pushParseByte(15);
			call pushParseByte(0);
		end;
	end;
	else
	do;
	    if i <> ADDRESS$T or testInfoFlag(F$ARRAY) then
	    do;
		call wrTx2ExtError(ERR118);	/* INVALID INDIRECT CALL, IDENTIFIER NOT AN ADDRESS SCALAR */
		return FALSE;
	    end;
	    call sub$4D2C;
	    call pushOperator(0);
	    call pushParseByte(18);
	    if matchTx2Item(L$LPAREN) then
	    do;
	    	call pushParseByte(15);
	    	call pushParseByte(0);
	    end;
	end;
	call exprParse;
	call moveExpr2Stmt;
	markedStSP = stSP;
	return TRUE;
end;

sub$5AD8: PROCEDURE public;
	call resetStacks;
	call pushParseByte(0);
	call exprParse;
	call moveExpr2Stmt;
	markedStSP = stSP;
end;

stmtParse: PROCEDURE(arg1w) ADDRESS public;
	declare arg1w address;
	declare i byte, (w99BF, w99C1, p) address;


	flgVisited: PROCEDURE(arg1w, arg2w);
		declare (arg1w, arg2w) address;
		st1Stack(arg1w) = 255;
		st3Stack(arg1w) = arg2w;
	end;

	sub$5BF5: PROCEDURE(arg1w);
	    declare arg1w address;
	    declare i byte, p address, j byte;

	    p = st3Stack(arg1w);
	    if (i := st1Stack(arg1w)) = I$VARIABLE then 
		w99C1 = wrTx2Item1Arg(T2$VARIABLE, p - botInfo);
	    else if i = I$NUMBER then
	    do;
		if high(p) = 0 then
			j = T2$NUMBER;
		else
			j = T2$BIGNUMBER;
		w99C1 = wrTx2Item1Arg(j, p);
	    end;
	    else if i = I$INPUT then
		w99C1 = wrTx2Item1Arg(T2$INPUT, p);
	    else if i = I$LENGTH or i = I$LAST or i = I$SIZE then
		w99C1 = wrTx2Item1Arg(b413F(i), p - botInfo);
	    else
		w99C1 = wrTx2Item(b413F(i));
	    call flgVisited(arg1w, w99C1);
	end;

	stmtParse0: PROCEDURE;
		declare i byte;
		w99BF = parseStack(parseSP);
		call popParseStack;
		if (i := st1Stack(w99BF)) = I$OUTPUT then
			return;
		if st2Stack(w99BF) = 0 then
			call sub$5BF5(w99BF);
		else
		do;
			call pushParseWord(w99BF);
			if i = I$CALL then
				call pushParseByte(3);
			else if i = I$CALLVAR then
			do;
				call pushParseByte(6);
				call pushParseWord(st3Stack(w99BF));
				call pushParseByte(0);
			end;
			else if i = I$COLONEQUALS then
				call pushParseByte(9);
			else if i = I$MOVE then
			do;
				call pushParseByte(14);
				call pushParseWord(st3Stack(w99BF));
				call pushParseByte(0);
			end;
			else if i = I$BYTEINDEX or i = I$WORDINDEX then
			do;
				call pushParseByte(8);
				call pushParseWord(2);		/* serialise 2 leaves */
				call pushParseWord(st3Stack(w99BF));
				call pushParseByte(1);
			end;
			else
			do;
				call pushParseByte(13);					/* post serialisation */
				call pushParseWord(st2Stack(w99BF));	/* num args */
				call pushParseWord(st3Stack(w99BF));	/* loc of args */
				call pushParseByte(1);
			end;
		end;
	end;


	stmtParse1: PROCEDURE;	/* serialise 1 leaf then check */
		w99BF = parseStack(parseSP);
		call pushParseByte(2);	/* flag to check for more leaves */
		call pushParseWord(w99BF);	/* serialise this leaf */
		call pushParseByte(0);
	end;

	stmtParse2: PROCEDURE;	/* check for any more leaves */
		declare p address;
		p = parseSP - 1;
		parseStack(p) = parseStack(p) - 1;
		if parseStack(p) = 0 then
		do;
			call popParseStack;
			call popParseStack;
		end;
		else
		do;
			parseStack(parseSP) = parseStack(parseSP) + 1;
			call pushParseByte(1);
		end;
	end;

	stmtParse3: PROCEDURE;	/* parse call args */
		w99BF = parseStack(parseSP);
		call pushParseByte(5);	/* final call wrap up */
		if st2Stack(w99BF) > 1 then
		do;	/* any args */
			call pushParseWord(st2Stack(w99BF) - 1);	/* num args  */
			call pushParseWord(st3Stack(w99BF) + 1);	/* index of arg info */
			curInfo$p = st3Stack(st3Stack(w99BF));	/* info of procedure */
			call advNxtInfo;							/* adv to arginfo */
			call pushParseWord(curInfo$p);
			call pushParseByte(4);
			call pushParseWord(st3Stack(w99BF) + 1);	/* index of arg info */
			call pushParseByte(0);						/* serialise the arg */
		end;
		w99C1 = wrTx2Item(T2$BEGCALL);
	end;

	stmtParse4: PROCEDURE;
		declare (p, q) address, (i, j) byte;

		q = (p := parseSP - 1) - 1;
		curInfo$p = parseStack(parseSP);
		w99BF = parseStack(p);
		i = parseStack(q);
		if i > 2 then
		do;	/* all bar first 2 args to stack */
			if curInfo$p = 0 then 
				w99C1 = wrTx2Item1Arg(T2$STKARG, sub$42EF(st3Stack(w99BF)));
			else
			do;
				if getType = BYTE$T then
					j = T2$STKBARG;
				else
					j = T2$STKWARG;
				w99C1 = wrTx2Item1Arg(j, sub$42EF(st3Stack(w99BF)));
				call advNxtInfo;
				parseStack(parseSP) = curInfo$p;
			end;
			call flgVisited(w99BF, w99C1);
		end;
		i = i - 1;
		if i = 0 then
		do;			/* all done, clear working data */
			call popParseStack;
			call popParseStack;
			call popParseStack;
		end;
		else
		do;
			parseStack(q) = i;
			w99BF = w99BF + 1;
			parseStack(p) = w99BF;
			call pushParseByte(4);
			call pushParseWord(w99BF);	/* serialise the arg */
			call pushParseByte(0);
		end;
	end;


	stmtParse5: PROCEDURE;
		declare (p, q) address, i byte, r address;
		w99BF = parseStack(parseSP);
		call popParseStack;
		r = st3Stack(w99BF);
		i = st2Stack(w99BF) - 1;
		p, q = 0;
		if i > 1 then
		do;
			p = sub$42EF(st3Stack(r + i - 1));
			q = sub$42EF(st3Stack(r + i));
		end;
		else if i > 0 then
			p = sub$42EF(st3Stack(r + i));
		w99C1 = wrTx2Item3Arg(T2$CALL, p, q, st3Stack(r) - botInfo);
		call flgVisited(w99BF, w99C1);
	end;

	stmtParse6: PROCEDURE;
		declare i byte, p address;
		w99C1 = wrTx2Item(T2$BEGCALL);
		w99BF = parseStack(parseSP);
		call pushParseByte(7);
		if (i := st2Stack(w99BF) - 1) <> 0 then
		do;
			call pushParseWord(i);
			p = st3Stack(w99BF) + 1;
			call pushParseWord(p);
			call pushParseWord(0);	/* no arg info */
			call pushParseByte(4);
			call pushParseWord(p);
			call pushParseByte(0);
		end;
	end;

	stmtParse7: PROCEDURE;
		declare i byte;
		declare (p, q, r) address;
		w99BF = parseStack(parseSP);
		call popParseStack;
		i = st2Stack(w99BF) - 1;
		p = st3Stack(w99BF);
		q, r = 0;
		if i > 1 then
		do;
			q = sub$42EF(st3Stack(p + i - 1));
			r = sub$42EF(st3Stack(p + i));
		end;
		else if i > 0 then
			q = sub$42EF(st3Stack(p + i));
		w99C1 = wrTx2Item3Arg(T2$CALLVAR, q, r, sub$42EF(st3Stack(p)));
		call flgVisited(w99BF, w99C1);
	end;

	stmtParse8: PROCEDURE;
		declare i byte, p address;
		w99BF = parseStack(parseSP);
		call popParseStack;
		i = st1Stack(w99BF);
		p = st3Stack(w99BF);
		w99C1 = wrTx2Item3Arg(b413F(i), sub$42EF(st3Stack(p)),
					sub$42EF(st3Stack(p+1)), st3Stack(p+2));
		call flgVisited(w99BF, w99C1);
	end;


	stmtParse9: PROCEDURE;
		w99BF = parseStack(parseSP);
		call pushParseByte(10);	/* post serialise LHS */
		call pushParseWord(st3Stack(w99BF) + st2Stack(w99BF) - 1);
		call pushParseByte(0);
	end;


	stmtParse10: PROCEDURE;
		declare i byte, p address;
		w99BF = parseStack(parseSP);
		call pushParseByte(12);		/* mark LHS as used at end */
		i = st2Stack(w99BF) - 1;	/* num RHS */
		p = st3Stack(w99BF);		/* base RHS */
		call pushParseWord(i);
		call pushParseWord(p);
		call pushParseWord(p + i);			/* LHS */
		call pushParseByte(11);				/* after serialised leaf */
		call pushParseWord(p);				/* do the leaf */
		call pushParseByte(0);
	end;


	stmtParse11: PROCEDURE;		/* do one RHS assignment */
		declare (p, q) address, i byte;
		declare (r, s) address;

		i = parseStack(q := (p := parseSP - 1) - 1);
		s = parseStack(parseSP);
		if st1Stack(r := parseStack(p)) = I$OUTPUT then
		do;
			w99C1 = wrTx2Item1Arg(T2$NUMBER, st3Stack(r));
			w99C1 = wrTx2Item2Arg(T2$OUTPUT, sub$42EF(w99C1), sub$42EF(st3Stack(s)));
		end;
		else 
			w99C1 = wrTx2Item2Arg(T2$STORE, sub$42EF(st3Stack(r)), sub$42EF(st3Stack(s)));
		i = i - 1;
		if i = 0 then
		do;		/* all done */
			call popParseStack;
			call popParseStack;
			call popParseStack;
		end;
		else
		do;			/* no so do another */
			parseStack(q) = i;
			r = r + 1;
			parseStack(p) = r;
			call pushParseByte(11);	/* state 11 after serialise */
			call pushParseWord(r);	/* serialise leaf */
			call pushParseByte(0);
		end;
	end;

	stmtParse12: PROCEDURE;		/* mark LHS as used */
		w99BF = parseStack(parseSP);
		call popParseStack;
		w99C1 = st3Stack(st3Stack(w99BF) + st2Stack(w99BF) - 1);
		call flgVisited(w99BF, w99C1);
	end;


	stmtParse13: PROCEDURE;	/* binary or unary op */
		declare p address, i byte;

		w99BF = parseStack(parseSP);
		call popParseStack;
		p = st3Stack(w99BF);
		i = b413F(st1Stack(w99BF));
		if st2Stack(w99BF) = 1 then 
			w99C1 = wrTx2Item1Arg(i, sub$42EF(st3Stack(p)));
		else 
			w99C1 = wrTx2Item2Arg(i, sub$42EF(st3Stack(p)), sub$42EF(st3Stack(p+1)));
		call flgVisited(w99BF, w99C1);
	end;


	stmtParse14: PROCEDURE;
		declare p address;
		p = st3Stack(w99BF := parseStack(parseSP));
		/* emit the count leaf */
		w99C1 = wrTx2Item1Arg(T2$BEGMOVE, sub$42EF(st3Stack(p)));
		call flgVisited(p, w99C1);
		call pushParseByte(15);		/* MOVE post serialise */
		call pushParseWord(2);		/* serialise the address leaves */
		call pushParseWord(p + 1);
		call pushParseByte(1);
	end;

	stmtParse15: PROCEDURE;		/* rest of MOVE */
		declare p address;
		w99BF = parseStack(parseSP);
		call popParseStack;
		p = st3Stack(w99BF);
		w99C1 = wrTx2Item3Arg(T2$MOVE, sub$42EF(st3Stack(p+1)),
				sub$42EF(st3Stack(p+2)), sub$42EF(st3Stack(p)));
		call flgVisited(w99BF, w99C1);
	end;

	p = curInfo$p;
	parseSP = 0;
	call pushParseWord(arg1w);
	call pushParseByte(0);
	do while parseSP <> 0;
		i = parseStack(parseSP);
		parseSP = parseSP - 1;
		do case i;
			call stmtParse0;
			call stmtParse1;
			call stmtParse2;
			call stmtParse3;
			call stmtParse4;
			call stmtParse5;
			call stmtParse6;
			call stmtParse7;
			call stmtParse8;
			call stmtParse9;
			call stmtParse10;
			call stmtParse11;
			call stmtParse12;
			call stmtParse13;
			call stmtParse14;
			call stmtParse15;
		end;
	end;
	curInfo$p = p;
	return st3Stack(arg1w);
end;



sub$6523: PROCEDURE public;

declare b99FF(20) byte,
	b9A13(20) byte,
	procInfoStack(20) address,
	hNodes(20) address,
	eNodes(20) address,
	w9A9F(20) address,
	w9AC7(20) address,
	controlSP address;



	pushScope: PROCEDURE(arg1w);
		declare arg1w address;
		if blockDepth = 22h then
			call fatalError(ERR164);	/* COMPILER ERROR: SCOPE STACK OVERFLOW */
		else 
			procChains(blockDepth := blockDepth + 1) = arg1w;
	end;

	popScope: PROCEDURE;
		if blockDepth = 0 then
			call fatalError(ERR165);	/* COMPILER ERROR: SCOPE STACK UNDERFLOW */
		else
			blockDepth = blockDepth - 1;
	end;

	pushControl: PROCEDURE(arg1b);
		declare arg1b byte;
		if controlSP = 13h then
			call fatalError(ERR84);	/*  LIMIT EXCEEDED: BLOCK NESTING */
		else
		do;
			b99FF(controlSP := controlSP + 1) = arg1b;
			b9A13(controlSP) = 0;
			procInfoStack(controlSP) = 0;
			hNodes(controlSP) = 0;
			eNodes(controlSP) = 0;
			w9A9F(controlSP) = 0;
			w9A9F(controlSP) = 0;	/* duplicate !! */
		end;
	end;


	popControl: PROCEDURE;
		if controlSP = 0 then
			call fatalError(ERR167);	/* COMPILER ERROR: CONTROL STACK UNDERFLOW */
		else
		do;
			if b99FF(controlSP) <> 0 then 
				b9A13(controlSP-1) = b9A13(controlSP) or b9A13(controlSP-1);
			controlSP = controlSP - 1;
		end;
	end;

	genLocalLabel: PROCEDURE ADDRESS;
		call alloc(3, 3);
		return (localLabelCnt := localLabelCnt + 1);
	end;


	sub$671D: PROCEDURE(arg1w) ADDRESS;
		declare arg1w address, (p, q) address;
		curInfo$p = arg1w;
		q = wrTx2Item1Arg(T2$VARIABLE, arg1w - botInfo);
		if testInfoFlag(F$MEMBER) then
		do;
			curInfo$p = getParentOffset;
			p = wrTx2Item1Arg(T2$VARIABLE, curInfo$p - botInfo);
			q = wrTx2Item2Arg(T2$MEMBER, sub$42EF(p), sub$42EF(q));
		end;
		return q;
	end;

	sub$677C: PROCEDURE(arg1w) ADDRESS;
		declare arg1w address, (p, q) address;
		q = sub$671D(arg1w);
		if testInfoFlag(F$BASED) then
		do;
			p = sub$671D(getBaseOffset);
			q = wrTx2Item2Arg(T2$BASED, sub$42EF(p), sub$42EF(q));
		end;
		return q;
	end;

	chkEndOfStmt: PROCEDURE;
		if matchTx2AuxFlag(128) then
		do;
			call wrTx2ExtError(ERR32);	/* INVALID SYNTAX, TEXT IGNORED UNTIL ';' */
			do while (tx1Aux2 and 80h) <> 0;
				call getTx1Item;
			end;
			call setRegetTx1Item;
		end;
	end;


	sub$67E3: PROCEDURE;
		declare (p, q, r, s, t, u ,v, w) address;

		p = procInfoStack(controlSP);
		u = hNodes(controlSP);
		v = eNodes(controlSP);
		if (w := w9A9F(controlSP)) = 0 then
		do;
			curInfo$p = p;
			if getType = BYTE$T then
				t = wrTx2Item1Arg(T2$LOCALLABEL, genLocalLabel);
			q = sub$677C(p);
			r = sub$677C(p);
			s = wrTx2Item1Arg(T2$NUMBER, 1);
			if getType = BYTE$T then
			do;
				r = wrTx2Item2Arg(T2$ADDB, sub$42EF(r), sub$42EF(s));
				q = wrTx2Item2Arg(T2$STORE, sub$42EF(q), sub$42EF(r));
				q = wrTx2Item2Arg(T2$JNZ, u, 3);
			end;
			else
			do;
				r = wrTx2Item2Arg(T2$ADDW, sub$42EF(r), sub$42EF(s));
				q = wrTx2Item2Arg(T2$STORE, sub$42EF(q), sub$42EF(r));
				q = wrTx2Item1Arg(T2$JNC, u);
			end;
		end;
		else 
			q = wrTx2Item1Arg(T2$JMP, w);
		q = wrTx2Item1Arg(T2$LOCALLABEL, v);
	end;


	sub$6917: PROCEDURE ADDRESS;
		call sub$5AD8;
		return stmtParse(markedStSP);
	end;


	sub$6923: PROCEDURE;
		declare p address;
		p = sub$6917;
		call chkEndOfStmt;
		if matchTx2Item(L$JMPFALSE) then
			p = wrTx2Item2Arg(T2$JMPFALSE, tx1Item.dataw(0), sub$42EF(p));
		else
			call fatalError(ERR168);  /* COMPILER ERROR: BRANCH MISSING IN 'IF' STATEMENT */
	end;

	parseSTMTCNT: PROCEDURE;
		T2CntForStmt = 0;
		call mapLtoT2;
		curStmtNum = tx1Item.dataw(0);
	end;


	parseIF: PROCEDURE;
		call sub$6923;
	end;

	parsePROCEDURE: PROCEDURE;
		tx1Item.dataw(0) = tx1Item.dataw(0) - botInfo;
		call mapLtoT2;
		call pushControl(0);
		procInfoStack(controlSP) = curProcInfo$p;
		curProcInfo$p, curInfo$p = tx1Item.dataw(0) + botInfo;
		call setInfoFlag(F$DECLARED);
	end;

	parseWHILE: PROCEDURE;
		declare (p, q, r) address;
		call pushControl(2);
		p = genLocalLabel;
		q = genLocalLabel;
		hNodes(controlSP) = p;
		eNodes(controlSP) = q;
		r = wrTx2Item1Arg(T2$LOCALLABEL, p);
		r = sub$6917;
		r = wrTx2Item2Arg(T2$JMPFALSE, q, sub$42EF(r));
		call chkEndOfStmt;
	end;

	parseCASE: PROCEDURE;
		declare (p, q) address;
		call pushControl(3);
		call mapLtoT2;
		q = sub$6917;
		p = genLocalLabel;
		q = wrTx2Item2Arg(T2$63, p, sub$42EF(q));
		hNodes(controlSP) = p;
		call chkEndOfStmt;
	end;

	parseDOLOOP: PROCEDURE;
		declare (p, q, r, s, t, u, v, w) address;

		call pushControl(1);
		if notMatchTx2Item(L$VARIABLE) then
		do;
			call wrTx2Error(ERR138);	/* MISSING INDEX VARIABLE */
			return;
		end;
		call sub$467D;
		w = curInfo$p;
		procInfoStack(controlSP) = w;
		if (getType <> BYTE$T and getType <> ADDRESS$T) or testInfoFlag(F$ARRAY) then
		do;
			call wrTx2ExtError(ERR139);	/* INVALID INDEX VARIABLE TYPE, NOT BYTE OR ADDRESS */
			return;
		end;
		if notMatchTx2Item(L$EQ) then
		do;
			call wrTx2ExtError(ERR140);	/* MISSING '=' FOLLOWING INDEX VARIABLE */
			return;
		end;
		b99FF(controlSP) = 4;
		p = sub$677C(w);
		q = sub$6917;
		p = wrTx2Item2Arg(T2$STORE, sub$42EF(p), sub$42EF(q));
		s = genLocalLabel;
		hNodes(controlSP) = s;
		p = wrTx2Item1Arg(T2$LOCALLABEL, s);
		p = sub$677C(w);

		if matchTx2Item(L$TO) then
			q = sub$6917;
		else
		do;
			call wrTx2ExtError(ERR141);	/* MISSING 'TO' CLAUSE */
			q = wrTx2Item1Arg(T2$NUMBER, 0);
		end;

		p = wrTx2Item2Arg(T2$LE, sub$42EF(p), sub$42EF(q));
		t = genLocalLabel;
		eNodes(controlSP) = t;
		p = wrTx2Item2Arg(T2$JMPFALSE, t, sub$42EF(p));

		if notMatchTx2Item(L$BY) then
			return;
		v = genLocalLabel;
		w9AC7(controlSP) = v;
		p = wrTx2Item1Arg(T2$JMP, v);
		u = genLocalLabel;
		w9A9F(controlSP) = u;
		p = wrTx2Item1Arg(T2$LOCALLABEL, u);
		p = sub$677C(w);
		q = sub$677C(w);
		r = sub$6917;
		q = wrTx2Item2Arg(T2$ADDW, sub$42EF(q), sub$42EF(r));
		p = wrTx2Item2Arg(T2$STORE, sub$42EF(p), sub$42EF(q));
		p = wrTx2Item1Arg(T2$JNC, s);
		p = wrTx2Item1Arg(T2$JMP, t);
		p = wrTx2Item1Arg(T2$LOCALLABEL, v);
	end;

	parseEND: PROCEDURE;
		declare p address;
		do case b99FF(controlSP);
			do;
				curInfo$p = curProcInfo$p;
				call setInfoFlag(F$DEFINED);
				if getDataType <> 0 and not b9A13(controlSP) then
					call wrTx2Error(ERR156);	/* MISSING RETURN STATEMENT IN TYPED PROCEDURE */
				p = wrTx2Item(T2$ENDPROC);
				curProcInfo$p = procInfoStack(controlSP);
			end;
			;
			do;
				p = wrTx2Item1Arg(T2$JMP, hNodes(controlSP));
				p = wrTx2Item1Arg(T2$LOCALLABEL, eNodes(controlSP));
			end;
			do;
				p = wrTx2Item1Arg(T2$LOCALLABEL, hNodes(controlSP));
				p = wrTx2Item(T2$ENDCASE);
			end;
			call sub$67E3;
		end;
		call popControl;
		call popScope;
	end;

	parseSTATEMENT: PROCEDURE;
		declare p address;
		if sub$5945 then 
			p = stmtParse(markedStSP);
		call chkEndOfStmt;
	end;


	parseCALL: PROCEDURE;
		declare p address;
		if sub$59D4 then
			p = stmtParse(markedStSP);
		call chkEndOfStmt;
	end;

	parseRETURN: PROCEDURE;
		declare p address, i byte;
		if curProcInfo$p = 0 then
		do;
			call wrTx2Error(ERR155);	/* INVALID RETURN IN MAIN PROGRAM */
			return;
		end;
		curInfo$p = curProcInfo$p;
		i = getDataType;
		if matchTx2AuxFlag(128) then	/* there is an expression */
		do;
			call setRegetTx1Item;
			if i = 0 then
				call wrTx2Error(ERR136);	/* INVALID RETURN FOR UNTYPED PROCEDURE, VALUE ILLEGAL */
			p = sub$6917;
			if i = 2 then 
				p = wrTx2Item1Arg(T2$RETURNBYTE, sub$42EF(p));
			else
				p = wrTx2Item1Arg(T2$RETURNWORD, sub$42EF(p));
		end;
		else
		do;
			if i <> 0 then
				call wrTx2Error(ERR137);	/* MISSING VALUE IN RETURN FOR TYPED PROCEDURE */
			p = wrTx2Item(T2$RETURN);
		end;
		b9A13(controlSP) = 0ffh;
		call chkEndOfStmt;
	end;

	parseEIDIHLT: PROCEDURE;
		call mapLtoT2;
		call chkEndOfStmt;
	end;

	parseGOTO: PROCEDURE;
		declare p address;
		if notMatchTx2Item(L$VARIABLE) then 
			call wrTx2Error(ERR142);	/* MISSING IDENTIFIER FOLLOWING GOTO */
		else
		do;
			call sub$45E0;
			if getType <> LABEL$T then 
				call wrTx2ExtError(ERR143);	/* INVALID REFERENCE FOLLOWING GOTO, NOT A LABEL */
			else
			do;
				if high(getScope) = 1 and high(procChains(blockDepth)) <> 1 then
					call setInfoFlag(F$MODGOTO);
				if high(getScope) = 1 or high(getScope) = high(procChains(blockDepth)) then
				do;
					p = wrTx2Item1Arg(T2$GO$TO, curInfo$p - botInfo);
					call chkEndOfStmt;
				end;
				else 
					call wrTx2ExtError(ERR144); /* INVALID GOTO LABEL, NOT AT LOCAL OR MODULE LEVEL */
			end;
		end;
	end;


	parseGO: PROCEDURE;
		if notMatchTx2Item(L$TO) then
			call wrTx2Error(ERR145); 	/* MISSING 'TO' FOLLOWING 'GO' */
		call parseGOTO;
	end;

	parseAT: PROCEDURE;
		declare p address;
		p = tx1Item.dataw(0);
		call getTx1Item;
		call getRestrictedExpr;
		call wrAtFileByte(ATI$AHDR);
		call wrAtFileWord(p - botInfo);
		call wrAtFileWord(curStmtNum);
		call wrAtFileWord(varInfoOffset);
		call wrAtFileWord(varArrayIndex);
		call wrAtFileWord(varNestedArrayIndex);
		call wrAtFileWord(varVal);
		call expectRPAREN(ERR146);	/* MISSING ') ' AFTER 'AT' RESTRICTED EXPRESSION */
	end;

	parseDATA$INITIAL: PROCEDURE;
		declare (p, q) address;
		p = tx1Item.dataw(0);
		call getTx1Item;
		q = parseDataItems(p);
		if (curInfo$p := p) <> botInfo then
		    if testInfoFlag(F$STARDIM) then
			call setDimension(q);
	end;

	controlSP = 0;
	call getTx1Item;
	do while tx1Item.type <> L$EOF;
        	curInfo$p = 0;
		do case b40B7(tx1Item.type);
			call parseSTMTCNT; 	/* L$STMTCNT */
			call pushScope(tx1Item.dataw(0));  /* L$SCOPE */
			call parseEND;	/* L$END */
			call parseIF;	/* L$IF */
			do;
				call parseDOLOOP;		/* L$DOLOOP */
				call chkEndOfStmt;
			end;
			call parseWHILE;	/* L$WHILE */
			call pushControl(1);	/* L$DO */
			call parsePROCEDURE;	/* L$PROCEDURE */
			call parseCASE;	/* L$CASE */
			call parseSTATEMENT;	/* L$STATEMENT */
			call parseCALL;	/* L$CALL */
			call parseRETURN;	/* L$RETURN */
			call parseGOTO;	/* L$GOTO */
			call parseGO;	/* L$GO */
			;			/* L$SEMICOLON */
			call parseEIDIHLT;	/* L$ENABLE, L$DISABLE, L$HALT */
			call parseAT;	/* L$AT */
			call parseDATA$INITIAL;	/* L$DATA, L$INITIAL */
			;		/* expression items */
			call mapLtoT2;	/* L$LABELDEF, L$LOCALLABEL, L$JMP, L$JMPFALSE, L$CASELABEL */
			do;
				curInfo$p = tx1Item.dataw(0);	/* L$EXTERNAL */
				call setInfoFlag(F$DECLARED);
				call setInfoFlag(F$DEFINED);
			end;
		end;
		call getTx1Item;
	end;
end;
END;
src/plm1f.plm
plm1f: DO;
$include(:f2:plm1f.ipx)



declare externalsCnt byte initial(0),
	atStmtNum address initial(0),
	b9B40 byte;

sub$6EE0: PROCEDURE public;

    sub$6EF6: PROCEDURE(arg);
	DECLARE arg ADDRESS;
	DECLARE p ADDRESS;

	hasErrors = TRUE;
	p = curInfo$p - botInfo;
	call fwrite(.tx2File, .(T2$ERROR), 1);
	call fwrite(.tx2File, .arg, 2);
	call fwrite(.tx2File, .p, 2);
	call fwrite(.tx2File, .atStmtNum, 2);
    end;

    getElementSize: PROCEDURE ADDRESS;
	DECLARE i BYTE;
	i = getType - 2;
	if i > 2 then
	    return 0;
	do case i;
	    return 1;		/* byte */
	    return 2;		/* address */
	    return getParentOffset; /* structure. Returns val not offeset for struct */
	end;
    end;

    getVarSize: PROCEDURE ADDRESS;
	if testInfoFlag(F$ARRAY) then
	    return getDimension * getElementSize;
	else
	    return getElementSize;
    end;

    revmemmov: PROCEDURE(srcp, dstp, cnt);
	DECLARE (srcp, dstp, cnt) ADDRESS;
	DECLARE srcw BASED srcp ADDRESS,
	    dstw BASED dstp ADDRESS;

	srcp = srcp + cnt - 2;
	dstp = dstp + cnt - 2;
	do while cnt > 1;
	    dstw = srcw;
	    cnt = cnt - 2;
	    dstp = dstp - 2;
	    srcp = srcp - 2;
	end;
	if cnt = 1 then
	    dstw = (dstw and 0ffh) or (srcw and 0ff00h);
    end;

    advNextDataInfo: PROCEDURE;
	do while 1;
	    call advNxtInfo;
	    if curInfo$p = 0 then
		return;
	    if getType >= BYTE$T and getType <= STRUCT$T then
		return;
	end;
    end;

    sub$7049: PROCEDURE;
	DECLARE p ADDRESS, i BYTE;
	DECLARE hashChains BASED hashChains$p(1) ADDRESS;

	if  not b9B40 and not IXREF then
	    return;
	p = topSymbol - 1;
	do i = 0 to 63;
	    curSymbol$p = hashChains(i);
	    do while curSymbol$p <> 0;
		if (curInfo$p := cursym.info$p) <> 0 and high(curInfo$p) <> 0ffh then
		do;
			p = p - cursym.name(0) - 1;
			do while curInfo$p <> 0; 
				call setSymbol(p);
				curInfo$p = getLinkOffset;
			end;
			call fwrite(.nmsFile, .cursym.name, cursym.name(0) + 1);
		end;
		curSymbol$p = cursym.link;
	    end;
	end;
	call fwrite(.nmsFile, .(0), 1);
    end;


    sub$711F: PROCEDURE;
	DECLARE (p, q, r, s) ADDRESS;

	curInfo$p = botInfo + 2;

	call advNextDataInfo;
	do while curInfo$p <> 0;
	    if getType = STRUCT$T then
		call setParentOffset(0);	/* struct size is 0 */
	    else if testInfoFlag(F$MEMBER) then
	    do;
		r = getVarSize;
		p = curInfo$p;
		curInfo$p = getParentOffset;	/* get structure info */
		q = getParentOffset;		/* this gets size so far */
		if (s := q + r) < r then	/* add in the new element */
			call sub$6EF6(ERR208);	/* LIMIT EXCEEDED: STRUCTURE SIZE */
		call setParentOffset(s);	/* store the running size */
		curInfo$p = p;
		call setLinkVal(q);		/* use link value for offset of this memeber */
	    end;
	    call advNextDataInfo;
	end;
    end;

    sub$719D: PROCEDURE;
        DECLARE i BYTE, p ADDRESS;


	allocVarAddress: PROCEDURE(arg1w$p);
	    DECLARE arg1w$p ADDRESS,
		arg1w BASED arg1w$p ADDRESS;

	    call setLinkVal(arg1w);		/* allocate this var's address */
	    arg1w = arg1w + getVarSize;		/* reserve it's space */
	    if arg1w < getVarSize then
		call sub$6EF6(ERR207);	/* LIMIT EXCEEDED: SEGMENT SIZE */
	end;


	sub$7323: PROCEDURE;
	    DECLARE (p, q) ADDRESS;

	    p = curInfo$p;
	    curInfo$p = procInfo(high(getScope));
	    q = .info.parent;		/* varsize union with parent */
	    curInfo$p = p;
	    call allocVarAddress(q);
	end;



	/* allocate external data ids */
        curInfo$p = botInfo + 2;
        standAlone = haveModule;
        
        do while curInfo$p <> 0;
		if getType >= BYTE$T and getType <= STRUCT$T 
		    or getType = PROC$T or getType = LABEL$T then
		do;
		    if testInfoFlag(F$EXTERNAL) then
		    do;
			    call setExternId(externalsCnt);
			    externalsCnt = externalsCnt + 1;
			    if externalsCnt = 0 then
				call sub$6EF6(ERR219);	/* LIMIT EXCEEDED: NUMBER OF EXTERNALS > 255 */
			    call setLinkVal(0);
			    standAlone = false;
		    end;
		    else if testInfoFlag(F$PUBLIC) then
			    standAlone = false;
		end;
		call advNxtInfo;
        end;
        
	/* allocate data variables */
        curInfo$p = botInfo + 2;	/* start at bottom */
        call advNextDataInfo;			/* find next data */
        
        do while curInfo$p <> 0;
		if not (testInfoFlag(F$MEMBER) or testInfoFlag(F$AT) or testInfoFlag(F$EXTERNAL)) then
		do;
		    if testInfoFlag(F$PARAMETER) then
		    do;
			    p = curInfo$p;
			    curInfo$p = procInfo(high(getScope));
			    i = testInfoFlag(F$EXTERNAL);	/* only allocate parameter if not external */
			    curInfo$p = p;
		    end;
		    else 
			    i = FALSE;
		    if i then
			    call setLinkVal(0);		/* external parameter has 0 offset */
		    else if testInfoFlag(F$BASED) then
			    call setLinkVal(0);		/* based var has 0 offset */
		    else if testInfoFlag(F$DATA) then
			    call allocVarAddress(.csegSize);	/* allocate initialised data var */
		    else if testInfoFlag(F$MEMORY) then
			    ;				/* memory is predefined */
		    else if testInfoFlag(F$AUTOMATIC) then	/* allocate stack var */
			    call sub$7323;
		    else
			    call allocVarAddress(.dsegSize);	/* allocate uninitalised data */
		end;
		call advNextDataInfo;		/* get next data */
        end;
    end;



    procAtFile: PROCEDURE;
	   declare atFData STRUCTURE(type byte, info$p address, stmtNum address,
		varInfoOffset address, varArrayIndex address, varNestedArrayIndex address,
		val address, pad(242) byte); 

	    sub$73DC: PROCEDURE;
		declare atOffset address;

		    sub$7486: PROCEDURE;
			DECLARE (i, j) BYTE;
			if atFData.varInfoOffset = 0 then
			    i = 0;
			else if getType > STRUCT$T or getType < BYTE$T then
			do;
			    i = 0;
			    call sub$6EF6(ERR211);	/* INVALID IDENTIFIER IN 'AT' RESTRICTED REFERENCE */
			end;
			else if testInfoFlag(F$EXTERNAL) then
			do;
			    i = 1;
			    j = getExternId;
			end;
			else if testInfoFlag(F$DATA) then
			    i = 2;
			else if testInfoFlag(F$AUTOMATIC) then
			    i = 3;
			else if testInfoFlag(F$MEMORY) then
			    i = 4;
			else if testInfoFlag(F$BASED) then
			do;
			    i = 0;
			    call sub$6EF6(ERR212);	/* INVALID RESTRICTED REFERENCE IN 'AT' , BASE ILLEGAL */
			end;
			else if testInfoFlag(F$ABSOLUTE) then
			    i = 0;
			else
			    i = 5;
			curInfo$p = atFData.info$p;

			do while 1;
			    if not testInfoFlag(F$MEMBER) then
			    do;
				if testInfoFlag(F$DATA) then
				do;
					call clrFlag(.info.flag, F$DATA);
					call setInfoFlag(F$INITIAL);
				end;
				call setLinkVal(atOffset);
				atOffset = atOffset + getVarSize;
				do case i;
				call setInfoFlag(F$ABSOLUTE); 
				do;
				    if testInfoFlag(F$PUBLIC) then
					call sub$6EF6(ERR178); /* INVALID 'AT' RESTRICTED REFERENCE, EXTERNAL
							    ATTRIBUTE CONFLICTS WITH PUBLIC ATTRIBUTE */
				    call setInfoFlag(F$EXTERNAL);
				    call setExternId(j);
				end;
				call setInfoFlag(F$DATA);
				call setInfoFlag(F$AUTOMATIC); 
				call setInfoFlag(F$MEMORY);
				;
				end;
			    end;
			    call advNextDataInfo;
			    if curInfo$p = 0 then
				return;
			    if not (testInfoFlag(F$PACKED) or testInfoFlag(F$MEMBER)) then
				return;
			end;
		    end;


		call fread(.atFile, .atFData.info$p, 12);
		if atFData.info$p = 0 then
		    return;
		atFData.info$p = atFData.info$p + botInfo;
		atStmtNum = atFData.stmtNum;
		atOffset = atFData.val;
		if atFData.varInfoOffset <> 0 then
		do;
		    curInfo$p = atFData.varInfoOffset + botInfo;
		    if testInfoFlag(F$MEMBER) then
		    do;
			atOffset = getElementSize * atFData.varNestedArrayIndex + atOffset + getLinkVal;
			curInfo$p = getParentOffset;
		    end;
		    atOffset =  getLinkVal + getElementSize * atFData.varArrayIndex + atOffset;
		    if testInfoFlag(F$AT) then
			if curInfo$p >= atFData.info$p then
				call sub$6EF6(ERR213);	/* UNDEFINED RESTRICTED REFERENCE IN 'AT' */
		end;
		call sub$7486;
	    end;
	
	do while 1;
	    call fread(.atFile, .atFData.type, 1);
	    do case atFData.type;
	    call sub$73DC;					/* AT$AHDR */
	    call fread(.atFile, .atFData.info$p, 4);	/* AT$DHDR */
	    call fread(.atFile, .atFData.val, 2);		/* AT$2 */
	    do;						/* AT$STRING */
		call fread(.atFile, .atFData.val, 2);
		call fread(.atFile, .atFData.type, atFData.val);
	    end;
	    call fread(.atFile, .atFData.varInfoOffset, 8); /* AT$DATA */
	    ;						/* AT$END */
	    return;						/* AT$EOF */
	    end;
	end;
    end;





    sub$75F7: PROCEDURE;
	DECLARE w BASED w3822 ADDRESS;

	botInfo = botMem + topMem - topInfo;
	topInfo = topMem;
	call revmemmov(botMem, botInfo, topInfo - botInfo + 1);
	helpers$p = botInfo - shl(117,1);
	localLabels$p = helpers$p - (localLabelCnt+1) * 2;
	w381E = localLabels$p - (localLabelCnt+1);
	w3822 = botInfo - 2;
	do while w3822 >= w381E;
	    w = 0;
	    w3822 = w3822 - 2;
	end;
	if w3822 = w381E - 1 then
	    w = w and 0ffh;
	w3822 = w381E - 2;
    end;


    sub$7695: PROCEDURE;
	if (b9B40 := OBJECT or PRINT) or IXREF then
	do;
	    call openf(.nmsFile, 3);
	    call creatf(.nmsFile, .xrfBuf, 512, 2);
	end;
	call creatf(.atFile, .atBuf, 512, 1);
	csegSize, dsegSize = 0;
    end;


    sub$76D9: PROCEDURE;
        DECLARE i BYTE;
        
        if b9B40 or IXREF then
        do;
	call fflush(.nmsFile);
	call rewind(.nmsFile);
        end;
        call rewind(.atFile);		/* used for string data */
        call fwrite(.tx2File, .(T2$EOF), 1);
        call fflush(.tx2File);
        call rewind(.tx2File);
	do i = 1 to procCnt;
	    procInfo(i) = procInfo(i) - botMem;
	end;
    end;


    call sub$7695;
    call sub$7049;
    call sub$711F;
    call sub$719D;
    call procAtFile;
    call sub$75F7;
    call sub$76D9;
end sub$6EE0;

end;

src/plm2a.plm
plm2a: DO;
$include(:f2:plm2a.ipx)

declare unused(*) BYTE public DATA(2, 2, 3, 4, 3, 4, 2, 2, 3, 4, 2, 3, 2, 3, 3, 3, 3,
			2, 2, 3, 4, 2, 3, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 3,
			2, 3, 2, 2, 3, 2, 2, 1, 2, 2, 3, 4),

	b3FCD(*) BYTE public DATA(0, 2, 4, 7, 0Bh, 0Eh, 12h, 14h, 16h, 19h, 1Dh, 1Fh,
			22h, 24h, 27h, 2Ah, 2Dh, 30h, 32h, 34h, 37h, 3Bh, 3Dh,
			40h, 42h, 45h, 47h, 49h, 4Bh, 4Dh, 50h, 52h, 54h, 56h,
			59h, 5Bh, 5Eh, 60h, 62h, 65h, 67h, 69h, 6Ah, 6Ch, 6Eh,
			71h, 24h, 24h, 24h, 24h, 13h, 13h, 18h, 18h, 18h, 18h,
			16h, 2Ch, 15h, 1Fh, 1Fh, 20h, 20h, 19h, 19h, 19h, 19h,
			8, 8, 9, 9, 6, 7, 25h, 25h, 25h, 25h, 25h, 0Ah, 0Ah,
			0Bh, 0Bh, 14h, 14h, 14h, 14h, 14h, 39h, 1Ah, 1Ah, 1Ah,
			1Ah),

	b4029(*) BYTE public DATA(0, 0, 0, 0, 26h, 30h, 30h, 26h, 30h, 20h, 30h, 12h,
			12h, 12h, 0, 10h, 10h, 10h, 10h, 10h, 10h, 60h, 0,
			26h, 20h, 20h, 0, 0, 0, 0, 0, 0, 10h, 80h, 80h, 80h,
			90h, 90h, 40h, 0A0h, 0A0h, 0A0h, 80h, 0B0h, 90h, 80h,
			0B0h, 90h, 80h, 0B0h, 90h, 80h, 0B0h, 90h, 80h, 0B0h,
			90h, 20h, 30h, 30h, 30h, 10h, 10h, 70h, 70h, 30h, 30h,
			30h, 30h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20h, 20h, 0, 0, 20h,
			0, 0, 2Ch, 40h, 0, 10h, 10h, 60h, 20h, 0, 0, 0A0h,
			0A0h, 0A0h, 0A0h, 32h, 16h, 10h, 20h, 0, 10h, 10h,
			10h, 10h, 10h, 60h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 70h, 60h, 60h, 70h, 50h, 70h, 60h, 60h,
			0E0h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 80h, 80h, 80h, 80h, 80h, 80h,
			0, 0, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h,
			80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h,
			80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h,
			80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h,
			80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h,
			80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h,
			80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h, 80h,
			80h, 80h, 80h, 80h, 80h, 80h),

	b4128(*) BYTE public DATA(0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8,
			9, 0Ah),

	b413B(*) BYTE public DATA(0, 2, 4, 6, 8, 0Ah, 0Ch, 10h, 11h, 0Eh, 12h, 0, 2,
			4, 6, 8, 0Ah, 0Ch, 10h, 11h, 0Eh, 12h, 0, 2, 4, 6,
			8, 0Ah, 0Ch, 10h, 11h, 0Eh, 12h, 0, 2, 4, 6, 8, 0Ah,
			0Ch, 10h, 11h, 0Eh, 12h, 0, 2, 4, 6, 8, 0Ah, 0Ch, 10h,
			11h, 0Eh, 12h, 0Ch, 11h, 12h, 0Ch, 11h, 12h, 2, 6,
			0, 4, 6, 8, 0Ah, 0Ch, 0Eh, 10h, 11h, 12h, 0Dh, 0Fh,
			7, 9, 0Bh, 1, 5, 3),

	b418C(*) BYTE public DATA(90h, 91h, 94h, 95h, 98h, 99h, 9Ah, 9Ch, 0A0h, 0A1h,
			9Dh, 6Ch, 6Dh, 70h, 71h, 74h, 75h, 76h, 78h, 7Ch, 7Dh,
			79h, 0, 0, 0, 0, 0, 0, 64h, 65h, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 68h, 69h, 0, 0, 0, 0, 58h, 0, 0, 59h, 5Ah,
			54h, 55h, 0, 0, 0, 0, 60h, 0, 0, 61h, 62h, 5Ch, 5Dh,
			0, 0, 0, 0, 84h, 0, 0, 85h, 86h, 80h, 81h, 0, 0, 0,
			0, 8Ch, 0, 0, 8Dh, 8Eh, 88h, 89h, 0, 0, 0, 0, 0, 0,
			0, 10h, 11h, 12h, 14h, 15h, 16h, 17h, 0, 1, 4, 5, 8,
			9, 0Ah, 0Ch, 0Dh, 0Eh, 0Fh, 0, 30h, 0, 31h, 0, 0, 0,
			0, 0, 0, 0, 0, 28h, 0, 29h, 0, 0, 0, 0, 0, 0, 0, 18h,
			19h, 1Ch, 1Dh, 20h, 21h, 22h, 24h, 25h, 26h, 27h, 44h,
			45h, 48h, 49h, 4Ch, 4Dh, 4Eh, 50h, 51h, 52h, 53h, 0A8h,
			0A9h, 0ACh, 0ADh, 0B0h, 0B1h, 0B2h, 0B4h, 0B5h, 0B6h,
			0B7h, 34h, 36h, 35h, 38h, 39h, 3Ah, 0, 0, 0, 0, 0,
			3Ch, 3Dh, 3Eh, 40h, 41h, 42h, 0, 0, 0, 0, 0, 0, 2Ch,
			0, 0, 2Dh, 2Eh, 0, 0, 0, 0, 0, 0A4h, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0),

	b425D(*) BYTE public DATA(8, 1Ch, 0Ch, 0, 0Bh, 11h, 1, 0Ah, 0Fh, 10h, 0Dh, 9,
			2, 3, 4, 5, 6, 7, 0, 1Eh, 12h, 0Eh),

	b4273(*) BYTE public DATA(3, 3, 3, 3, 3, 3, 0Ch, 0Dh, 0Eh, 0Fh, 10h, 11h, 0,
			0, 0, 0, 0, 0, 0, 0, 12h, 7, 4, 4, 2, 0Ah, 15h, 0,
			0, 0, 0, 8, 9, 0, 0, 0, 0Bh, 6, 12h, 12h, 12h, 12h,
			12h, 12h, 5, 1, 1, 1, 13h, 13h, 13h, 1, 1, 1, 13h,
			13h, 13h, 14h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 1, 1, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch,
			0Ch, 0Ch, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0Dh, 0,
			0Eh, 0Eh, 0Eh, 0Eh, 0Fh, 0Fh, 0Fh, 0Fh, 0, 0Fh, 0Fh,
			0Fh, 0Fh, 0Eh, 0Eh, 0Eh, 0Eh, 0, 10h, 10h, 10h, 10h,
			10h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
			0),

	b42F9(*) BYTE public DATA(0, 0, 0, 0, 0, 0, 0, 0, 0, 10h, 0, 0, 0, 0, 0, 0, 0,
			0, 10h, 0, 20h, 0, 0, 13h, 0, 0, 0, 0, 0, 0, 0, 0,
			50h, 0, 0, 0, 10h, 10h, 20h, 10h, 10h, 10h, 0, 50h,
			50h, 0, 50h, 50h, 0, 50h, 50h, 0, 50h, 50h, 0, 50h,
			50h, 40h, 0, 10h, 10h, 20h, 20h, 60h, 60h, 60h, 60h,
			60h, 60h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 40h, 40h, 0, 0, 10h, 0, 0, 21h, 10h,
			0, 10h, 10h, 10h, 40h, 0, 0, 10h, 10h, 10h, 10h, 12h,
			0, 0, 40h, 0, 0, 0, 0, 0, 0, 10h, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),

	b43F8(*) BYTE public DATA(0, 20h, 40h, 60h, 81h, 81h, 84h, 83h, 83h, 1, 83h,
			82h, 83h, 81h, 81h, 82h, 83h, 83h, 1, 83h, 81h, 82h,
			81h, 81h, 81h, 81h, 81h, 81h, 21h, 22h, 23h, 24h, 82h,
			81h, 82h, 83h, 1, 2, 2, 21h, 22h, 23h, 1, 2, 1, 2,
			3, 2, 4, 5, 4, 4, 5, 4, 3, 4, 3, 21h, 85h, 83h, 83h,
			84h, 83h, 3, 23h, 88h, 89h, 8Dh, 91h, 1, 2, 3, 4, 5,
			4, 3, 2, 5, 4, 3, 2, 4, 5, 6, 6, 5, 4, 3, 62h, 41h,
			1, 2, 2, 2, 1, 8Ah, 82h, 83h, 1, 1, 84h, 61h, 0Ch,
			0Eh, 41h, 42h, 61h, 62h, 3, 2, 1, 62h, 61h, 0, 0, 0,
			0, 0, 84h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 20h, 20h, 20h, 20h, 20h, 22h, 23h, 23h, 23h, 23h,
			6, 6, 6, 1, 1, 1, 2, 20h, 60h, 3, 20h, 40h, 0, 0, 0,
			0, 0, 0, 60h, 60h, 40h, 0, 80h, 84h, 7, 7, 4, 5, 0,
			0, 84h, 84h, 84h, 84h, 84h, 84h, 84h, 84h, 84h, 84h,
			84h, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
			7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
			5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 43h, 43h, 43h, 63h,
			63h, 63h, 23h, 23h, 23h, 23h, 23h, 23h, 23h, 23h, 23h,
			23h, 23h, 23h, 3, 3, 23h, 23h, 23h, 23h, 23h, 23h),

	b44F7(*) BYTE public DATA(55h, 55h, 55h, 55h, 55h, 55h, 50h, 5Ch, 5Dh, 5Eh, 5,
			50h, 5Ch, 5Dh, 0EDh, 0CDh, 0DEh, 0DCh, 0DEh, 0DCh,
			0DEh, 0DCh, 85h, 85h, 85h, 5, 15h, 25h, 35h, 0C5h,
			0D5h, 0E5h, 5, 15h, 25h, 35h, 0C5h, 0D5h, 0E5h, 0C5h,
			0D5h, 0E5h, 0FEh, 85h, 40h, 0B0h, 0B1h, 0B2h, 0BCh,
			0BDh, 80h, 81h, 82h, 8Ch, 8Dh, 5Eh, 15h, 25h, 35h,
			0C5h, 0D5h, 0E5h, 0C5h, 0D5h, 0E5h, 5, 5, 0E5h, 5,
			0E5h, 5, 0E5h, 5, 0E5h, 5, 5, 5, 5, 5, 5, 5, 5, 5,
			5, 5, 5, 5, 5, 0B1h, 0E1h, 0D1h, 0B1h, 0E1h, 0D1h,
			81h, 1, 81h, 1, 81h, 1, 0B1h, 0E1h, 0D1h, 5, 5, 0C5h,
			0D5h, 0E5h, 95h, 0B5h, 0A5h, 5, 0C5h, 0D5h, 0E5h, 95h,
			0A5h, 0B5h, 0C5h, 0D5h, 0E5h, 95h, 0A5h, 0B5h, 5, 15h,
			25h, 35h, 5, 15h, 25h, 35h, 0C5h, 0D5h, 0E5h, 65h,
			75h, 85h, 95h, 0A5h, 0B5h, 0C5h, 0D5h, 0E5h, 65h, 75h,
			85h, 95h, 0A5h, 0B5h, 0BCh, 0BDh, 9Eh, 0AEh, 8Ch, 8Dh,
			6Eh, 7Eh, 6Ah, 7Bh, 8Ah, 86h, 87h, 68h, 78h, 89h, 8Ah,
			6Bh, 7Bh, 0E6h, 0E7h, 0C8h, 0D8h, 0E9h, 0EAh, 0CBh,
			0DBh, 0A6h, 0B7h, 0A8h, 0A9h, 0BAh, 0ABh, 0C5h, 0D5h,
			0E5h, 0C5h, 0D5h, 0E5h, 0C5h, 0D5h, 0E5h, 0C5h, 0D5h,
			0E5h, 0C5h, 0D5h, 0E5h, 0C5h, 0D5h, 0E5h, 5, 0C5h,
			0D5h, 0E5h, 0E5h, 55h, 0EDh, 0CEh, 0DEh, 0ECh, 0A0h,
			0B0h, 0BDh, 0AEh, 0Ah, 0Bh, 0DBh, 0EAh, 80h, 50h, 10h,
			20h, 30h, 9Ah, 0BAh, 0CAh, 8, 5, 1, 2, 3, 0A9h, 0ABh,
			0ACh, 0A0h, 0B0h, 0BDh, 0AEh, 0Ah, 0Bh, 0DBh, 0EAh,
			80h, 50h, 10h, 20h, 30h, 9Ah, 0BAh, 0CAh, 8, 5, 1,
			2, 3, 0A9h, 0ABh, 0ACh, 0E0h, 0EDh, 0Dh, 0CDh, 0Eh,
			0DEh, 0D0h, 0DCh, 0Eh, 0DEh, 0D0h, 0DCh, 8, 5, 1, 2,
			3, 0A9h, 0ABh, 0ACh, 0Bh, 0DBh, 0A0h, 0AEh, 0A9h, 0ABh,
			0ACh, 0Bh, 0DBh, 0A0h, 0AEh, 0Eh, 0DEh, 0D0h, 0DCh,
			8, 5, 1, 2, 3, 8, 5, 1, 2, 3, 0A9h, 0ABh, 0ACh, 0Bh,
			0DBh, 0A0h, 0AEh, 0Eh, 0DEh, 0D0h, 0DCh, 9Ah, 0BAh,
			0CAh, 0B0h, 0BDh, 0Ah, 0EAh, 0E0h, 0EDh, 0Dh, 0CDh,
			80h, 50h, 10h, 20h, 30h, 80h, 50h, 10h, 20h, 30h, 9Ah,
			0BAh, 0CAh, 0B0h, 0BDh, 0Ah, 0EAh, 0E0h, 0EDh, 0Dh,
			0CDh, 8, 5, 1, 2, 3, 0A9h, 0ABh, 0ACh, 0Bh, 0DBh, 0A0h,
			0AEh, 0Eh, 0DEh, 0D0h, 0DCh, 80h, 50h, 10h, 20h, 30h,
			9Ah, 0BAh, 0CAh, 0B0h, 0BDh, 0Ah, 0EAh, 0E0h, 0EDh,
			0Dh, 0CDh, 8, 5, 1, 2, 3, 0A9h, 0ABh, 0ACh, 0Bh, 0DBh,
			0A0h, 0AEh, 0Eh, 0DEh, 0D0h, 0DCh, 80h, 50h, 10h, 20h,
			30h, 9Ah, 0BAh, 0CAh, 0B0h, 0BDh, 0Ah, 0EAh, 0E0h,
			0EDh, 0Dh, 0CDh, 8, 5, 1, 2, 3, 0A9h, 0ABh, 0ACh, 0Bh,
			0DBh, 0A0h, 0AEh, 0Eh, 0DEh, 0D0h, 0DCh, 80h, 50h,
			10h, 20h, 30h, 9Ah, 0BAh, 0CAh, 0B0h, 0BDh, 0Ah, 0EAh,
			0E0h, 0EDh, 0Dh, 0CDh, 8, 5, 1, 2, 3, 0A9h, 0ABh, 0ACh,
			0Bh, 0DBh, 0A0h, 0AEh, 0Eh, 0DEh, 0D0h, 0DCh, 80h,
			50h, 10h, 20h, 30h, 9Ah, 0BAh, 0CAh, 0B0h, 0BDh, 0Ah,
			0EAh, 0E0h, 0EDh, 0Dh, 0CDh, 0CDh, 35h, 0E5h, 15h,
			25h, 35h, 0C5h, 0D5h, 0E5h, 0C5h, 0D5h, 0E5h, 0E5h,
			65h, 75h, 85h, 95h, 0A5h, 0B5h, 65h, 75h, 85h, 65h,
			75h, 85h),

	b46EB(*) BYTE public DATA(18h, 26h, 18h, 18h, 18h, 18h, 0, 12h, 12h, 12h, 2Eh,
			27h, 27h, 27h, 2Dh, 2Ah, 2Dh, 2Ah, 2Bh, 28h, 2Ch, 29h,
			0, 0, 0, 12h, 7, 5, 2, 7, 5, 2, 12h, 7, 5, 2, 7, 5,
			2, 7, 5, 2, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12h, 12h, 2, 12h, 2,
			12h, 2, 12h, 2, 12h, 12h, 12h, 12h, 12h, 12h, 12h,
			12h, 12h, 12h, 12h, 12h, 12h, 12h, 0Ah, 9, 0Bh, 0Ah,
			9, 0Bh, 17h, 17h, 17h, 17h, 17h, 17h, 23h, 22h, 24h,
			12h, 12h, 1Eh, 1Eh, 1Dh, 1Fh, 20h, 1Ch, 12h, 12h, 12h,
			12h, 12h, 12h, 2, 12h, 12h, 12h, 0Dh, 10h, 13h, 12h,
			7, 5, 2, 12h, 7, 5, 2, 7, 5, 2, 7, 5, 2, 7, 5, 2, 7,
			5, 2, 7, 5, 2, 7, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1Ch,
			20h, 1Ch, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
			2, 2, 1Ch, 20h, 1Ch, 1Ch, 20h, 1Ch, 7, 5, 2, 7, 5,
			2, 7, 5, 2, 7, 5, 2, 7, 5, 2, 7, 5, 2, 0, 0, 0, 0,
			0, 0, 2, 2, 2, 2, 1Ch, 20h, 20h, 1Ch, 1Ch, 20h, 20h,
			1Ch, 12h, 12h, 12h, 12h, 12h, 1Ah, 21h, 1Ch, 12h, 12h,
			12h, 12h, 12h, 1Ah, 21h, 1Ch, 1Ch, 20h, 20h, 1Ch, 1Ch,
			20h, 20h, 1Ch, 12h, 12h, 12h, 12h, 12h, 1Ah, 21h, 1Ch,
			12h, 12h, 12h, 12h, 12h, 1Ah, 21h, 1Ch, 1Bh, 1Dh, 19h,
			1Dh, 1Bh, 1Dh, 19h, 1Dh, 1Bh, 1Dh, 19h, 1Dh, 12h, 12h,
			12h, 12h, 12h, 1Ah, 21h, 1Ch, 20h, 20h, 1Ch, 1Ch, 1Ah,
			21h, 1Ch, 20h, 20h, 1Ch, 1Ch, 1Bh, 1Dh, 19h, 1Dh, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 1Ah, 21h, 1Ch, 20h, 20h,
			1Ch, 1Ch, 1Bh, 1Dh, 19h, 1Dh, 1Ah, 21h, 1Ch, 20h, 20h,
			1Ch, 1Ch, 1Bh, 1Dh, 19h, 1Dh, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 1Ah, 21h, 1Ch, 20h, 20h, 1Ch, 1Ch, 1Bh, 1Dh,
			19h, 1Dh, 12h, 12h, 12h, 12h, 12h, 0Eh, 16h, 11h, 15h,
			15h, 11h, 11h, 0Fh, 14h, 0Ch, 14h, 12h, 12h, 12h, 12h,
			12h, 0Eh, 16h, 11h, 15h, 15h, 11h, 11h, 0Fh, 14h, 0Ch,
			14h, 12h, 12h, 12h, 12h, 12h, 0Eh, 16h, 11h, 15h, 15h,
			11h, 11h, 0Fh, 14h, 0Ch, 14h, 12h, 12h, 12h, 12h, 12h,
			0Eh, 16h, 11h, 15h, 15h, 11h, 11h, 0Fh, 14h, 0Ch, 14h,
			12h, 12h, 12h, 12h, 12h, 0Eh, 16h, 11h, 15h, 15h, 11h,
			11h, 0Fh, 14h, 0Ch, 14h, 12h, 12h, 12h, 12h, 12h, 0Eh,
			16h, 11h, 15h, 15h, 11h, 11h, 0Fh, 14h, 0Ch, 14h, 12h,
			12h, 12h, 12h, 12h, 0Eh, 16h, 11h, 15h, 15h, 11h, 11h,
			0Fh, 14h, 0Ch, 14h, 12h, 12h, 12h, 12h, 12h, 0Eh, 16h,
			11h, 15h, 15h, 11h, 11h, 0Fh, 14h, 0Ch, 14h, 25h, 26h,
			26h, 0, 0, 0, 0, 0, 0, 7, 5, 2, 2, 7, 5, 2, 7, 5, 2,
			7, 5, 2, 7, 5, 2),

	w48DF(*) ADDRESS public DATA(0, 1, 1000h, 1000h, 2000h, 2000h, 2000h, 4000h, 4000h,
			5000h, 6008h, 6000h, 5080h, 8040h, 0D088h, 3010h, 8008h,
			9008h, 8000h, 8001h, 9000h, 0A008h, 0D088h, 0C000h,
			0F000h, 5080h, 0D088h, 3010h, 9008h, 9000h, 0A000h,
			0B008h, 0A008h, 0D088h, 0D000h, 0E008h, 0E000h, 0E000h,
			0F000h, 0F000h, 0B000h, 0B000h, 0B000h, 0E000h, 0E000h,
			0E000h, 0C000h),

	w493D(*) ADDRESS public DATA(123h, 123h, 124h, 126h, 134h, 143h, 163h, 423h, 623h,
			624h, 634h, 634h, 4026h, 4123h, 4126h, 4106h, 4123h,
			4126h, 4123h, 4123h, 4126h, 4136h, 4326h, 4623h, 4666h,
			6024h, 6124h, 6104h, 6124h, 6124h, 6134h, 6114h, 6134h,
			6324h, 6624h, 6634h, 6634h, 6663h, 6664h, 6666h, 5146h,
			5164h, 5154h, 5346h, 5364h, 5354h, 5623h),

	b499B(*) BYTE public DATA(10h, 10h, 20h, 20h, 10h, 10h, 2, 2, 5, 5, 5, 5, 1,
			3, 1, 6, 3, 3, 3, 1Ch, 10h, 4, 2, 2, 20h, 20h, 20h,
			0Eh, 7, 4, 8, 7, 7, 6, 6, 6, 20h, 10h, 10h, 10h, 20h,
			20h, 10h, 10h, 3, 7, 7, 3, 7, 7, 3, 1, 1, 1, 1, 1,
			1, 1, 6, 3, 1, 0Eh, 4, 2, 6, 0Dh, 1, 1, 1, 1, 1, 4,
			1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 3, 3, 3, 1Ch, 2, 1, 1),

	b4A21(*) BYTE public DATA(3Fh, 40h, 44h, 43h, 41h, 42h, 60h, 6Ch, 6Ch, 6Ch, 61h,
			64h, 5Fh, 5Fh, 0EBh, 0EFh, 0EBh, 0EFh, 0EBh, 0EFh,
			0EBh, 0EFh, 21h, 22h, 23h, 24h, 24h, 24h, 24h, 27h,
			27h, 27h, 25h, 25h, 25h, 25h, 28h, 28h, 28h, 29h, 29h,
			29h, 3Bh, 26h, 3Ch, 3Dh, 3Dh, 3Dh, 3Eh, 3Eh, 14h, 14h,
			14h, 14h, 14h, 16h, 17h, 17h, 17h, 17h, 17h, 17h, 17h,
			17h, 17h, 4Ch, 45h, 1Ch, 46h, 1Dh, 47h, 1Eh, 48h, 1Fh,
			49h, 4Ah, 4Bh, 4Dh, 4Eh, 4Fh, 50h, 51h, 52h, 53h, 54h,
			55h, 56h, 57h, 0FEh, 0FBh, 0FAh, 0FEh, 0FBh, 0FAh,
			0F7h, 0F8h, 0F7h, 0F8h, 0F7h, 0F8h, 0FEh, 0FBh, 0FAh,
			5Eh, 5Ah, 0F9h, 0FAh, 0FBh, 0FCh, 0FEh, 0FDh, 5Bh,
			62h, 62h, 62h, 9, 9, 12h, 63h, 63h, 63h, 5Ch, 5Ch,
			5Dh, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3,
			3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 58h, 58h, 6Fh, 6Fh, 59h,
			59h, 59h, 59h, 0E5h, 0E6h, 0E7h, 59h, 59h, 59h, 59h,
			65h, 65h, 65h, 65h, 59h, 59h, 59h, 59h, 65h, 65h, 65h,
			65h, 0E5h, 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 2, 2, 2, 68h,
			68h, 68h, 69h, 69h, 69h, 3, 3, 3, 6Ah, 6Ah, 6Ah, 6Bh,
			6Bh, 6Bh, 1Bh, 20h, 20h, 20h, 1Bh, 1Bh, 39h, 39h, 39h,
			39h, 0F3h, 0F4h, 0F5h, 0F6h, 0F3h, 0F4h, 0F5h, 0F6h,
			2Ah, 2Bh, 2Ch, 2Ch, 2Ch, 0F0h, 0F1h, 0F2h, 2Ah, 2Bh,
			2Ch, 2Ch, 2Ch, 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h,
			0F6h, 0F3h, 0F4h, 0F5h, 0F6h, 2Ah, 2Bh, 2Ch, 2Ch, 2Ch,
			0F0h, 0F1h, 0F2h, 2Ah, 2Bh, 2Ch, 2Ch, 2Ch, 0F0h, 0F1h,
			0F2h, 0EDh, 0EBh, 0EEh, 0EFh, 0EDh, 0EBh, 0EEh, 0EFh,
			0EDh, 0EBh, 0EEh, 0EFh, 2Ah, 2Bh, 2Ch, 2Ch, 2Ch, 0F0h,
			0F1h, 0F2h, 0F4h, 0F5h, 0F3h, 0F6h, 0F0h, 0F1h, 0F2h,
			0F4h, 0F5h, 0F3h, 0F6h, 0EDh, 0EBh, 0EEh, 0EFh, 2Ah,
			2Bh, 2Ch, 2Ch, 2Ch, 2Ah, 2Bh, 2Ch, 2Ch, 2Ch, 0B2h,
			0B3h, 0B4h, 0B5h, 0B6h, 0B7h, 0B8h, 0AEh, 0AFh, 0B0h,
			0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h, 0B8h, 0AEh,
			0AFh, 0B0h, 0B1h, 2Ah, 2Bh, 2Ch, 2Ch, 2Ch, 2Ah, 2Bh,
			2Ch, 2Ch, 2Ch, 0F0h, 0F1h, 0F2h, 0F4h, 0F5h, 0F3h,
			0F6h, 0EDh, 0EBh, 0EEh, 0EFh, 2Dh, 2Eh, 2Fh, 2Fh, 2Fh,
			0D3h, 0D4h, 0D5h, 0D6h, 0D7h, 0D8h, 0D9h, 0CFh, 0D0h,
			0D1h, 0D2h, 2Dh, 2Eh, 2Fh, 2Fh, 2Fh, 0D3h, 0D4h, 0D5h,
			0D6h, 0D7h, 0D8h, 0D9h, 0CFh, 0D0h, 0D1h, 0D2h, 36h,
			37h, 38h, 38h, 38h, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h,
			0E4h, 0DAh, 0DBh, 0DCh, 0DDh, 36h, 37h, 38h, 38h, 38h,
			0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0DAh, 0DBh,
			0DCh, 0DDh, 30h, 31h, 32h, 32h, 32h, 0BDh, 0BEh, 0BFh,
			0C0h, 0C1h, 0C2h, 0C3h, 0B9h, 0BAh, 0BBh, 0BCh, 30h,
			31h, 32h, 32h, 32h, 0BDh, 0BEh, 0BFh, 0C0h, 0C1h, 0C2h,
			0C3h, 0B9h, 0BAh, 0BBh, 0BCh, 33h, 34h, 35h, 35h, 35h,
			0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0C4h, 0C5h,
			0C6h, 0C7h, 33h, 34h, 35h, 35h, 35h, 0C8h, 0C9h, 0CAh,
			0CBh, 0CCh, 0CDh, 0CEh, 0C4h, 0C5h, 0C6h, 0C7h, 66h,
			0, 1, 17h, 17h, 17h, 17h, 17h, 17h, 2, 2, 2, 70h, 2,
			2, 2, 3, 3, 3, 2, 2, 2, 3, 3, 3),

	b4C15(*) BYTE public DATA(21h, 42h, 42h, 43h, 41h, 24h, 34h, 43h, 42h, 42h, 42h,
			43h, 45h, 45h, 52h, 53h, 50h, 50h, 0, 0, 60h, 10h,
			70h, 70h),

	b4C2D(*) BYTE public DATA(79h, 1, 61h, 61h, 61h, 61h, 89h, 88h, 89h, 1, 89h,
			89h, 49h, 89h, 89h, 89h, 69h, 89h, 8Fh, 6Fh, 80h, 60h,
			80h, 80h),

	b4C45(*) BYTE public DATA(63h, 0, 37h, 46h, 4, 5, 6, 3Bh, 3Ch, 3, 3Ah, 3, 4,
			4, 6, 3Ah, 3Bh, 3Bh, 5, 6, 3, 4, 5, 4, 5, 6, 5, 5,
			7, 7, 8, 8, 9, 9, 0Bh, 0Bh, 0Ch, 3Bh, 3Ch, 3Ch, 3Ch,
			3Dh, 3Eh, 3Eh, 3Fh, 3Fh, 40h, 40h, 3, 2, 2, 39h, 1,
			2, 4, 4, 38h, 39h, 1, 38h, 3, 4, 4, 5, 7, 8, 3Bh, 3Ch,
			3, 3, 3Ah, 1, 38h, 3, 5, 6, 7, 9, 0Ah, 3Ch, 3Dh, 3Eh,
			2, 39h, 1, 2, 3, 4, 38h, 39h, 2, 2, 4, 4, 5, 39h, 39h,
			1, 2, 4, 2, 4, 5, 6, 8, 9, 39h, 3Bh, 3Ch, 3Dh, 38h),

	b4CB4(*) BYTE public DATA(63h, 0, 1, 32h, 1, 2, 2, 1, 2, 1, 1, 1, 0Bh, 0Dh, 0Dh,
			1, 0Bh, 0Dh, 1, 0Bh, 1, 0Bh, 0Dh, 1, 0Bh, 0Dh, 11h,
			13h, 11h, 13h, 11h, 1Bh, 19h, 1Bh, 19h, 1Bh, 19h, 1,
			0Bh, 11h, 13h, 0Dh, 11h, 13h, 11h, 1Bh, 19h, 1Bh, 1,
			2, 1, 1, 1, 2, 1, 2, 1, 2, 2Fh, 2Fh, 2Fh, 2Dh, 2Fh,
			2Dh, 2Dh, 2Dh, 2Dh, 2Dh, 2Dh, 2Fh, 2Dh, 3, 3, 3, 29h,
			29h, 29h, 29h, 29h, 29h, 29h, 29h, 3, 3, 1, 1, 1, 1,
			1, 1, 1Dh, 1Fh, 1Dh, 1Fh, 1Dh, 1Dh, 1Fh, 3, 3, 3, 2Bh,
			2Bh, 2Bh, 2Bh, 2Bh, 2Bh, 2Bh, 2Bh, 2Bh, 2Bh, 3),

	b4D23(*) BYTE public DATA(1, 47h, 47h, 47h, 0, 0, 0, 0, 0, 0, 0, 0, 49h, 49h,
			49h, 0, 47h, 1, 47h, 47h, 0, 0, 0, 0, 0, 0, 0, 0, 31h,
			49h, 49h, 0, 47h, 47h, 1, 61h, 0, 0, 0, 0, 0, 0, 0,
			0, 49h, 31h, 63h, 0, 47h, 47h, 61h, 1, 0, 0, 0, 0,
			0, 0, 0, 0, 49h, 63h, 31h, 0, 9, 0Dh, 0Ch, 0Bh, 1,
			0, 30h, 30h, 30h, 0, 0, 0, 0Eh, 13h, 12h, 0, 32h, 32h,
			32h, 32h, 0, 1, 0, 0, 0, 0, 0, 0, 30h, 30h, 30h, 0,
			34h, 35h, 35h, 35h, 0, 0, 1, 52h, 52h, 0, 0, 0, 36h,
			37h, 37h, 0, 34h, 64h, 64h, 64h, 0, 0, 52h, 1, 61h,
			0, 0, 0, 65h, 65h, 65h, 0, 3Ah, 3Ah, 3Ah, 3Ah, 0, 0,
			52h, 61h, 1, 0, 0, 0, 3Ch, 3Ch, 3Ch, 0, 38h, 39h, 39h,
			39h, 0, 0, 2, 53h, 53h, 1, 52h, 52h, 4Ah, 4Ah, 4Bh,
			0, 38h, 6Ah, 6Ah, 6Ah, 0, 0, 53h, 2, 6Eh, 52h, 1, 61h,
			65h, 65h, 66h, 0, 3Bh, 3Bh, 3Bh, 3Bh, 0, 0, 53h, 6Eh,
			2, 52h, 61h, 1, 45h, 45h, 3Eh, 0, 48h, 2, 48h, 48h,
			0, 0, 0, 0, 0, 0, 0, 0, 1, 52h, 52h, 0, 48h, 48h, 2,
			6Eh, 0, 0, 0, 0, 0, 0, 0, 0, 52h, 1, 61h, 0, 48h, 48h,
			6Eh, 2, 0, 0, 0, 0, 0, 0, 0, 0, 52h, 61h, 1, 0, 0Ah,
			11h, 10h, 0Fh, 0, 0, 0, 0, 0, 30h, 30h, 30h, 16h, 15h,
			14h, 1, 33h, 33h, 33h, 33h, 0, 0, 0, 0, 0, 0, 0, 0,
			30h, 30h, 30h, 0, 0, 0, 0, 0, 0, 0, 30h, 30h, 30h,
			30h, 30h, 30h, 0, 0, 0, 0, 4Bh, 4Ch, 4Ch, 4Ch, 0, 0,
			4Ah, 4Ah, 4Bh, 0, 0, 0, 4Dh, 4Dh, 4Dh, 0, 66h, 67h,
			67h, 67h, 0, 0, 65h, 65h, 66h, 0, 0, 0, 68h, 68h, 68h,
			0, 3Dh, 3Fh, 3Fh, 3Fh, 0, 0, 44h, 44h, 3Dh, 0, 0, 0,
			40h, 40h, 40h, 0, 50h, 51h, 51h, 51h, 0, 0, 4Fh, 4Fh,
			50h, 4Ah, 4Ah, 4Bh, 4Dh, 4Dh, 4Eh, 0, 6Ch, 6Dh, 6Dh,
			6Dh, 0, 0, 6Bh, 6Bh, 6Ch, 65h, 65h, 66h, 68h, 68h,
			69h, 0, 42h, 43h, 43h, 43h, 0, 0, 46h, 46h, 42h, 44h,
			44h, 3Dh, 40h, 40h, 41h, 0, 47h, 1, 47h, 47h, 0, 0,
			0, 0, 0, 0, 0, 0, 1, 52h, 52h, 0, 47h, 47h, 1, 61h,
			0, 0, 0, 0, 0, 0, 0, 0, 52h, 1, 61h, 0, 47h, 47h, 61h,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 52h, 61h, 1, 0, 8, 8, 8,
			7, 0, 3, 0, 0, 0, 0, 0, 0, 6, 5, 4, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 19h, 18h, 17h, 19h, 18h, 17h, 0, 0, 0, 0, 2Dh, 2Fh,
			2Eh, 2Eh, 0, 0, 2Bh, 2Ah, 2Ch, 1Dh, 1Ch, 1Eh, 23h,
			22h, 24h, 0, 59h, 60h, 5Fh, 5Fh, 0, 0, 58h, 58h, 58h,
			54h, 54h, 54h, 5Dh, 5Ch, 5Eh, 0, 28h, 28h, 27h, 27h,
			0, 0, 29h, 26h, 25h, 19h, 18h, 17h, 1Dh, 1Ch, 1Eh,
			0, 59h, 58h, 58h, 58h, 0, 0, 0, 0, 0, 0, 0, 0, 54h,
			54h, 54h, 0, 55h, 54h, 54h, 54h, 0, 0, 0, 0, 0, 0,
			0, 0, 54h, 54h, 54h, 0, 1Fh, 21h, 20h, 20h, 0, 0, 1Dh,
			1Ch, 1Eh, 0, 0, 0, 23h, 22h, 22h, 0, 55h, 5Bh, 5Ah,
			5Ah, 0, 0, 54h, 54h, 54h, 0, 0, 0, 5Dh, 5Ch, 5Ch, 0,
			1Bh, 1Bh, 1Ah, 1Ah, 0, 0, 19h, 18h, 17h, 0, 0, 0, 1Dh,
			1Ch, 1Ch, 0, 55h, 54h, 54h, 54h, 0, 0, 0, 0, 0, 0,
			0, 0, 56h, 56h, 56h, 0, 54h, 55h, 55h, 55h, 0, 0, 0,
			0, 0, 0, 0, 0, 57h, 57h, 57h, 0),

	b4FA3(*) BYTE public DATA(17h, 16h, 16h, 16h, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2,
			2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5,
			5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6,
			7, 8, 8, 9, 9, 9, 9, 9, 9, 0Ah, 0Ah, 0Bh, 0Ch, 0Ch,
			0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Dh, 0Dh, 0Dh, 0Eh, 0Eh, 0Fh,
			10h, 10h, 10h, 10h, 10h, 10h, 10h, 10h, 11h, 11h, 12h,
			12h, 12h, 12h, 12h, 12h, 13h, 13h, 13h, 13h, 13h, 13h,
			13h, 14h, 14h, 14h, 14h, 14h, 14h, 14h, 14h, 14h, 14h,
			14h, 14h, 14h, 14h),

	b5012(*) BYTE public DATA(6, 8, 0Ah, 3Ah, 0Ah, 6, 7, 0Fh, 6Dh, 9, 12h, 11h, 10h,
			10h, 0Dh, 0Ch, 0Bh, 0Bh, 4, 4, 0Eh, 5, 0, 0),

	w502A(*) ADDRESS public DATA(0, 1, 2, 3, 4, 8, 9, 0Ah, 10h, 0FDh, 0FEh, 0FFh, 0FFFDh,
			0FFFEh, 0FFFFh),

	b5048(*) BYTE public DATA(0, 2Ah, 0, 2Ah, 0, 32h, 0, 32h, 0, 2Ah, 2Ah, 0, 2Ah,
			0, 5Ah, 2, 0Ah, 0, 2, 0, 9, 9, 11h, 11h, 19h, 71h,
			59h, 69h, 51h, 61h, 1, 1, 1, 0, 1, 1, 0, 0Ah, 0Ah,
			12h, 12h, 1Ah, 72h, 5Ah, 6Ah, 52h, 62h, 2, 2, 2, 0,
			0, 11h, 21h, 29h, 39h, 41h, 9, 9, 0, 9, 9, 0, 8, 0,
			59h, 59h, 71h, 71h, 0, 0, 0, 0, 1, 1, 1, 5Bh, 73h,
			0, 1, 1, 1, 59h, 71h, 0, 2, 0Ah, 12h, 2, 0Ah, 12h,
			0, 1, 0, 1, 0, 1, 0, 1, 1, 0),

	b50AD(*) BYTE public DATA(0FFh, 22h, 0FFh, 22h, 0FFh, 22h, 0FFh, 22h, 0FFh, 22h,
			62h, 0FFh, 22h, 0FFh, 4, 4, 4, 0FFh, 50h, 0FFh, 64h,
			85h, 64h, 85h, 64h, 64h, 0A5h, 64h, 0A5h, 64h, 64h,
			5, 4, 0FFh, 64h, 5, 0FFh, 64h, 85h, 64h, 85h, 64h,
			64h, 0A5h, 64h, 0A5h, 64h, 64h, 5, 4, 0FFh, 4, 4, 4,
			4, 4, 4, 64h, 4, 0FFh, 64h, 4, 0FFh, 4, 0FFh, 25h,
			24h, 64h, 4, 4, 0FFh, 4, 0FFh, 64h, 5, 4, 24h, 4, 0FFh,
			64h, 5, 4, 25h, 64h, 0FFh, 14h, 14h, 14h, 4, 4, 4,
			0FFh, 4, 0FFh, 4, 0FFh, 4, 0FFh, 14h, 4, 0FFh),

	b5112(*) BYTE public DATA(5Ah, 61h, 69h, 92h, 92h, 92h, 91h, 91h, 91h, 5Dh, 0D3h,
			0D3h, 0DCh, 9Bh, 9Bh, 98h, 98h, 1Ah),

	b5124(*) BYTE public DATA(2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0Eh, 1, 1, 1, 1,
			1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 1, 1, 1,
			1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 6, 1, 0, 0, 0,
			0, 3, 0, 9, 9, 8, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 9, 0Bh, 0Bh, 81h,
			99h, 91h, 91h, 91h, 81h, 89h, 89h, 89h, 8Ah, 80h, 80h,
			80h, 80h, 80h, 80h, 90h, 0A1h, 0A3h, 0A0h, 0A1h, 0A2h,
			0B0h, 0A0h, 0A0h, 0A0h, 0A0h, 0A0h, 0A3h, 0A3h, 0,
			0, 0, 0, 0, 0, 0, 0, 41h, 41h, 41h, 40h, 0, 0, 0, 0,
			0, 0C0h, 0C0h, 0C0h, 0C0h, 0C0h, 0D8h, 41h, 41h, 41h,
			0C0h),

	b51E3(*) BYTE public DATA(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 12h, 14h, 22h, 33h, 47h, 47h, 41h, 49h, 4Fh, 0,
			5Ch, 5Eh, 60h),

	b5202(*) BYTE public DATA(0, 0, 0, 0, 0, 0, 1, 3, 5, 7, 9, 0Ch, 0Eh, 0, 0, 0,
			0, 0, 0, 14h, 25h, 33h, 3Ch, 3Fh, 41h, 49h, 4Fh, 55h,
			0, 0, 62h),

	b5221(*) BYTE public DATA(0, 4Dh, 0, 55h, 0, 5Dh, 0, 66h, 0, 6Fh, 6Fh, 0, 77h,
			0, 0B6h, 8Dh, 0B6h, 0, 41h, 0, 2Dh, 2Dh, 2Eh, 2Eh,
			2Fh, 30h, 30h, 31h, 31h, 32h, 41h, 41h, 12h, 0, 1Fh,
			1Fh, 0, 30h, 30h, 31h, 31h, 32h, 2Dh, 2Dh, 2Eh, 2Eh,
			2Fh, 41h, 41h, 41h, 0, 0ADh, 42h, 43h, 44h, 2Ch, 46h,
			41h, 12h, 0, 41h, 12h, 0, 0ADh, 0, 41h, 12h, 41h, 12h,
			0ADh, 0, 0ADh, 0, 41h, 41h, 12h, 0ADh, 0ADh, 0, 41h,
			41h, 12h, 20h, 20h, 0, 4Ah, 4Bh, 4Ch, 7Fh, 80h, 81h,
			0, 0Dh, 0, 0Eh, 0, 0Fh, 0, 10h, 11h, 0),

	b5286(*) BYTE public DATA(0Ch, 9, 0, 1, 8, 0, 0),

	b528D(*) BYTE public DATA(0, 0, 0, 0, 0, 0, 2, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1,
			8, 4, 4, 4, 5, 5, 5, 6, 6, 6, 0Ah, 9, 8, 3, 3, 1, 1,
			6, 2, 2, 0, 0, 0Bh),

	b52B5(*) BYTE public DATA(0, 1, 2, 3, 4, 8, 1, 2, 3, 1, 2, 3, 1, 2, 3, 4, 8,
			4, 1, 2, 3, 1, 2, 3, 1, 2, 3, 8, 8, 0Ah, 0Ah, 9, 0Ah,
			9, 9, 0Ah, 9, 0Ah, 9, 9),

	b52DD(*) BYTE public DATA(0, 1, 2, 3, 4, 0, 0, 0, 5, 26h, 25h, 0, 0Ch, 0Dh, 0Eh,
			0Fh, 0, 0, 0, 10h, 21h, 20h, 0, 6, 7, 8, 0, 0, 0, 0,
			0, 24h, 23h, 0, 9, 0Ah, 0Bh, 0, 0, 0, 0, 0, 1Fh, 1Eh,
			0, 12h, 13h, 14h, 0, 0, 0, 0, 0, 0, 0, 0, 15h, 16h,
			17h, 0, 0, 0, 0, 0, 0, 0, 0, 18h, 19h, 1Ah, 0, 0, 0,
			0, 0, 22h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 11h, 0, 0, 0, 0, 0, 1Dh, 0, 0, 0, 0, 0, 0, 0,
			0, 1Ch, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1Bh, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 27h, 0);



wrFragData: procedure public;
	if not (PRINT or OBJECT) then
	do;
		if buf$C1E7(0) = 9Ah or buf$C1E7(0) = 9Bh or buf$C1E7(0) = 0A3h then
			programErrCnt = programErrCnt + 1;  
		return;
	end;
	call fwrite(.tx1File, .buf$C1E7, bC1E6);
end;


putTx1Byte: procedure(arg1b) public;
	declare arg1b byte;
	buf$C1E7(bC1E6) = arg1b;
	bC1E6 = bC1E6 + 1;
end;


putTx1Word: procedure(arg1w) public;
	declare arg1w address;
	call putTx1Byte(low(arg1w));
	call putTx1Byte(high(arg1w));
end;

encodeFragData: procedure(arg1b) public;
	declare arg1b byte;

	sub$5410: procedure;
		declare (bC214, bC215) byte;

		sub$545D: procedure;
			declare j byte;
			j = wC1DC(bC214);
			if wC1DC(0) <= 12 then
			do;
				if bC1E6 = bC215 then
					call putTx1Byte(j);
				else	
					buf$C1E7(bC215)  = ROL(buf$C1E7(bC215), 4) or j;
			end;
			bC214 = bC214 + 1;  
			if j > 7 then
			do;
				if j = 8 or j = 13 or j = 10 then
					call putTx1Byte(wC1DC(bC214));
				else
					call putTx1Word(wC1DC(bC214));

				bC214 = bC214 + 1;  
				if j >= 10 and j < 12 then
				do;
					call putTx1Word(wC1DC(bC214));
					bC214 = bC214 + 1;  
				end;
				else if j = 12 then
				do;
					call putTx1Word(wC1DC(bC214));
					call putTx1Word(wC1DC(bC214+1));
					bC214 = bC214 + 2;
				end;
			end;
		end sub$545D;

/* sub$5410 */	bC214 = 0;
		bC215 = bC1E6;
		if (shr(b4029(arg1b), 4) and 7) <> 0 then
		do;
			call sub$545D;
			if wC1DC(bC214) <> 0 or wC1DC(0) <= 12 then
				call sub$545D;
		end;
	end sub$5410;

/* encodeFragData */
	bC1E6 = 0;
	call putTx1Byte(arg1b);
	if rol(b4029(arg1b), 1) then
		call putTx1Byte(curOp);
	call sub$5410;
	call FILLX(10, .wC1DC(0), 0);
	call wrFragData;
end;



emitTopItem: procedure public;
	bC1E6 = 0;
	if not PRINT then
		if tx2opc(tx2qp) = T2$LINEINFO or tx2opc(tx2qp) = T2$INCLUDE then
			return;
	call putTx1Byte(tx2opc(tx2qp));
	if rol(b4029(tx2opc(tx2qp)), 1) then
	do;
		call putTx1Byte(tx2op2(tx2qp));
		call putTx1Word(tx2op1(tx2qp));
	end;
	else 
		do case b5124(tx2opc(tx2qp)) and 3;
			;
			call putTx1Word(tx2op1(tx2qp));
			do;
				call putTx1Word(tx2op1(tx2qp));
				call putTx1Word(tx2op2(tx2qp));
			end;
			do;
				call putTx1Word(tx2op1(tx2qp));
				call putTx1Word(tx2op2(tx2qp));
				call putTx1Word(tx2op3(tx2qp));
			end;
		end;
	call wrFragData;
end;

tx2SyntaxError: procedure(arg1b) public;
	declare arg1b byte;
	tx2opc(tx2qp) = T2$SYNTAXERROR;
	tx2op1(tx2qp) = arg1b;
end;

sub$5679: procedure(arg1b) byte public;
	declare arg1b byte;
	if arg1b = 0 then
		return shr(b44F7(wC1D6), 4);
	else
		return b44F7(wC1D6) and 0fh;
end;

sub$56A0: procedure(arg1b, arg2b) public;
	declare arg1b byte, arg2b byte;
	tx2opc(arg2b) = tx2opc(arg1b);
	tx2Aux1b(arg2b) = tx2Aux1b(arg1b);
	tx2Aux2b(arg2b) = tx2Aux2b(arg1b);
	tx2op1(arg2b) = tx2op1(arg1b);
	tx2op2(arg2b) = tx2op2(arg1b);
	tx2op3(arg2b) = tx2op3(arg1b);
	tx2Auxw(arg2b) = tx2Auxw(arg1b);
end;


sub$5748: procedure(arg1b) byte public;
	declare arg1b byte;
	if arg1b = 8 then
		return 2;
	else
		return arg1b + 2;
end;

sub$575E: procedure(arg1w) address public;
	declare arg1w address;
	declare i byte;

	curInfo$p = arg1w;
	i = getType;
	if i = BYTE$T then
		return 1;
	if i = ADDRESS$T then
		return 2;
	if i = STRUCT$T then
		return getParentOffset;
	/*  fall though appears suspect */
end;

sub$5795: procedure(arg1w) public;
	declare arg1w address;
	declare (p, q) address;
	p = arg1w + shl(wC1C3, 1);
	q = shr(p, 1) + (p and 1) + 2;
	if curOp = T2$RETURNWORD then
		q = q - 2;
	if q > 7 then
	do;
		if bC0B5(0) = 3 then
			call encodeFragData(CF$XCHG);
		wC1DC(0) = 9;
		wC1DC(1) = p;
		call encodeFragData(CF$6);
		call encodeFragData(CF$SPHL);
		if bC0B5(0) = 3 then
		do;
			call encodeFragData(CF$XCHG);
			pc = pc + 7;
		end;
		else 
			pc = pc + 5;
	end;
	else
	do;
		if p then
		do;
			call encodeFragData(CF$INXSP);
			pc = pc + 1;  
		end;
		do while p > 1;
			if bC0B5(0) = 3 then
				wC1DC(0) = 2;	/*  pop d */
			else
				wC1DC(0) = 3;	/*  pop h */
			wC1DC(1) = 8;
			call encodeFragData(CF$POP);
			pc = pc + 1;  
			p = p - 2;
		end;
	end;
	if arg1w > 0ff00h then
		wC1C3 = shr(-arg1w, 1);
	else
		wC1C3 = 0;
end;

enterBlk: procedure byte public;
	if blkSP < 14h then
	do;
		blkSP = blkSP + 1;  
		return TRUE;
	end;
	else
	do;
		if blkOverCnt = 0 then
		do;
		  call tx2SyntaxError(ERR204);	/*  LIMIT EXCEEDED: NUMBER OF ACTIVE */
						/*  PROCEDURES AND DO CASE GROUPS */
		  call emitTopItem;
		end;
		blkOverCnt = blkOverCnt + 1;  
		return FALSE;
	end;
end;



exitBlk: procedure byte public;
	if blkOverCnt > 0 then
	do; 
		blkOverCnt = blkOverCnt - 1;  
		return FALSE;
	end;
	else if blkSP > 0 then
	do; 
		blkSP = blkSP - 1;  
		return TRUE;
	end;
	else
	do;
		call tx2SyntaxError(ERR205);	/*  ILLEGAL NESTING OF BLOCKS, ENDS NOT BALANCED */
		call emitTopItem;
		return FALSE;
	end;
end;


sub$58F5: procedure(arg1b) public;
	declare arg1b byte;
	fatalErrorCode = arg1b;
	buf$C1E7(0) = 9ah;
	buf$C1E7(1) = fatalErrorCode;
	buf$C1E7(2) = 0;
	bC1E6 = 3;
	call wrFragData;

	do while blkSP > 0;
		if exitBlk then
		do;
			if procChainId > blkSP then
			do;
				curInfo$p = blkCurInfo(procChainId);
				call setDimension(pc);
				call setBaseVal(wC1C5);
				procChainId = procChainNext(procChainId);
				pc = wB488(procChainId);
				wC1C5 = wB4D8(procChainId);
			end;
		end;
	end;
	goto finalise;
end;


sub$597E: procedure public;
	declare (i, j, k, m, n) byte;
	bC0B2 = 0;
	bC0B1 = 0;
	do i = 0 to 3;
		boC069(i) = FALSE;
		boC072(i) = FALSE;
		boC07B(i) = FALSE;
		k = bC04E(i);
		n = b5124(tx2opc(k)) and 0c0h;
		if k <> 0 then
		do;
			boC060(i) = TRUE;
			if bC0B5(0) = i or bC0B5(1) = i then
			do;
				boC069(i) = TRUE;
				if i > 0 then
					bC0B2 = bC0B2 + 1;  
			end;
			if n = 0 or n = 80h then
			do;
				if tx2op3(k) = 0 then
				do;
					if tx2Aux1b(k) = bC045(i)
					  or (tx2Aux1b(k) = 0 and bC045(i) = 6) then
					do;
						if tx2Auxw(k) > 1 or boC069(i)
						  or (bC0B7(0) <> k and k <> bC0B7(1)) then
							boC072(i) = TRUE;
					end;
				end;
			end;
		end;
		else 
			boC060(i) = boC057(i);
	end;

	do i = 0 to 3;
		if boC072(i) then
		do;
			boC07B(i) = TRUE;
			m = boC069(i);
			j = 3;
			do while j > i;
				if boC072(j) then
				do;
					if bC04E(j) = bC04E(i) then
					do;
						boC072(j) = FALSE;
						if i <> 0 then
						do;
							boC072(i) = FALSE;
							m = m or  boC069(j);
						end;
					end;
				end;
				j = j - 1;
			end;
			if i <> 0 and not m then
				bC0B1 = bC0B1 + 1;  
		end;
	end;
end;


sub$5B96: procedure(arg1b, arg2b) public;
	declare arg1b byte, arg2b byte;
	bC04E(arg2b) = bC04E(arg1b);
	bC045(arg2b) = bC045(arg1b);
	wC084(arg2b) = wC084(arg1b);
	bC0A8(arg2b) = bC0A8(arg1b);
	wC096(arg2b) = wC096(arg1b);
	boC057(arg2b) = boC057(arg1b);
end;


sub$5C1D: procedure(arg1b) public;
	declare arg1b byte;
	declare i byte;
	call sub$597E;
	i, bC140(wC1C3) = bC04E(arg1b);
	if boC072(arg1b) then
		tx2op3(i) = wC1C3;

	if arg1b <> 0 then
		bC0C3(wC1C3) = shl(bC045(arg1b), 4) or (bC0A8(arg1b) and 0fh);
	else
		bC0C3(wC1C3) = 0B0h;
end;

sub$5C97: procedure(arg1b) public;
	declare arg1b byte;
	declare i byte;
	i, bC04E(arg1b) = bC140(wC1C3);
	if wC1C3 = tx2op3(i) then
		tx2op3(i) = 0;

	boC057(arg1b) = 0;
	bC045(arg1b) = shr(bC0C3(wC1C3), 4);
	bC0A8(arg1b) = bC0C3(wC1C3) and 0fh;
	if bC0A8(arg1b) > 7 then
		bC0A8(arg1b) = bC0A8(arg1b) or  0f0h;
end;


sub$5D27: procedure(arg1b) public;
	declare arg1b byte;
	if wC1C5 < shl(wC1C3 := wC1C3 + 1, 1) then
		wC1C5 = shl(wC1C3, 1);
	call sub$5C1D(arg1b);
	wC1DC(0) = arg1b;
	wC1DC(1) = 0Ah;
	wC1DC(2)= wC1C3;
	call encodeFragData(CF$PUSH);
	pc = pc + 1;  
end;


sub$5D6B: procedure(arg1b) public;
	declare arg1b byte;
	declare bC233 byte;

	sub$5E16: procedure	/*  nested */;
		do bC233 = 0 to 3;
			if boC072(bC233) then
				if not boC069(bC233) then
					call sub$5D27(bC233);
		end;
		if bC0B5(0) = arg1b then
			bC0B5(0) = 9;
		else
			bC0B5(1) = 9;
	end sub$5E16;

/* sub$5D6B */
	if boC072(arg1b) then
	do;
		if boC069(arg1b) then
			call sub$5E16;
		call sub$5D27(arg1b);
	end;
	else if boC069(arg1b) then
	do;
		do bC233 = 0 to 3;
			if bC04E(bC233) = bC04E(arg1b) then
			do;
				if bC233 <> arg1b then
				do;
					if bC045(bC233) = bC045(arg1b) then
					do;
						if bC0B5(0)  = arg1b then
							bC0B5(0) = bC233;
						else
							bC0B5(1) = bC233;
						return;
					end;
				end;
			end;
		end;
		call sub$5E16;
		call sub$5D27(arg1b);
	end;
end;




sub$5E66: procedure(arg1b) public;
	declare arg1b byte;
	declare (i, j, k) byte;
	j = bC0B7(0);
	k = bC0B7(1);
	bC0B7(0) = 0;
	bC0B7(1) = 0;
	arg1b = ROR(arg1b, 3);
	call sub$597E;
	do i = 0 to 3;
		if arg1b then
		do;
			if boC072(i) then
				call sub$5D27(i);
			boC057(i) = 0;
			bC04E(i) = 0;
			call sub$597E;
		end;
		arg1b = ROL(arg1b, 1);
	end;
	bC0B7(0) = j;
	bC0B7(1) = k;
end;


sub$5EE8: procedure public;
	declare i byte;
	call sub$5795(wC1C7);
	if (curInfo$p := blkCurInfo(procChainId)) <> 0 then
	do;
		if testInfoFlag(F$INTERRUPT) then
		do;
			do i = 0 to 3;
				wC1DC(0) = i;	/*  pop psw, pop b, pop d, pop h */
				wC1DC(1) = 8;
				call encodeFragData(CF$POP);
			end;
			call encodeFragData(CF$EI);
			pc = pc + 5;
		end;
	end;
end;


sub$5F4B: procedure(arg1w, arg2w, arg3b, arg4b) public;
	declare arg1w address, arg2w address, arg3b byte, arg4b byte;
	tx2op2(tx2qp) = arg1w;
	tx2op1(tx2qp) = arg2w;
	tx2Aux1b(tx2qp) = arg3b;
	tx2Aux2b(tx2qp) = arg4b;
	if arg4b = 8 then
		tx2opc(tx2qp) = T2$NUMBER;
	else
		tx2opc(tx2qp) = T2$VARIABLE;
end;

sub$5FBF: procedure(arg1b, arg2w$p, arg3w$p) public;
	declare arg1b byte, arg2w$p address, arg3w$p address;
	declare arg2w based arg2w$p address;
	declare arg3w based arg3w$p address;

	if tx2opc(arg1b) = T2$VARIABLE or tx2opc(arg1b) = T2$NUMBER then
	do;
		arg2w = tx2op2(arg1b);
		if (curInfo$p := tx2op1(arg1b)) = 0 then
			arg3w = 0;
		else if testInfoFlag(F$MEMBER) then
			arg3w = 0;
		else if testInfoFlag(F$BASED) then
			arg3w = 0;
		else if testInfoFlag(F$ABSOLUTE) then
			arg3w = 0;
		else if testInfoFlag(F$AUTOMATIC) then
			arg3w = 100h;
		else if testInfoFlag(F$EXTERNAL) then
			arg3w = 400h or getExternId;
		else if testInfoFlag(F$MEMORY) then
			arg3w = 800h;
		else if getType = PROC$T then
			arg3w = 1000h or getProcId;
		else if testInfoFlag(F$DATA) then
			arg3w = 200h;
		else
			arg3w = 2000h;
	end;
	else if arg1b = 0 then
	do; 
		arg2w = 0;
		arg3w = 0;
	end;
	else
	do;
		arg2w = 0;
		arg3w = 4000h;
	end;
end;


sub$611A: procedure public;
	declare (i, j, k) byte;
	do i = 0 to 1;
		j = bC0B7(i);
		if j <> 0 then
		do;
			tx2Auxw(j) = tx2Auxw(j) - 1;
			if tx2Auxw(j) = 0 then
			do;
				do k = 0 to 3;
					if bC04E(k) = j then
						bC04E(k) = 0;
				end;
				bC140(tx2op3(j)) = 0;
			end;
		end;
	end;
end;



sub$61A9: procedure(arg1b) public;
	declare arg1b byte;
	bC0C1(arg1b) = b52DD(11 * bC0B3(arg1b) + bC0B5(arg1b));
end;

sub$61E0: procedure(arg1b) public;
	declare arg1b byte;
	if (b5124(tx2opc(arg1b)) and 0c0h) = 0 then
	do;
		wC1DC(bC1DB) = 0ah;
		wC1DC(bC1DB + 1) = tx2op3(arg1b);
		wC1DC(bC1DB + 2) = shl(wC1C3 - tx2op3(arg1b), 1);
		bC1DB = bC1DB + 3;
	end;
	else if tx2op1(arg1b) <> 0 then
	do;
		curInfo$p = tx2op1(arg1b);
		wC1DC(bC1DB + 2) = curInfo$p - botInfo;
		wC1DC(bC1DB + 1) = tx2op2(arg1b) - getLinkVal;
		if testInfoFlag(F$AUTOMATIC) then
		do;
			wC1DC(bC1DB) = 0ch;
			wC1DC(bC1DB + 3) = tx2op2(arg1b) + shl(wC1C3, 1);
			bC1DB = bC1DB + 4;
		end;
		else
		do;
			wC1DC(bC1DB) = 0bh;
			bC1DB = bC1DB + 3;
		end;
	end;
	else
	do;
		if tx2op2(arg1b) < 100h then
			wC1DC(bC1DB) = 8;
		else
			wC1DC(bC1DB) = 9;
		wC1DC(bC1DB + 1) = tx2op2(arg1b);
		bC1DB = bC1DB + 2;
	end;
end;


sub$636A: procedure(arg1b) public;
	declare arg1b byte;
	if bC0B5(arg1b) <= 3 then
	do;
		wC1DC(bC1DB) = bC0B5(arg1b);
		bC1DB = bC1DB + 1;  
	end;
	else
		call sub$61E0(bC0B7(arg1b));
end;


sub$63AC: procedure(arg1b) public;
	declare arg1b byte;
	if arg1b > 3 then
		return;
	if bC045(arg1b) <= 6 then
	do;
		do while bC0A8(arg1b) <> 0;
			if bC0A8(wC1DC(0) := arg1b) > 7fh then
			do;
				bC0A8(arg1b) = bC0A8(arg1b) + 1;  
				call encodeFragData(CF$INX);
			end;
			else
			do;
				bC0A8(arg1b) = bC0A8(arg1b) - 1;  
				call encodeFragData(CF$DCX);
			end;
			pc = pc + 1;  
		end;
	end;
end;


sub$6416: procedure(arg1b) public;
	declare arg1b byte;
	wC1DC(0) = arg1b;
	wC1DC(1) = 0ah;
	wC1DC(2) = wC1C3;
	call encodeFragData(CF$POP);
	pc = pc + 1;  
	call sub$5C97(arg1b);
	wC1C3 = wC1C3 - 1;  
end;

getTx2Item: procedure public;
	call fread(.tx2File, .tx2opc(tx2qp), 1);
	do case 3 and b5124(tx2opc(tx2qp));
		if tx2opc(tx2qp) = T2$EOF then
			eofSeen = TRUE;
		call fread(.tx2File, .tx2op1(tx2qp), 2);
		do;
			call fread(.tx2File, .tx2op1(tx2qp), 2);
			call fread(.tx2File, .tx2op2(tx2qp), 2);
		end;
		do;
			call fread(.tx2File, .tx2op1(tx2qp), 2);
			call fread(.tx2File, .tx2op2(tx2qp), 2);
			call fread(.tx2File, .tx2op3(tx2qp), 2);
		end;
	end;
end;


sub$652B: procedure public;
	if curOp = T2$MODULE then
	do;
		if tx2opc(tx2qp - 1) = T2$LABELDEF then
		do;
			curInfo$p = tx2op1(tx2qp - 1) + botInfo;
			if not (testInfoFlag(F$MODGOTO) or testInfoFlag(F$PUBLIC)) then
				tx2qp = tx2qp - 1;  
		end;
	end;
	else if curOp = T2$LINEINFO then
	do;
		if tx2op2(tx2qp) = 0 then
		do;
			if tx2opc(tx2qp - 1) = T2$LINEINFO then
			do;
				if tx2op2(tx2qp - 1) = 0 then
				do;
					tx2op3(tx2qp - 1) = tx2op1(tx2qp);
					tx2qp = tx2qp - 1;  
				end;
			end;
		end;
	end;
end;


fillTx2Q: procedure public;
	declare (i, j, k) byte;
	tx2qp = 4;
	if tx2qEnd > bC1BF then
	do;
		k = tx2qEnd - bC1BF;
		call movmem(k, .tx2opc(bC1BF), .tx2opc(tx2qp));
		call movmem(k, .tx2Aux1b(bC1BF), .tx2Aux1b(tx2qp));
		call movmem(k, .tx2Aux2b(bC1BF), .tx2Aux2b(tx2qp));
		call movmem(k * 2, .tx2op1(bC1BF), .tx2op1(tx2qp));
		call movmem(k * 2, .tx2op2(bC1BF), .tx2op2(tx2qp));
		call movmem(k * 2, .tx2op3(bC1BF), .tx2op3(tx2qp));
		call movmem(k * 2, .tx2Auxw(bC1BF), .tx2Auxw(tx2qp));
		tx2qp = k + 4;
		bC1BF = bC1BF + k;
	end;
	i = TRUE;
	j = FALSE;
	do while tx2qp < 255 and not eofSeen;
		call getTx2Item;
		curOp = tx2opc(tx2qp);
		call sub$652B;
		if tx2qp = 4 then
		do;
			if curOp = T2$STMTCNT or curOp = T2$LOCALLABEL
			  or curOp = T2$EOF then
				tx2qp = tx2qp + 1;  
			else if (b5124(curOp) and 20h) <> 0 then
				call emitTopItem;
			else if i then
			do;
				i = FALSE;
				call tx2SyntaxError(ERR200);	/*  LIMIT EXCEEDED */
							/*  STATEMENT SIZE */
				call emitTopItem;
			end;
		end;
		else
			tx2qp = tx2qp + 1;  

		if (b5124(curOp) and 8) <> 0 then
			j = TRUE;
		if j then
			if curOp  = T2$STMTCNT or curOp = T2$EOF
			  or curOp = T2$LOCALLABEL then
				goto break;
	end;
break:
	tx2qEnd = tx2qp;
end;



sub$67A9: procedure public;
	declare i byte;

	skipBB: procedure(arg1b, arg2b);
		declare arg1b byte, arg2b byte;
		bC1BF = arg1b + arg2b;
		do while tx2opc(bC1BF) <> T2$STMTCNT and tx2opc(bC1BF) <> T2$EOF
		  and tx2opc(bC1BF) <> T2$LOCALLABEL;
			bC1BF = bC1BF + arg2b;
		end;
	end;

	call skipBB(tx2qEnd, 0ffh);
	i = 0;
	if bC1BF = 4 and not eofSeen then
		bC1BF = tx2qEnd;
	else
		do tx2qp = 4 to bC1BF - 1;
			bC1D2 = b5124(tx2opc(tx2qp));
			if (bC1D2 and 10h) <> 0 then
			do;
				if i + 4 < tx2qp then
				do;
					if tx2opc(tx2qp) = T2$LOCALLABEL then
						bC1BF = tx2qp;
					else
						call skipBB(tx2qp, 0ffh);
					return;
				end;
				i = i + 1;  
			end;
			if (bC1D2 and 8) <> 0 then
			do;
				call skipBB(tx2qp, 1);
				return;
			end;
			if (bC1D2 and 20h) <> 0 then
				i = i + 1;  
		end;
end;


end;
src/plm2b.plm
plm2b: DO;
$include(:f2:plm2b.ipx)

sub$689E: procedure public;
	sub$68E8: procedure;
		declare bC252 byte;
		declare i byte;

		sub$69EB: procedure(arg1b, arg2w$p);
		    declare arg1b byte, arg2w$p address;
		    declare arg2w based arg2w$p address;
		    declare p address;
		    if arg2w <> 0 then
		    do;
			if arg1b > bC252 then
			    arg2w = 0;
			else
			do;
			    p = arg2w;
			    arg2w = tx2qp;

			    do while p <> 0;
				p = p - 1;  
				arg2w = arg2w - 1;
				if tx2opc(arg2w) = T2$LINEINFO then
				    if tx2op2(arg2w) = 0 then
					if tx2op3(arg2w) <> 0 then
					    p = p -(tx2op3(arg2w) - tx2op1(arg2w));
			    end;
			end;
		    end;
		end sub69EB;

	/* sub$68E8 */
		bC252 = bC1D2 and 3;
		if (bC1D2 and 4) <> 0 then
		do;
			tx2op2(1) = tx2op1(tx2qp);
			tx2op1(tx2qp) = 1;
		end;
		else
			call sub$69EB(1, .tx2op1(tx2qp));

		call sub$69EB(2, .tx2op2(tx2qp));
		if bC252 = 3 then
		do;
			if curOp = T2$CALL then
				tx2op3(tx2qp) = tx2op3(tx2qp) + botInfo;
			else if  curOp = T2$BYTEINDEX or curOp = T2$WORDINDEX then
			do;
				i = tx2op1(tx2qp);
				tx2op2(i) = tx2op2(i) + tx2op3(tx2qp) *sub$575E(tx2op1(i));
			end;
			else
				call sub$69EB(3, .tx2op3(tx2qp));
		end;
		tx2Aux1b(tx2qp) = 0ch;
		tx2Aux2b(tx2qp) = 9;
	end;

	sub$6AA4: procedure;
		if curOp = T2$VARIABLE then
		do;
			curInfo$p, tx2op1(tx2qp) = tx2op1(tx2qp) + botInfo;
			if testInfoFlag(F$MEMBER) then
			do;
				curInfo$p = getParentOffset;
				tx2Aux2b(tx2qp) = 4;
			end;
			else if testInfoFlag(F$AUTOMATIC) then
				tx2Aux2b(tx2qp) = 0ah;
			else
				tx2Aux2b(tx2qp) = 4;
			curInfo$p = tx2op1(tx2qp);
			tx2op2(tx2qp) = getLinkVal;
			tx2Aux1b(tx2qp) = b5286(getType);
		end;
		else if curOp <= T2$BIGNUMBER then
		do;
			tx2op2(tx2qp) = tx2op1(tx2qp);
			tx2Aux2b(tx2qp) = 8;
			tx2op1(tx2qp) = 0;
			if curOp = T2$BIGNUMBER then
			do;
				tx2Aux1b(tx2qp) = 1;
				tx2opc(tx2qp) = T2$NUMBER;
			end;
			else
				tx2Aux1b(tx2qp) = 0;
		end;
		else
		do;
			tx2Aux1b(tx2qp) = 0;
			tx2op2(tx2qp) = 0;
		end;
	end;

/* sub$679E */
	do tx2qp = 4 to bC1Bf - 1;
		curOp = tx2opc(tx2qp);
		bC1D2 = b5124(curOp);
		if (bC1D2 and 0c0h) = 0 then
			call sub$68E8;
		else if (bC1D2 and 0c0h) = 40h then
			call sub$6AA4;
	end;
end;

END;
src/plm2c.plm
plm2c: DO;
$include(:f2:plm2c.ipx)


sub$6BD6: procedure public;
	declare (bC259, bC25A) byte;



	sub$6C54: procedure(arg1b);
	    declare arg1b byte;
	    if arg1b <> 0 then
		tx2Auxw(arg1b) = tx2Auxw(arg1b) + 1;  
	end;



	sub$6C73: procedure(arg1b);
	    declare arg1b byte;
	    if OPTIMIZE  then
		do while tx2qp - 1 > arg1b;
		    arg1b = arg1b + 1;
		    if tx2opc(arg1b) = curOp then
		    do;
			if tx2op1(arg1b) = tx2op1(tx2qp) then
			do;
			    if tx2op2(arg1b) = tx2op2(tx2qp) then
			    do;
				if tx2Aux1b(arg1b) = tx2Aux1b(tx2qp) then
				do;
				    if tx2op3(arg1b) <> 0ff00h then
				    do;
				    	tx2opc(tx2qp) = T2$OPTBACKREF;
				    	tx2op1(tx2qp) = arg1b;
				    	return;
				    end;
				end;
			    end;
			end;
		    end;
		end; 
	    if (bC1D2 and 0c0h) = 0 then
	    do;
		call sub$6C54(tx2op1(tx2qp));
		call sub$6C54(tx2op2(tx2qp));
	    end;
	    tx2op3(tx2qp) = tx2qp;
	end;


	sub$6D52: procedure;
	    declare boC25D byte;

	 	sub$6EAB: procedure(arg1w$p);
		    declare arg1w$p address;
		    declare arg1w based arg1w$p address;
		    if arg1w <> 0 then
		    do;
			if tx2opc(arg1w) = T2$OPTBACKREF then 
			    arg1w = tx2op1(arg1w);
		    end;
		end;

	


		sub$6EE1: procedure(arg1b);
		    declare arg1b byte;

			sub$6F20: procedure(arg1b);
			    declare arg1b byte;
			    declare i byte;
			    if (i := tx2opc(arg1b)) = T2$BASED then
				boC25D = 0ffh;
			    else if i = T2$BYTEINDEX or i = T2$WORDINDEX then
			    do;
				if tx2opc(tx2op2(arg1b)) <> T2$NUMBER then
				    boC25D = 0ffh;
				else
				do;
				    curInfo$p = tx2op1(tx2op1(arg1b));
				    if tx2op2(tx2op2(arg1b)) >= getDimension or testInfoFlag(F$AT) then
					boC25D = 0ffh;
				end;
			    end;
			    else if i = T2$VARIABLE then
			    do;
				curInfo$p = tx2op1(arg1b);
				if testInfoFlag(F$AT) then
				    boC25D = 0ffh;
			    end;
			end sub$6F20;

	/* sub$6EE1 */
		    boC25D = 0;
		    if tx2opc(arg1b) = T2$MEMBER then
		    do;
			call sub$6F20(tx2op1(arg1b));
			call sub$6F20(tx2op2(arg1b));
		    end;
		    else
			call sub$6F20(arg1b);
		end;





		sub$6FE2: procedure byte;
		    declare bC263 byte;

		    sub$7018: procedure(arg1b);
			declare arg1b byte;
			if tx2opc(arg1b) <> T2$CALL then
			    arg1b = tx2op3(arg1b);
			if arg1b <> 0 then
			    if arg1b > bC263 then
				bC263 = arg1b;
		    end;

		    if boC25D then
			bC263 = bC259;
		    else
			bC263 = bC25A;

		    call sub$7018(tx2op1(tx2qp));
		    call sub$7018(tx2op2(tx2qp));
		    return bC263;
		end;


		sub$7055: procedure;
			bsub$70BC: procedure(arg1b) byte;
			    declare arg1b byte;
			    call sub$6EE1(tx2op1(arg1b));
			    if boC25D then
				return TRUE;
			    if tx2op1(arg1b) = 0ach then
			    do;
				curInfo$p = tx2op1(tx2op1(arg1b));
				if testInfoFlag(F$AUTOMATIC) then
				    return TRUE;
			    end;
			    return FALSE;
			end;
		/* sub$7055 */
		    if bsub$70BC(tx2qp) then
			bC25A = tx2qp;
		    if tx2op3(tx2op1(bC259 := tx2qp)) <> 0ff00h then
			tx2op3(tx2op1(tx2qp)) = tx2qp;
		    call sub$6C54(tx2op1(tx2qp));
		    call sub$6C54(tx2op2(tx2qp));
		end;

	    call sub$6EAB(.tx2op1(tx2qp));
	    call sub$6EAB(.tx2op2(tx2qp));
	    if curOp = T2$STORE then
		call sub$7055;
	    else if procCallDepth > 0 then
	    do;
		call sub$6C54(tx2op1(tx2qp));
		call sub$6C54(tx2op2(tx2qp));
		if curOp = T2$CALL then
		    procCallDepth = procCallDepth - 1;  
		else if curOp = T2$MOVE or curOp = T2$CALLVAR then
		do;
		    procCallDepth = procCallDepth - 1;  
		    call sub$6EAB(.tx2op3(tx2qp));
		    call sub$6C54(tx2op3(tx2qp));
		end;
		else
		    tx2op3(tx2qp) = 0ff00h;
	    end;
	    else if curOp = T2$OUTPUT or curOp = T2$TIME then
	    do;
		call sub$6C54(tx2op1(tx2qp));
		call sub$6C54(tx2op2(tx2qp));
	    end;
	    else
	    do;
		tx2op3(tx2qp) = 0;
		call sub$6EE1(tx2qp);
		call sub$6C73(sub$6FE2);
		if curOp = T2$JMPFALSE then
		do;
		    if tx2opc(tx2qp - 1) = T2$NOT then
		    do;
			boC20F = TRUE;
			tx2op2(tx2qp) = tx2op1(tx2qp - 1);
			call sub$56A0(tx2qp, tx2qp - 1);
			tx2opc(tx2qp) = T2$SEMICOLON;
		    end;
		end;
	    end;
	end;






	sub$7111: procedure;
	    if procCallDepth > 0 then
		tx2op3(tx2qp) = 0ff00h;
	    else
	    do;
		tx2op3(tx2qp) = 0;
		if curOp = T2$VARIABLE then
		do;
		    curInfo$p = tx2op1(tx2qp);
		    if testInfoFlag(F$AT) then
			call sub$6C73(bC259);
		    else
			call sub$6C73(bC25A);
		end;
		else
		    call sub$6C73(bC25A);
	    end;
	end;

/* sub$6BD6 */
	bC259 = 4;
	bC25A = 4;
	do tx2qp = 4 to bC1BF - 1;
		tx2Auxw(tx2qp) = 0;
		curOp = tx2opc(tx2qp);
		bC1D2 = b5124(curOp);
		if (bC1D2 and 0c0h) = 0 then
			call sub$6D52;
		else if (bC1D2 and 0c0h) = 40h then
			call sub$7111;
		if curOp = T2$BEGCALL or curOp = T2$BEGMOVE then
			procCallDepth = procCallDepth + 1;  

	end;
end;
END;
src/plm2d.plm
plm2d: DO;
$include(:f2:plm2d.ipx)

sub$717B: procedure public;
	declare bC266 byte,
		(wC267, wC269, wC26B, wC26D) address,
		bC26F byte,
		p address,
		(bC272, bC273) byte;

	bsub$7254: procedure(arg1b, arg2w) byte;
	    declare arg1b byte, arg2w address;
	    if arg1b = 0 then
	    do;
		if tx2Aux2b(bC26F) <> 4 then
		    return FALSE;
	    end;
	    else if arg1b <> 3 then
	    do;
		if tx2Aux2b(bC26F) <> 8 then
		    return FALSE;
		if arg2w <> 0 then
		do;
		    if arg1b = 2 then
			return FALSE;
		    if arg1b = 4 then
		    do;
			if wC269 <> 0 then
			   return FALSE;
		    end;
		    else if arg1b = 5 then
		    do;
			if wC269 <> wC26D then
			   return FALSE;
		    end;
		end;
	    end;
	    else if arg2w = 4000h then
		    return FALSE;
	    return TRUE;
	end;


	sub$72F2: procedure address;
	    do case bC266;
		return wC267;
		return wC267 + wC26B;
		return wC267 - wC26B;
		return wC267 * wC26B;
		return wC267 / wC26B;
		return wC267 mod wC26B;
		return wC267 and wC26B;
		return wC267 or wC26B;
		return wC267 xor wC26B;
		return wC267 + wC26B;
		return wC267 + wC26B;
		return wC267 + wC26B + wC26B;
		return wC267 + wC26B;
		return -wC267;
		return not wC267;
		return low(wC267);
		return high(wC267);
		return wC267;
	    end;
	end;

	sub$73C5: procedure;
	    if curOp = T2$MEMBER and tx2Aux2b(tx2op1(tx2qp)) = 0ah then
	    do;
		bC272 = tx2Aux1b(tx2op2(tx2qp));
		bC273 = 0Ah;
	    end;
	    else 
		do case b5112(bC266) and 7;
		    do;
			bC272 = 0;
			bC273 = 8;
		    end;
		    do;
			if tx2Aux1b(tx2op1(tx2qp)) = 0 and tx2Aux1b(tx2op2(tx2qp)) = 0 then
			   bC272 = 0;
			else
			   bC272 = 1;
			bC273 = 8;
		    end;
		    do;
			bC272 = 1;
			bC273 = 8;
		    end;
		    do;
			bC272 = tx2Aux1b(tx2op1(tx2qp));
			bC273 = tx2Aux2b(tx2op1(tx2qp));
		    end;
		    do;
			bC272 = tx2Aux1b(tx2op2(tx2qp));
			bC273 = tx2Aux2b(tx2op2(tx2qp));
		    end;
		    do;
			bC272 = sub$5748(tx2Aux1b(tx2op2(tx2qp)));
			bC273 = 8;
		    end;
		end;
	    if wC269 = wC26D then
		curInfo$p = 0;
	    else if wC26D = 0  then
		curInfo$p = tx2op1(tx2op1(tx2qp));
	    else
		curInfo$p = tx2op1(tx2op2(tx2qp));
	end;

/* sub$717B */
	bC266 = curOp - 12h;
	bC26F = tx2op1(tx2qp);
	call sub$5FBF(bC26F, .wC267, .wC269);
	if bsub$7254(shr(b5112(bC266), 6), wC269) then
	do;
		bC26F = tx2op2(tx2qp);
		call sub$5FBF(bC26F, .wC26B, .wC26D);
		if bsub$7254(shr(b5112(bC266), 3) and 7h, wC26D) then
		do;
			call sub$611A;
			p = sub$72F2;
			call sub$73C5;
			if bC272 = 0 and bC273 = 8 then
				p = p and 0FFh;
			call sub$5F4B(p, curInfo$p, bC272, bC273);
			bC1D2 = b5124(curOp := tx2opc(tx2qp));
		end;
	end;
end;


sub$7550: procedure public;

	bsub$765B: procedure(arg1b, arg2b, arg3b) byte;
		declare arg1b byte, arg2b byte, arg3b byte,
			bC27A byte, (wC27B, wC27D) address,
			(bC27F, i) byte, p address;


		bsub$76E2: procedure(arg1b) byte;
			declare arg1b byte;
			if (bC27F and 40h) <> 0 then
			do;
				if tx2Aux1b(arg1b) = 1 then
					return TRUE;
				if tx2Aux1b(arg1b) = 3 then
					return TRUE;
				return FALSE;
			end;
			else if tx2Aux1b(arg1b) = 0 then
				return TRUE;
			else if tx2Aux1b(arg1b) = 2 then
				return TRUE;
			else if tx2Aux1b(arg1b) = 8 then
				return TRUE;
			else
				return FALSE;
		end;

		sub$7754: procedure;
			declare (i, j) byte;
			i = tx2qp + 1;
			do while tx2opc(i) = T2$OPTBACKREF and i < bC1BF;
				i = i + 1;  
			end;
			j = tx2qp;
			if tx2opc(i) = T2$STORE then
			do;
				if arg3b= tx2op1(i) then
				do;
					if tx2op2(i) = j then
					do;
						if tx2Auxw(j) = 1 then
						do;
							bC27A = 6;
							tx2opc(i) = T2$SEMICOLON;
							tx2Auxw(j) = 0;
							tx2Auxw(arg3b) = tx2Auxw(arg3b) - 1;  
						end;
					end;
				end;
			end;
		end;

		bsub$7801: procedure  byte;
			if wC27D <> 0 or (curOp < T2$BASED and tx2Aux2b(arg2b) <> 8) then
				return FALSE;
			if (bC27F and 20h) <> 0 then
				if not bsub$76E2(arg3b) then
					return FALSE;
			if (bC27F and 1) <> 0 then
				if bsub$76E2(arg2b) <> bsub$76E2(arg3b) then
					return FALSE;
			if (bC27F and 4) <> 0 then
			do;
				if (bC27F and 8) <> 0 then
					if wC27B <> 0 then
						return TRUE;
					else
						return FALSE;
				p = w502A(shr(b5048(arg1b), 3));
				if p <> wC27B then
					return FALSE;
				if (bC27F and 80h) <> 0 then
					call sub$7754;
				return 0FFh;
			end;
			if (bC27F and 40h) = 0 then
			do;
				p = w502A(shr(b5048(arg1b), 3));
				bC27A = wC27B mod p;
				return TRUE;
			end;
			else if wC27B <= 4 then
			do;
				bC27A = wC27B;
				return TRUE;
			end;
			else
				return FALSE;
		end;

		sub$7925: procedure;
			declare (i, j, k) byte;
			arg1b = arg1b - 1;
			i = b5221(arg1b) + bC27A;
			j = b5048(arg1b) and 3;
			if i = 0ADh then
			do;
				if j = 0 then
					wC27B = 0;
				call sub$611A;
				bC27F = 0;
				k = 1;
				if curOp <> T2$STAR then
				    if curOp <> T2$SLASH then
					if curOp <> T2$MOD then
					    if wC27B < 100h then
						if bsub$76E2(arg2b) then
						    if arg3b = 0 then
							k = 0;
						    else if bsub$76E2(arg2b) then
							k = 0;
				call sub$5F4B(wC27B, 0, k, 8);
			end;
			else
			do;
				if j = 1 then
				do;
					tx2op1(tx2qp) = arg3b;
					tx2Auxw(arg2b) = tx2Auxw(arg2b) - 1;  
				end;
				else
				do;
					if tx2op2(tx2qp) <> 0 then
						tx2Auxw(tx2op2(tx2qp)) = tx2Auxw(tx2op2(tx2qp)) - 1;  
					if (bC1D2 and 4) <> 0 then
					do;
						tx2op1(tx2qp) = tx2op2(1);
						if boC20F then
						do;
							i = 43h - i;
							boC20F = 0;
						end;
					end;
				end;
				tx2opc(tx2qp) = i;
				tx2op2(tx2qp) = 0;
			end;
			bC1D2 = b5124(curOp := i);
		end;

/* bsub$765B */
		call sub$5FBF(arg2b, .wC27B, .wC27D);
		bC27A = 0;
		i = TRUE;

		do while i;
			if (bC27F := b50AD(arg1b)) = 0ffh then
				return FALSE;
			if (bC27F and 10h) <> 0 then
			do;
				i = not bsub$76E2(arg2b);
				if (bC27F and 4) <> 0 and not i then
					i = not bsub$7801;
			end;
			else 
				i = not bsub$7801;
			arg1b = arg1b + 1;  
		end;
		call sub$7925;
		return TRUE;
	end bsub$765B;

/* sub$7550 */
	if curOp <= T2$GT then
	do;
		if tx2opc(tx2qp+1) = T2$JMPFALSE and tx2Auxw(tx2qp) = 1 then
		do;
			tx2opc(tx2qp + 1) = T2$JNZ;
			tx2op1(tx2qp + 1) = tx2op2(1);
			if boC20F then
			do;
				tx2op2(tx2qp + 1) = bC209(curOp);
				boC20F = 0;
			end;
			else
				tx2op2(tx2qp + 1) = curOp;
			tx2Auxw(tx2qp) = 0;
		end;
		else
			tx2opc(tx2qp), curOp = curOp + 26h;
	end;
	else if bsub$765B(b5202(curOp), tx2op2(tx2qp), tx2op1(tx2qp)) then
		;
	else if bsub$765B(b51E3(curOp), tx2op1(tx2qp), tx2op2(tx2qp)) then
			;
end;


end;
src/plm2e.plm
plm2e: DO;
$include(:f2:plm2e.ipx)

declare b7A81(4) byte data(3CH, 46H, 50H, 5AH);


sub$7A85: procedure public;
	declare (i, j) byte,
		bC28B(4) byte, bC28F byte,
		(k, m, n) byte;

	sub$7D32: procedure;
		call encodeFragData(CF$XCHG);
		pc = pc + 1;  
		call sub$5B96(3, 4);
		call sub$5B96(2, 3);
		call sub$5B96(4, 2);
	end;

	sub$7D54: procedure;

		wC1DC(0) = 0ah;
		wC1DC(1) = wC1C3;
		call encodeFragData(CF$XTHL);
		pc = pc + 1;  
		call sub$5C97(4);
		call sub$5C1D(3);
		call sub$5B96(4, 3);
	end;


	sub$7D7E: procedure(arg1b);
		declare arg1b byte;
		if arg1b <= 3 then 
			if bC28B(arg1b) < 0c8h then
				bC28B(arg1b) = bC28B(arg1b) + bC28F;
	end;

/* sub$7A85 */
	call sub$597E;
	do i = 0 to 3;
		if boC072(i) or boC069(i) then
			bC28B(i) = 0c8h;
		else if boC060(i) then
			bC28B(i) = b7A81(i) + 0fh;
		else
			bC28B(i) = b7A81(i);
	end;

	if shr(bC0C3(wC1C3), 4) <> 0bh and bC140(wC1C3) <> 0 then
		bC28B(0) = 0C8h;
	do m = 0 to 1;
		if bC0B7(m) <> 0 then
		do;
			if bC0B5(m) = 9 and bC140(wC1C3) = bC0B7(m) then
			do;
				k = m;
				bC28F = 0ceh;
				boC1D8 = 0;
			end;
			else
				bC28F = 32h;
			call sub$7D7E(b52B5(bC0BF(m)));
			call sub$7D7E(shr(b4C2D(bC0BD(m)), 5));
		end;
	end;

	n = 0c8h;
	do i = 0 to 3;
		if bC28B(i) <= n then
			n = bC28B(j := i);
	end;

	if n = 0C8h then
	do;
		if boC069(3) then
		do;
			call sub$7D32;
			if bC0B5(0) = 3 then
			do;
				bC0B5(0) = 2;
				call sub$61A9(0);
			end;
			else
			do;
				bC0B5(1) = 2;
				call sub$61A9(1);
			end;
		end;
		call sub$7D54;
		j = 3;
	end;
	else
		call sub$6416(j);

	if bC045(j) = 0bh then
	do;
		bC045(j) = 0;
		if j <> 0 and bC04E(j) <> 0 then
		do;
			wC1DC(0) = j;
			call encodeFragData(CF$MOVLRHR);
			pc = pc + 1;  
		end;
	end;
	if not boC1D8 then
	do;
		if bC0B5(1 - k) = 9 then
		do;
			if bC0B7(1 - k) = bC0B7(k) then
			do;
				bC0B5(1 - k) = j;
				bC0B3(1 - k) = bC045(j);
				call sub$61A9(1 - k);
			end;
			else
				boC1D8 = 0ffh;
		end;
		bC0B5(k) = j;
		bC0B3(k) = bC045(j);
		call sub$61A9(k);
	end;
end;





sub$7DA9: procedure public;
	declare (bC294, bC295, bC296, bC297, bC298, i) byte;

	sub$7F19: procedure;

		bsub$7FD9: procedure(arg1b) boolean;
			declare arg1b byte;
			if arg1b <= 3 then
				if bC0B5(bC296) = arg1b then
					return true;
			return false;
		end;

		do bC295 = 0 to 1;
			if bC0B7(bC295) <> 0 and bC0BB(bC295) <> 0 then
			do;
				if bC0BB(bC296 := 1 - bC295) <> 0 then
				do;
					if bsub$7FD9(shr(b4C2D(bC0BD(bC295)), 5)) 
					  or bsub$7FD9(b52B5(bC0BF(bC295))) then
						bC0BB(bC296) = 10 + bC0BB(bC296);
				end;
			end;
		end;

		if bC0BB(0) > bC0BB(1) then
			bC295 = 0;
		else
			bC295 = 1;

		bC296 = 1 - bC295;
		bC298 = bC0BD(bC295);
	end;



	sub$7FFC: procedure;
		if bC298 = 13h then
		do;
			if boC072(3) or boC069(3) then
				bC298 = 15h;
		end;
		else if bC298 = 14h then
		do;
			bC294 = 5 - bC297;
			if bC0B5(0) = bC0B5(1) then
				if bC0B3(bC295) = 0 then
					bC298 = 0Eh;
				else
					bC298 = 11h;
		end;
		else if bC298 = 8 then
		do;
			if tx2op1(bC0B7(bC295)) <> 0 then
			do;
				bC298 = 6;
				if bC294 = 0 then
					bC294 = 1;
			end;
		end;
	end;



	sub$8086: procedure;
		if 9 <= bC298 and bC298 <= 13 then
			call sub$63AC(bC297);

		if b4C2D(bC298) then
		do;
			if bC294 <> bC297 then 
				call sub$5D6B(bC294);
			else if 9 <= bC298 and bC298 <= 13 then
			do;
				bC0B5(bC295) = 9;
				call sub$597E;
				call sub$5D6B(bC294);
				bC0B5(bC295) = bC297;
				call sub$597E;
			end;
		end;
		else if bC298 = 15h then
		do;
			if boC069(3) then
				bC0B5(bC296) = 9;
		end;
		else if bC298 = 14h then
		do; 
			if bC0B5(bC296) = bC294 then
				bC0B5(bC296) = bC297;
		end;
	end;

	sub$8148: procedure(arg1b, arg2b);
		declare arg1b byte, arg2b byte;
		declare i byte;
		if arg2b = 0 then
			return;
		if arg2b = 1 or arg2b = 2 then
		do;
			if arg1b = 0 then
				wC1DC(bC1DB) = bC297;
			else
				wC1DC(bC1DB) = bC294;
			bC1DB = bC1DB + 1;  
		end;
		else if arg1b = 2 then
		do;
			wC1DC(bC1DB) = 8;
			bC1DB = bC1DB + 2;
		end;
		else if arg1b = 3 then
		do;
			wC1DC(bC1DB) = 0Ah;
			wC1DC(bC1DB+1) = wC1C3;
			bC1DB = bC1DB + 3;
		end;
		else
		do;
			i = bC1DB;
			call sub$636A(bC295);
		end;

	end;

	sub$8207: procedure;
		do case shr(b4C15(bC298), 4);
			do;
				call sub$5C97(bC294);
				wC1C3 = wC1C3 - 1;  
			end;
			do;
				call sub$5C97(4);
				call sub$5C1D(3);
				call sub$5B96(4, 3);
			end;
			do;
				boC057(bC294) = true;
				bC0A8(bC294) = 0;
				bC04E(bC294) = bC0B7(bC295);
				wC096(bC294) = 100h;
				if wC1DC(0) = 0Ah then
				do;
					wC084(bC294) = - shl(wC1DC(1), 1);
					if bC0C3(tx2op3(bC0B7(bC295))) = 0b0h then
						if bC298 = 5 then
						do;
							wC084(bC294) = wC084(bC294) - 1;  
							wC1DC(2) = wC1DC(2) + 1;  
						end;
				end;
				else
					wC084(bC294) = wC1DC(3) - shl(wC1C3, 1);
			end;
			do;
				boC057(bC294) = true;
				bC0A8(bC294) = 0;
				bC04E(bC294) = bC0B7(bC295);
				call sub$5FBF(bC04E(bC294), .wC084(bC294), .wC096(bC294));
			end;
			do;
				boC057(bC294) = 0;
				bC04E(bC294) = bC0B7(bC295);
				if bC0B3(bC295) = 4 or bC0B3(bC295) = 5 then
				do;
					bC0A8(bC294) = bC0C3(tx2op3(bC0B7(bC295))) and 0fh;
					if bC0A8(bC294) > 7 then
						bC0A8(bC294) = bC0A8(bC294) or  0f0h;
				end;
				else
					bC0A8(bC294) = 0;
			end;
			call sub$5B96(bC297, bC294);
			do;
				call sub$5B96(3, 4);
				call sub$5B96(2, 3);
				call sub$5B96(4, 2);
			end;
			;
		end;
	end;

	sub$841E: procedure;
		do case b4C15(bC298) and 0fh;
			;
			bC045(bC294) = 1;
			bC045(bC294) = 0;
			bC045(bC294) = 6;
			do;
				if bC0B5(bC295) <> 8 then
					bC045(bC294) = sub$5748(bC0B3(bC295));
				else if bC0B3(bC295) = 0 then
					bC045(bC294) = 6;
				else
					bC045(bC294) = bC0B3(bC295);
			end;
			do;
				bC045(bC294) = bC0B3(bC295) - 2;
				bC0A8(3) = bC0A8(3) + 1;  
			end;
		end;
	end;




/* sub$7DA9 */
	call sub$7F19;
	if bC298 = 17h then
		call sub$58F5(ERR214);
	else if bC298 = 16h then
	do;
		bC0C1(bC295) = bC0BF(bC295);
		bC0B3(bC295) = b528D(bC0C1(bC295));
		bC0B5(bC295) = b52B5(bC0C1(bC295));
	end;
	else if bC298 = 12h then
		boC1D8 = TRUE;
	else
	do;
		bC294 = shr(b4C2D(bC298), 5);
		if bC294 > 3 then
			bC294 = b52B5(bC0BF(bC295));
		bC297 = bC0B5(bC295);
		call sub$597E;
		call sub$7FFC;
		i = b5012(bC298);
		call sub$8086; 
		bC1DB = 0;
		call sub$8148(shr(b4C2D(bC298), 3) and 3, shr(b4029(i), 4) and 7);
		call sub$8148(shr(b4C2D(bC298), 1) and 3, shr(b4029(i), 1) and 7);
		call sub$8207;
		call sub$841E;
		bC0B3(bC295) = bC045(bC294);
		bC0B5(bC295) = bC294;
		call sub$61A9(0);
		call sub$61A9(1);
		call encodeFragData(i);
		pc = pc + (b43F8(i) and 01fh);


	end;
end;



sub$84ED: procedure public;
	declare i byte;
	declare helpers based helpers$p(1) address;

	sub$8683: procedure(arg1b) byte;
		declare arg1b byte;
		if bC0B5(0) = arg1b then
			return 1;
		else
			return 0;
	end;


	sub$8698: procedure(arg1b, arg2b);
		declare arg1b byte, arg2b byte;
		declare i byte;
		declare p address;
		do case arg1b;
			return;
			i = 0;
			i = 1;
			do;
				wC1DC(bC1DB) = 0Ah;
				wC1DC(bC1DB + 1) = wC1C3;
				bC1DB = bC1DB + 3;
				return;
			end;
			i = sub$8683(3);
			i = sub$8683(0);
			do;
				if arg2b = 7 then
				do;
					wC1DC(bC1DB) = 10h;
					wC1DC(bC1DB + 1) = tx2op3(tx2qp) - botInfo;
					bC1DB = bC1DB + 2;
				end;
				else
					call sub$61E0(tx2op3(tx2qp));
				return;
			end;
		end;
		if arg2b <= 3 then
			call sub$636A(i);
		else
		do;
			wC1DC(bC1DB) = arg2b + 9;
			if arg2b = 6 then
				wC1DC(bC1DB + 1) = tx2op2(1);
			else
				call sub$5FBF(bC0B7(i), .wC1DC(bC1DB+1), .p);
			bC1DB = bC1DB + 2;
		end;
	end;

/* sub$84ED */
	if cfrag1 > CF$3 then
	do;
		bC1DB = 0;
		call sub$8698(shr(b42F9(cfrag1), 4), shr(b4029(cfrag1), 4) and 7);
		if cfrag1 = CF$67 or cfrag1 = CF$68 then
			wC1DC(bC1DB - 1) = wC1DC(bC1DB - 1) + 2;
		call sub$8698(b42F9(cfrag1) and 0fh, shr(b4029(cfrag1), 1) and 7);
		call encodeFragData(cfrag1);
		pc = pc + (b43F8(cfrag1) and 01fh);
		if cfrag1 = CF$DELAY then
		do; 
			helpers(105) = 1;
			if wC1C5 < shl(wC1C3 + 1, 1) then
				wC1C5 = shl(wC1C3 + 1, 1);
		end;
		else if cfrag1 > CF$171 then
		do;
			i = b413B(cfrag1 - CF$174);
			i = b4128(i) + 11 * b425D(b4273(curOp));
			i = b3FCD(shr(b418C(i), 2)) + (b418C(i) and 3);
			helpers(i) = 1;
			if curOp = T2$SLASH or curOp = T2$MOD
			 or curOp = T2$44 then
			do;
				if wC1C5 < shl(wC1C3 + 2, 1) then
					wC1C5 = shl(wC1C3 + 2, 1);
			end;
			else if wC1C5 < shl(wC1C3 + 1, 1) then
					wC1C5 = shl(wC1C3 + 1, 1);
		end;
	end;
end;


END;
src/plm2f.plm
plm2f: DO;
$include(:f2:plm2f.ipx)

sub$87CB: procedure public;
	declare (bC2A5, bC2A6, bC2A7, bC2A8) byte,
		(wC2A9, wC2AB, wC2AD) address;

	bsub$8861: procedure boolean;
		declare i byte;
		do wC1D6 = wC2AB to wC2AD;
			i = sub$5679(bC2A5);
			if 0 <= i and i <= 3 then
				return true;
			if 12 <= i and i <= 14 then
				return true;
		end;
		return false;
	end bsub$8861;


	sub$88C1: procedure;
		if bsub$8861 then
		do;
			do bC2A8 = 0 to 3;
				if bC04E(bC2A8) = bC2A6 then
				do;
					if bC045(bC2A8) = 0 or bC045(bC2A8) = 1
					   or bC045(bC2A8) = 6 then
					do;
						bC0B3(bC2A5) = bC045(bC2A8);
						bC0B5(bC2A5) = bC2A8;
						if bC0B5(1 - bC2A5) <> bC2A8 then
							return;
					end;
				end;
			end;
		end;
	end sub$88C1;

	sub$894A: procedure;
		if bC0B5(bC2A5) > 3 then
		do;
			do bC2A8 = 1 to 3;
				if bC04E(bC2A8) = bC2A6 then
				do;
					if bC045(bC2A8) = 2 or bC045(bC2A8) = 3 then
					do;
						bC0B3(bC2A5) = bC045(bC2A8);
						bC0B5(bC2A5) = bC2A8;
						if bC0B5(1 - bC2A5) <> bC2A8 then
							return;
					end;
				end;
			end;
		end;
	end sub$894A;


	sub$89D1: procedure;
		declare i byte;
		declare p address;
		if bC0B5(bC2A5) = 0Ah then
			wC2A9 = tx2op2(bC2A6);
		else if bC0B5(bC2A5) = 9 then
		do;
			wC2A9 = tx2op3(bC2A6);
			if ( not boC069(0) and boC072(0)) or bC0B1 > 0 or wC2A9 <> wC1C3 then
			do;
				i = bC0B1 + bC0B2;
				do p = wC2A9 to wC1C3;
					if bC140(p) <> 0 then
						i = i + 1;  
				end;
				if i < 4 then
					boC1D8 = true;
				else
					bC0B5(bC2A5) = 0Ah;
			end;
			wC2A9 = - shl(wC2A9, 1);
		end;
	end sub$89D1;

	sub$8A9C: procedure;
		declare (p, q) address;
		declare (i, j) byte, r address;
		if bC0B5(bC2A5) = 0Ah then
		do;
			p = wC2A9;
			q = 100h;
			i = 4;
			j = sub$5748(bC0B3(bC2A5));
		end;
		else if bC0B5(bC2A5) = 8 and bC0B3(bC2A5) = 1 then
		do;
			call sub$5FBF(bC0B7(bC2A5), .p, .q);
			i = 2;
			j = 1;
		end;
		else if bC0B5(bC2A5) = 4 and
		   (bC0B3(bC2A5) = 0 or bC0B3(bC2A5) = 8 or  not bsub$8861) then
		do;
			call sub$5FBF(bC0B7(bC2A5), .p, .q);
			i = 2;
			j = sub$5748(bC0B3(bC2A5));
		end;
		else
			return;

		do bC2A8 = 1 to 3;
			if boC069(bC2A8) then
			do;
				if bC0B7(0) = bC0B7(1) and curOp <> T2$STORE then
					if bC0B5(bC2A5) > 3 then
						bC0B5(bC2A5) = bC2A8;
			end;
			else if not boC072(bC2A8) and wC096(bC2A8) = q
				    and boC057(bC2A8) and 1 <= bC045(bC2A8)
				    and bC045(bC2A8) <= 6 then
			do;
				r = wC084(bC2A8) + bC0A8(bC2A8) - p;
				if r > 0ffh then
					r = -r;
				if r < i then
				do;
					bC0B5(bC2A5) = bC2A8;
					i = r;
				end;
			end;
		end;
		if bC0B5(bC2A5) <= 3 then
		do;
			bC2A8 = bC0B5(bC2A5);
			bC045(bC2A8), bC0B3(bC2A5) = j;
			bC04E(bC2A8) = bC0B7(bC2A5);
			bC0A8(bC2A8) = wC084(bC2A8) + bC0A8(bC2A8) - p;
			wC084(bC2A8) = p;
		end;
	end sub$8A9C;



	sub$8CF5: procedure;
		bC0B5(0) = 8;
		bC0B5(1) = 8;
		do bC2A5 = 0 to 1;
			if (bC2A6 := bC0B7(bC2A5)) = 0 then
			do;
				bC0B3(bC2A5) = 0Ch;
			end;
			else if (bC2A7 := tx2opc(bC2A6)) = T2$STACKPTR then
			do;
				bC0B3(bC2A5) = 0Ah;
			end;
			else if bC2A7 = T2$LOCALLABEL then
			do; 
				bC0B3(bC2A5) = 9;
			end;
			else
			do;
				bC0B3(bC2A5) = tx2Aux1b(bC2A6);
				bC0B5(bC2A5) = tx2Aux2b(bC2A6);
				call sub$88C1; 
				call sub$894A;/*  checked */
			end;
		end;
		do bC2A5 = 0 to 1;
			bC2A6 = bC0B7(bC2A5);
			call sub$597E;
			call sub$89D1;
			call sub$8A9C;
			call sub$61A9(bC2A5);
		end;
	end sub$8CF5;



	sub$8DCD: procedure;
		declare (h, i, j, k, m, n) byte;

		sub$8E7E: procedure(arg1b)  byte;
			declare arg1b byte;
			declare p address, i byte;

			if bC0B7(arg1b) = 0 or bC0B7(arg1b) = 1 then
				return 1;
			i = sub$5679(arg1b);
			return b4D23(p := bC0C1(arg1b) * 16 + i);
		end sub$8E7E;

		sub$8ECD: procedure(arg1b, arg2b);
			declare arg1b byte, arg2b byte;
			bC0B9(arg1b) = b4C45(arg2b);
			bC0BB(arg1b) = b4CB4(arg2b);
			bC0BD(arg1b) = b4FA3(arg2b);
		end sub$8ECD;

/* sub$8DCD */
		j = 198;
		do wC1D6 = wC2AB to wC2AD;
			k = sub$8E7E(0);
			m = sub$8E7E(1);
			n = b4C45(k) + b4C45(m) + (b43F8(b4A21(wC1D6)) and 1fh);
			if n < j then
			do;
				j = n;
				h = k;
				i = m;
				cfrag1 = b4A21(wC1D6);
				bC1D9 = b46EB(wC1D6);
				bC0BF(0) = sub$5679(0);
				bC0BF(1) = sub$5679(1);
			end;
		end;
		call sub$8ECD(0, h);
		call sub$8ECD(1, i);
	end sub$8DCD;



	sub$8F16: procedure;
		if bC0B7(0) <> 0 then
			call sub$63AC(bC0B5(0));

		if bC0B7(1) <> 0 then 
			call sub$63AC(bC0B5(1));

	end sub$8F16;


	sub$8F35: procedure;
		declare p address;
		if curOp = T2$STKARG or curOp = T2$STKBARG or curOp = T2$STKWARG then
		do;
			call sub$5795(-shl(wB53C(procCallDepth), 1));
			wB53C(procCallDepth) = wB53C(procCallDepth) + 1;  
			wC1C3 = wC1C3 + 1;  
		end;
		else if curOp = T2$CALL then
		do;
			call sub$5795(-shl(wB53C(procCallDepth), 1));
			curInfo$p = tx2op3(tx2qp);
			if testInfoFlag(F$EXTERNAL) then
				p = shl(wB53C(procCallDepth) + 1, 1);
			else
				p = shl(wB528(procCallDepth) + 1, 1) + getBaseVal;
			if p > wC1C5 then
				wC1C5 = p;
		end;
		else if curOp = T2$CALLVAR then
		do;
			call sub$5795(-shl(wB53C(procCallDepth), 1));
			if wC1C5 < shl(wC1C3, 1) then
				wC1C5 = shl(wC1C3, 1);
		end;
		else if curOp = T2$RETURN or curOp = T2$RETURNBYTE
		    or curOp = T2$RETURNWORD then
		do;
			boC1CD = 0ffh;
			call sub$5EE8;
		end;
		else if curOp = T2$JMPFALSE then
		do;
			call sub$5795(0);
			if boC20F then
			do;
				cfrag1 = CF$JMPTRUE;
				boC20F = 0;
			end;
		end;
		else if curOp = T2$63 then 
			call sub$5795(0);
		else if curOp = T2$MOVE then
		do;
			if wB53C(procCallDepth) <> wC1C3 then
			do;
				call sub$5795(-shl(wB53C(procCallDepth) + 1, 1));
				call sub$6416(3);
			end;
			if bC045(3) = 1 then
				cfrag1 = CF$MOVE$HL;
		end;
	end sub$8F35;


	sub$90EB: procedure;
		declare (p, q) address;
		declare (i, j, k) byte;

		sub$940D: procedure;
			do bC2A8 = 0 to 3;
				if bC04E(bC2A8) = bC0B7(0) then
					if bC045(bC2A8) < 2 or 5 < bC045(bC2A8) then
						bC04E(bC2A8) = 0;
			end;
		end;

		p = w48DF(bC1D9) * 16;
		q = w493D(bC1D9);
		k = 0;
		if curOp = T2$STORE then
		do;
			call sub$940D;
			if tx2Auxw(bC0B7(1)) = 0 then
			    if tx2Auxw(bC0B7(0)) > 0 then
				do;
					if cfrag1 = CF$MOVMLR or cfrag1 = CF$STA then
					do;
						bC045(bC0B5(1)) = 0;
						bC04E(bC0B5(1)) = bC0B7(0);
					end;
					else if cfrag1 = CF$SHLD or cfrag1 = CF$MOVMRP then
					do;
						bC045(bC0B5(1)) = 1;
						bC04E(bC0B5(1)) = bC0B7(0);
					end;
				end;
		end;
		else if T2$51 <= curOp and curOp <= T2$56 then
			call sub$940D;
		do bC2A8 = 5 to 8;
			i = shr(p, 13);
			j = shr(q, 12);
			p = shl(p, 3);
			q = shl(q, 4);
			if j <= 3 then
			do;
				call sub$5B96(j, bC2A8);
				if i = 1 then
					bC0A8(bC2A8) = bC0A8(bC2A8) + 1;  
				else if i = 2 then
				do;
					if bC045(bC2A8) = 0 then
					do;
						bC045(bC2A8) = 6;
					end;
					else
					do;
						bC045(bC2A8) = 1;
						boC057(bC2A8) = 0;
					end;
				end;
			end;
			else if j = 4 then
			do;
				boC057(k := bC2A8) = 0;
				if 0 < tx2Auxw(tx2qp) then
				do;
					bC04E(bC2A8) = tx2qp;
					bC045(bC2A8), tx2Aux1b(tx2qp) = shr(b43F8(cfrag1), 5);
					bC0A8(bC2A8) = 0;
				end;
				else
					bC04E(bC2A8) = 0;
			end;
			else if j = 5 then
			do;
				bC04E(bC2A8) = 0;
				wC096(bC2A8) = 0;
				bC0A8(bC2A8) = 0;
				boC057(bC2A8) = 0FFh;
				bC045(bC2A8) = 0;
				wC084(bC2A8) = i;
			end;
			else
			do;
				bC04E(bC2A8) = 0;
				boC057(bC2A8) = 0;
			end;
		end;
		if k = 0 and tx2Auxw(tx2qp) > 0 then
		do;
			do bC2A8 = 5 to 8;
				if bC04E(bC2A8) = 0 then 
					if not boC057(k := bC2A8) then
						goto break;
			end;
		break:
			if k <> 0 then
			do;
				bC04E(k) = tx2qp;
				boC057(k) = 0;
				bC045(k) = 0;
				tx2Aux1b(tx2qp) = 0;
				bC0A8(k) = 0;
			end;
		end;
		do bC2A8 = 0 to 3;
			call sub$5B96(bC2A8 + 5, bC2A8);
		end;
	end sub$90EB;

/* sub$87CB */
	bC0B7(0) = tx2op1(tx2qp);
	bC0B7(1) = tx2op2(tx2qp);
	wC2AB = wAF54(curOp);
	wC2AD = wC2AB + b499B(curOp) - 1;
	call sub$8CF5;

	do while 1;
		call sub$8DCD;	/*  OK */
		if bC0B9(0) = 0 then
			if bC0B9(1) = 0 then
				goto break;
		if boC1D8 then
			call sub$7A85;
		else
			call sub$7DA9;
	end;
break:
	call sub$8F16;
	call sub$611A;
	call sub$5E66(shr(w48DF(bC1D9), 12));
	call sub$8F35;
	call sub$84ED;
	call sub$90EB;
end sub$87CB;


sub$9457: procedure public;
	if enterBlk then
	do;
		wB488(procChainId) = pc;
		wB4B0(procChainId) = wC1C3;
		wB4D8(procChainId) = wC1C5;
		extProcId(procChainId) = curExtProcId;
		procChainNext(blkSP) = procChainId;
		procChainId = blkSP;
		curInfo$p, blkCurInfo(blkSP) = tx2op1(tx2qp) + botInfo;
		curExtProcId = getProcId;
		pc = 0;
		call emitTopItem;
		call sub$981C;
	end;
end;
end;
src/plm2g.plm
plm2g: DO;
$include(:f2:plm2g.ipx)

declare curParamCnt byte,
	bC2D1 byte,
	(bC2D2, bC2D3) byte,
	wC2D4 address;


findParamInfo: procedure(arg1b) public;
	declare arg1b byte;
	curInfo$p = blkCurInfo(blkSP);
	do while arg1b <> 0;
		call advNxtInfo;
		arg1b = arg1b - 1;  
	end;
end;



sub$9514: procedure public;
	if getType = ADDRESS$T then
	do;
		wC1DC(0) = bC2D1;
		call encodeFragData(CF$MOVMRPR);
		pc = pc + 3;
	end;
	else
	do;
		wC1DC(0) = bC2D1;
		call encodeFragData(CF$MOVMLR);
		pc = pc + 1;  
	end;
	if bC2D2 <> curParamCnt then
	do;
		call encodeFragData(CF$DCXH);
		pc = pc + 1;  
	end;
end;

sub$9560: procedure public;
	declare i byte;
	if (i := curParamCnt) = 1 then
		bC2D1 = 1;
	else
		bC2D1 = 2;
	do bC2D2 = 1 to curParamCnt;
		call findParamInfo(i);
		if bC2D2 = 2 then
			bC2D1 = 1;
		else if bC2D2 = 3 then
		do; 
			wC1DC(0) = 2;	/*  pop d */
			wC1DC(1) = 8;
			call encodeFragData(CF$POP);
			wC1DC(0) = 1;	/*  pop b */
			wC1DC(1) = 8;
			call encodeFragData(CF$POP);
			pc = pc + 2;
		end;
		else if bC2D2 > 3 then
		do;
			wC1DC(0) = 1;	/*  pop b */
			wC1DC(1) = 8;
			call encodeFragData(CF$POP);
			pc = pc + 1;  
		end;
		call sub$9514;
		i = i - 1;  
	end;
	if curParamCnt > 2 then
	do; 
		wC1DC(0) = 2;	/*  push d */
		wC1DC(1) = 8;
		call encodeFragData(CF$PUSH);
		pc = pc + 1;  
	end;
end;

sub$9624: procedure(arg1w) public;
	declare arg1w address;
	wC1DC(0) = 9;
	wC1DC(1) = arg1w;
	call encodeFragData(CF$6);
	pc = pc + 4;
end;


sub$9646: procedure(arg1w) public;
	declare arg1w address;
	if shr(arg1w, 1) + (arg1w and 1) <= 5 then
	do; 
		if arg1w then
		do;
			call encodeFragData(CF$DCXSP);
			pc = pc + 1;  
		end;
		do while arg1w > 1;
			wC1DC(0) = 3;	/*  push h */
			wC1DC(1) = 8;
			call encodeFragData(CF$PUSH);
			pc = pc + 1;  
			arg1w = arg1w - 2;
		end; 
	end;
	else
	do;
			call sub$9624(-arg1w);
			call encodeFragData(CF$SPHL);
			pc = pc + 1;  
	end;
end;


inxh: procedure public;
	wC1DC(0) = 3;
	call encodeFragData(CF$INX);
	pc = pc + 1;  
end;


opB: procedure(arg1b) public;
	declare arg1b byte;
	wC1DC(0) = 1;
	call encodeFragData(arg1b);
	pc = pc + 1;  
end;

opD: procedure(arg1b) public;
	declare arg1b byte;
	wC1DC(0) = 2;
	call encodeFragData(arg1b);
	pc = pc + 1;  
end;


sub$9706: procedure public;
	call inxh;
	if getType = ADDRESS$T then
	do;
		call opB(CF$MOVLRM);
		if bC2D3 = 1 then
			call opD(CF$MOVMLR);

		call inxh;
		call opB(CF$MOVHRM);
	end;
	else
	do;
		call opB(CF$MOVHRM);
		if bC2D3 = 1 then
			call opD(CF$MOVMLR);
		call inxh;
	end;
	if bC2D3 = 1 then
		call opD(CF$MOVMHR);
end;



movDEM: procedure public;
	call opD(CF$MOVRPM);
	pc = pc + 2;
end;


sub$975F: procedure public;
	wC1DC(0) = bC2D1;
	wC1DC(1) = 8;
	call encodeFragData(CF$PUSH);
	pc = pc + 1;  
	if getType = BYTE$T then
	do;
		call encodeFragData(CF$INXSP);
		pc = pc + 1;  
	end;
end;


sub$978E: procedure public;
	if (bC2D3 := curParamCnt) > 2 then
		call sub$9624(wC2D4);
	if curParamCnt = 1 then
		bC2D1 = 1;
	else
		bC2D1 = 2;
	do bC2D2 = 1 to curParamCnt;
		call findParamInfo(bC2D3);
		if bC2D2 > 3 then
			call sub$9706;
		else if bC2D2 = 3 then
		do;
			call movDEM;
			call sub$9706;
		end;
		else if getType = BYTE$T then
		do;
			wC1DC(0) = bC2D1;
			call encodeFragData(CF$MOVHRLR);
			pc = pc + 1;  
		end;
		call sub$975F;
		bC2D1 = 1;
		bC2D3 = bC2D3 - 1;  
	end;
end;


sub$981C: procedure public;
	declare (i, j) byte;
	curParamCnt = getParamCnt;
	if testInfoFlag(F$INTERRUPT) then
	do;
		do j = 0 to 3;
			wC1DC(0) = 3 - j;
			wC1DC(1) = 8;	/*  push h, push d, push b, push psw */
			call encodeFragData(CF$PUSH);
			pc = pc + 1;  
		end;
	end;
	if testInfoFlag(F$REENTRANT) then
	do;
		wC1C7 = getParentVal; /* or Size */;
		if curParamCnt > 0 then
		do;
			call findParamInfo(curParamCnt);
			wC2D4 = wC1C7 - getLinkVal - 1;
			if getType = ADDRESS$T then
				wC2D4 = wC2D4 - 1;  
			call sub$9646(wC2D4);
			call sub$978E;
		end;
		else
			call sub$9646(wC1C7);

		if curParamCnt > 2 then
			wC1C7 = wC1C7 + shl(curParamCnt - 2, 1);

		wC1C5 = 0;
	end;
	else
	do;
		if curParamCnt > 0 then
		do;
			call findParamInfo(curParamCnt);	/*  locate info for first param */
			if getType = ADDRESS$T then
				i = 1;
			else
				i = 0;
			wC1DC(0) = 3;
			wC1DC(1) = 0bh;
			wC1DC(2) = i;
			wC1DC(3) = curInfo$p - botInfo;	/*  info for first param */
			call encodeFragData(CF$7);
			call sub$9560;
			pc = pc + 3;
		end;
		wC1C7 = 0;
		if curParamCnt > 2 then
			wC1C5 = shl(curParamCnt - 2, 1);
		else
			wC1C5 = 0;
	end;
end;

sub$994D: procedure public;
	declare (i, j) byte;
	declare localLabels based localLabels$p(1) address,
		barray based w381E(1) byte,
		mwords based botMem(1) address;

	if curOp = T2$LABELDEF then
	do;
		boC1CC = 0;
		curInfo$p = tx2op1(tx2qp) + botInfo;
		call setLinkVal(pc);
	end;
	else if curOp = T2$LOCALLABEL then
	do;
		boC1CC = 0;
		localLabels(tx2op1(tx2qp)) = pc;
		barray(tx2op1(tx2qp)) = curExtProcId;
	end;
	else if curOp = T2$CASELABEL then
	do;
		localLabels(tx2op1(tx2qp)) = pc;
		barray(tx2op1(tx2qp)) = curExtProcId;
		if (w3822 - botMem)/2 >= wC1CF then
		do;
			mwords(wC1CF) = tx2op1(tx2qp);
			wC1CF = wC1CF + 1;  
		end;
		else
		do;
			call emitTopItem;
			call tx2SyntaxError(ERR202);	/*  LIMIT EXCEEDED: NUMBER OF */
						/*  ACTIVE CASES */
		end;
	end;
	else if curOp = T2$JMP or curOp = T2$JNC
	   or curOp = T2$JNZ or curOp = T2$GO$TO then
	do;
		i = tx2opc(tx2qp - 1);
		if i = T2$RETURN or i = T2$RETURNBYTE
		  or i = T2$RETURNWORD or i = T2$GO$TO then
			return;
		call sub$5795(0);
	end;
	else if curOp = T2$INPUT or (T2$SIGN <= curOp and curOp <= T2$CARRY) then
	do;
		bC0B7(0) = 0;
		bC0B7(1) = 0;
		bC0B5(0) = 8;
		bC0B5(1) = 8;
		call sub$597E;
		call sub$5D6B(0);
		bC045(0) = 0;
		bC04E(0) = tx2qp;
		boC057(0) = 0;
		bC0A8(0) = 0;
		tx2Aux1b(tx2qp) = 0;
		tx2Aux2b(tx2qp) = 9;
	end;
	else if curOp = T2$STMTCNT then
	do;
			j = tx2qp + 1;

			do while tx2opc(j) <> T2$STMTCNT and tx2opc(j) <> T2$EOF
			    and j < 0FFh;
				if (b5124(tx2opc(j)) and 20h) = 0 or tx2opc(j) = T2$MODULE then
					goto L9B8D;
				j = j + 1;  
			end;
			curOp = CF$134;
			tx2opc(tx2qp) = CF$134;
	end;
L9B8D:
	call emitTopItem;
	pc = pc + (b43F8(curOp) and 1fh);
end;
END;
src/plm2h.plm
plm2h: DO;
$include(:f2:plm2h.ipx)

declare b9BA8(2) byte data(12, 13),
	b9BAA(2) byte data(1, 2),
	b9BAC(2) byte data(12, 13),
	b9BAE(2) byte data(1, 2);

sub$9BB0: procedure public;

	bsub$9C33: procedure  byte;
		declare (i, j, k) byte;

		i = tx2op1(tx2qp);
		if (b5124(tx2opc(i)) and 0c0h) = 0 then
		do;
			if tx2Auxw(i) > 1 then
				return 0;
			if tx2op3(i) <> 0 then
				bC140(tx2op3(i)) = tx2qp;
		end;
		k = tx2Auxw(tx2qp);
		call sub$56A0(i, tx2qp);
		tx2Auxw(tx2qp) = k;
		tx2Auxw(i) = tx2Auxw(i) - 1;  
		do j = 0 to 3;
			if bC04E(j) = i then
				bC04E(j) = tx2qp;
		end;
		return true;
	end;


/* sub$9BB0 */
	bC0B7(0) = tx2op1(tx2qp);
	bC0B7(1) = tx2op2(tx2qp);
	if T2$DOUBLE <= curOp and curOp <= T2$ADDRESSOF then
		call sub$717B;
	if curOp <= T2$MEMBER then
	do;
		call sub$7550;
		if curOp = T2$65 then
			if bsub$9C33 then
				return;
	end;
	if (bC1D2 and 0c0h) = 0 then
	do;
		call sub$87CB;
		if curOp = T2$MOVE then
			procCallDepth = 0;
	end;
	else if (bC1D2 and 0c0h) = 80h then
		call sub$994D;
end;



sub$9D06: procedure public;
	declare (i, j, k) byte, pbyt address, m byte;
	declare byt based pbyt byte;

	if procCallDepth <= 10 then
	do;
		curInfo$p = tx2op3(tx2qp);
		i = getDataType;
		if i = 3 then
			wAF54(132) = 1;
		else
			wAF54(132) = 0;
		j, m = getParamCnt;
		pbyt = .b44F7(wAF54(132));
		k = 0;

		do while j > 0;
			call advNxtInfo;
			j = j - 1;
			if j < 2 then
			do;
				byt = rol(byt, 4) and 0f0h;
				if getType = ADDRESS$T then
					byt = byt or  b9BA8(k);
				else
					byt = byt or  b9BAA(k);
				k = 1;
			end;
		end;

		if m = 1 then
			byt = rol(byt, 4) and 0f0h;
		call sub$9BB0;
		wC1C3 = wB528(procCallDepth);
	end;
	procCallDepth = procCallDepth - 1;  
end;



sub$9DD7: procedure public;
	declare pb$C2EB address;
	declare byt based pb$C2EB byte;

	sub$9EAA: procedure(arg1b, arg2b);
		declare arg1b byte, arg2b byte;
		
		byt = rol(byt, 4) and 0f0h;
		if arg1b <> 0 then
			if tx2Aux1b(arg1b) = 0 then
				byt = byt or  b9BAE(arg2b);
			else
				byt = byt or  b9BAC(arg2b);
	end;

	declare i byte;

	if procCallDepth <= 10 then
	do;
		i = tx2op3(tx2qp);
		if tx2opc(i) = T2$VARIABLE then
		do;
			curInfo$p = tx2op1(i);
			if testInfoFlag(F$AUTOMATIC) then
				wAF54(133) = 3;
			else
				wAF54(133) = 4;
		end;
		else if tx2op3(i) = wB53C(procCallDepth) then
		do;
			wAF54(133) = 5;
			wB528(procCallDepth) = wB528(procCallDepth) - 1;  
		end;
		else
			wAF54(133) = 2;

		pb$C2EB = .b44F7(wAF54(133));
		call sub$9EAA(tx2op1(tx2qp), 0);
		call sub$9EAA(tx2op2(tx2qp), 1);
		call sub$9BB0;
		wC1C3 = wB528(procCallDepth);
	end;
	procCallDepth = procCallDepth - 1;  
end;




sub$9EF8: procedure public;
	procCallDepth = 1;
	call sub$9BB0;
	wB53C(procCallDepth) = wC1C3;
end;



sub$9F14: procedure public;
	if enterBlk then
		blkCurInfo(blkSP) = wC1CF;
end;


sub$9F2F: procedure public;
	declare (p, q) address;
	declare memwds based botMem(1) address;
	p, q = blkCurInfo(blkSP);
	if exitBlk then
	do;
		do while p < wC1CF;
			wC1DC(0) = 14;
			wC1DC(1) = memwds(p);
			call encodeFragData(CF$DW);
			pc = pc + 2;
			p = p + 1;  
		end;
		if wC1CF = q then
		do;
			call tx2SyntaxError(ERR201);	/*  Invalid DO CASE block, */
						/*  at least on case required */
			call emitTopItem;
		end;
		wC1CF = q;
	end;
end;



sub$9F9F: procedure public;
	if exitBlk then
	do;
		curInfo$p = blkCurInfo(procChainId);
		if not boC1CC then
		do;
			call sub$5EE8;
			call encodeFragData(CF$RET);
			pc = pc + 1;  
		end;
		if testInfoFlag(F$INTERRUPT) then
			wC1C5 = wC1C5 + 8;

		call setDimension(pc);
		call setBaseVal(wC1C5 + wC1C7);
		pc = wB488(procChainId := procChainNext(procChainId));
		bC1E6 = 0;
		call putTx1Byte(0a4h);
		call putTx1Word(blkCurInfo(procChainId) - botInfo);
		call putTx1Word(pc);
		call wrFragData;
		wC1C3 = wB4B0(procChainId);
		wC1C5 = wB4D8(procChainId);
		wC1C7 = 0;
		curExtProcId = extProcId(procChainId);
	end;
end;

sub$A072: procedure(arg1b) public;
	declare arg1b byte;
	declare p address;
	curInfo$p = tx2op1(tx2qp) + botInfo;
	p = getDimension - arg1b;
	if p < 100h then
		call sub$5F4B(p, 0, 0, 8);
	else
		call sub$5F4B(p, 0, 1, 8);
end;


sub$A0C4: procedure public;
	declare p address;
	p = sub$575E(tx2op1(tx2qp) + botInfo);
	if p < 100h then
		call sub$5F4B(p, 0, 0, 8);
	else
		call sub$5F4B(p, 0, 1, 8);
end;

sub$A10A: procedure public;
	procCallDepth = procCallDepth + 1;
	if procCallDepth <= 10 then
	do;
		call sub$5E66(0fh);
		wB528(procCallDepth) = wC1C3;
		wB53C(procCallDepth) = wC1C3;
	end;
	else if procCallDepth = 11 then
	do;
		call tx2SyntaxError(ERR203);	/*  LIMIT EXCEEDED: NESTING OF TYPED */
					/*  PROCEDURE CALLS */
		call emitTopItem;
	end;
end;




sub$A153: procedure public;
	sub$A266: procedure;
		declare i byte;

		boC1CD = 0;
		do i = 0 to 3;
			bC045(i) = 0ch;
			bC04E(i) = 0;
			boC057(i) = 0;
		end;
	end;

/* sub$A153 */
	call sub$A266;
	do tx2qp = 4 to bC1BF - 1;
		curOp = tx2opc(tx2qp);
		bC1D2 = b5124(curOp);
		do case shr(bC1D2, 6);
			do;
				if curOp = T2$CALL then
					call sub$9D06;
				else if curOp = T2$CALLVAR then
					call sub$9DD7;
				else if curOp = T2$BEGMOVE then
					call sub$9EF8;
				else
					call sub$9BB0;
			end;
			do;
				if curOp = T2$LENGTH then
					call sub$A072(0);
				else if curOp = T2$LAST then
					call sub$A072(1);
				else if curOp = T2$SIZE then
					call sub$A0C4;
			end;
			do;
				if curOp = T2$PROCEDURE then
					call sub$9457;
				else
					call sub$994D;
			end;
			do;
				if curOp = T2$CASE then
					call sub$9F14;
				else if curOp = T2$ENDCASE then
					call sub$9F2F;
				else if curOp = T2$ENDPROC then
					call sub$9F9F;
				else if curOp = T2$BEGCALL then
					call sub$A10A;
			end;
		end;

		tx2op3(tx2qp) = 0;
	end;
	call sub$5795(0);
	boC1CC = boC1CD;
end;




END;
src/plm3a.plm
plm3a: DO;
/* as this defines the record sizes so override the VALx$SIZE literals */

declare	VAL2$SIZE	literally	'51',
	VAL6$SIZE	literally	'300',
	VAL12$SIZE	literally	'1021',
	VAL16$SIZE	literally	'301',
	VAL18$SIZE	literally	'300',
	VAL20$SIZE	literally	'150',
	VAL22$SIZE	literally	'151',
	VAL24$SIZE	literally	'151';



$include(:f2:plm3a.ipx)

declare b4789(*) byte public data(
	2, 2, 3, 4, 3, 4, 2, 2, 3, 4, 2, 3, 2, 3, 3, 3,
	3, 2, 2, 3, 4, 2, 3, 2, 3, 2, 2, 2, 2, 3, 2, 2,
	2, 3, 2, 3, 2, 2, 3, 2, 2, 1, 2, 2, 3, 4);

declare b47B7(*) byte public data(
	0, 2, 4, 7, 0Bh, 0Eh, 12h, 14h,
	16h, 19h, 1Dh, 1Fh, 22h, 24h, 27h, 2Ah,
	2Dh, 30h, 32h, 34h, 37h, 3Bh, 3Dh, 40h,
	42h, 45h, 47h, 49h, 4Bh, 4Dh, 50h, 52h,
	54h, 56h, 59h, 5Bh, 5Eh, 60h, 62h, 65h,
	67h, 69h, 6Ah, 6Ch, 6Eh, 71h, 24h, 24h,
	24h, 24h, 13h, 13h, 18h, 18h, 18h, 18h,
	16h, 2Ch, 15h, 1Fh, 1Fh, 20h, 20h, 19h,
	19h, 19h, 19h, 8, 8, 9, 9, 6,
	7, 25h, 25h, 25h, 25h, 25h, 0Ah, 0Ah,
	0Bh, 0Bh, 14h, 14h, 14h, 14h, 14h, 39h,
	1Ah, 1Ah, 1Ah, 1Ah);

declare b4813(*) byte public data(
	3, 7, 3, 7, 2, 3, 8, 1, 3, 1, 8, 2, 3, 8, 1, 3,
	1, 8, 3, 7, 3, 7, 2, 3, 8, 1, 3, 1, 8, 2, 1Dh, 3,
	1, 7, 2, 12h, 2, 1, 0Ah, 2, 1, 8, 2, 1, 8, 2, 1, 7,
	3, 7, 3, 7, 2, 3, 8, 1, 3, 1, 8, 1, 6, 3, 1, 0Bh,
	1, 6, 3, 1, 0Bh, 1, 6, 1, 6, 3, 7, 3, 7, 2, 3, 8,
	3, 8, 3, 9, 1, 6, 3, 1, 6, 1, 7, 3, 1, 0Ch, 3, 7,
	3, 7, 2, 3, 8, 3, 8, 3, 9, 0Ch, 3, 7, 3, 7, 2, 3,
	8, 1, 3, 1, 8);



declare (tx1Buf, nmsBuf,  atBuf, objBuf) (1280) byte public,
	w7197 address public,
	b7199 byte public,
	rec2 REC2$ST public initial(2, 0),
	rec18 REC18$ST public initial(18h, 0),
	rec16$1 REC16$ST public initial(16h, 0, 0),
	rec16$2 REC16$ST public initial(16h, 0, 1),
	rec16$3 REC16$ST public initial(16h, 0, 2),
	rec16$4 REC16$ST public initial(16h, 0, 4),
	rec12 REC12$ST public initial(12h, 0, 1),
	rec6 REC6$ST public initial(6, 0, 0),
	rec22 REC22$ST public initial(22h, 0, 3),
	rec24$1 REC24$ST public initial(24h, 0, 1, 3),
	rec24$2 REC24$ST public initial(24h, 0, 2, 3),
	rec24$3 REC24$ST public initial(24h, 0, 4, 3),
	rec20 REC20$ST public initial(20h, 0, 3);

$list

sub$4889: procedure public;
	call writeRec(.rec6, 3);
	call writeRec(.rec22, 1);
	call writeRec(.rec24$1, 2);
	call writeRec(.rec24$2, 2);
	call writeRec(.rec24$3, 2);
	call writeRec(.rec20, 1);
end;



sub$48BA: procedure(arg1w, arg2b, arg3b, arg4b$p) public;
	declare arg1w address, (arg2b, arg3b) byte, arg4b$p address;
	declare i byte;
	declare arg4b based arg4b$p(1) byte;

	call recAddByte(arg1w, arg2b, arg3b);
	i = 0;
	do while i <> arg3b;
		call recAddByte(arg1w, arg2b, arg4b(i));
		i = i + 1;
	end;
end;




sub$4908: procedure(arg1w$p, arg2w, arg3b) public;
	declare arg1w$p address, arg2w address, arg3b byte;
	declare arg1w based arg1w$p address;

	arg1w$p = arg1w$p + 1;
	if arg1w + arg3b >= arg2w then
	do;
		call sub$4889;
		rec6.addr = w7197;
	end;
end;




sub$4938: procedure address public;
	declare (p, q) address;
	q = 0;
	do p = 1 to procCnt;
		curInfo$p = procInfo(p) + botInfo;
		if q < getBaseVal then
			q = getBaseVal;
	end;
	return q;
end;




sub$4984: procedure address public;
	declare i byte;

	i = getType - 2;
	if i > 2 then
		return 0;
	do case i;
		return 1;	/* BYTE$T */
		return 2;	/* ADDRESS$T */
		return getParentOffset;	/* STRUCT$T */
	end;
end;


sub$49BC: procedure(arg1w, arg2w, arg3w) public;
	declare (arg1w, arg2w, arg3w) address;

	if b7199 then
	do; 
		call fwrite(.tx1File, .(0a3h), 1);
		call fwrite(.tx1File, .arg1w, 6);
	end;
	else
		programErrCnt = programErrCnt + 1;
end;



sub$49F9: procedure public;
	declare atFData STRUCTURE(type byte, info$p address, stmtNum address,
		atVarInfoOffset address, atVarArrayIndex address, atNestedArrayIndex address,
		atVal address), dat(255) byte;
	

	sub$4A31: procedure;
		declare (w8115, w8117, w8119, w811B) address,
			b811D byte, w811E address;

		sub$4B6C: procedure;
			if curInfo$p = 0 or not testInfoFlag(F$MEMBER) then
			do;
				if w8119 > 1 then
				do;
					w8119 = w8119 - 1;
					curInfo$p = atFData.info$p;
				end;
				else if curInfo$p = 0 then
				do;
					b811D = 0;
					return;
				end;
				else
				do;
					if not testInfoFlag(F$PACKED) then
						b811D = 0;
					if getType  = STRUCT$T then
					do;
						if testInfoFlag(F$ARRAY) then
							w8119 = getDimension;
						call advNxtInfo;
						atFData.info$p = curInfo$p;
					end;
				end;
			end;
			if testInfoFlag(F$ARRAY) then
				w811B = getDimension;
		end;

		sub$4BF4: procedure;
			if not b811D or w8117 >= w8115 then
			do;
				call fread(.atFile, .atFData.type, 1);
				do case atFData.type - 2;
					call fread(.atFile, .atFData.atVal, 2); /* ATI$2 */
					do;		/* ATI$STRING */
						call fread(.atFile, .w8115, 2);
						call fread(.atFile, .dat, w8115);
						w8117 = 0;
					end;
					call fread(.atFile, .atFData.atVarInfoOffset, 8); /* ATI$DATA */
					;		/* ATI$END */
				end;
			end;
		end;



		sub$4C7A: procedure;
			sub$4CAC: procedure;
				if getType = BYTE$T then
				do;
					call sub$4908(.rec6, 12ch, 1);
					call recAddByte(.rec6, 3, atFData.atVal);
					w7197 = w7197 + 1;
				end;
				else
				do;
					call sub$4908(.rec6, 12Ch, 2);
					call recAddWord(.rec6, 3, atFData.atVal);
					w7197 = w7197 + 2;
				end;
			end;

			sub$4CF9: procedure;
				call sub$49BC(0d2h, curInfo$p - botInfo, atFData.stmtNum);
				call sub$4CAC;
			end;

			sub$4D13: procedure;
				declare w8120 address, bytpr based w8120(2) byte; 

				if getType = BYTE$T then
				do;
					atFData.atVal = dat(w8117);
					w8117 = w8117 + 1;
				end;
				else
				do;
						w8120 = .atFData.atVal;
						bytpr(1) = dat(w8117);
						w8117 = w8117 + 1;
						if w8117 < w8115 then
						do;
							bytpr(0) = dat(w8117);
							w8117 = w8117 + 1;
						end;
						else
						do;
								bytpr(0) = bytpr(1);
								bytpr(1) = 0;
						end;
				end;
				call sub$4CAC;
			end;



			sub$4D85: procedure;
				if atFData.atVal > 255 and getType = BYTE$T then
					call sub$4CF9;
				else
					call sub$4CAC;
			end;

			sub$4DA8: procedure;
				declare i byte, (p, q) address, j byte;

				if atFData.atVarInfoOffset = 0 then
					call sub$4D85;
				else if getType = BYTE$T then
					call sub$4CF9;
				else
				do;
					p = curInfo$p;
					curInfo$p = botInfo + atFData.atVarInfoOffset;
					if testInfoFlag(F$MEMBER) then
					do;
						atFData.atVal = atFData.atVal + sub$4984 * atFData.atNestedArrayIndex + getLinkVal;
						curInfo$p = getParentOffset;
					end;

					atFData.atVal = atFData.atVal + sub$4984 * atFData.atVarArrayIndex + getLinkVal;
					if testInfoFlag(F$EXTERNAL) then
					do;
						i = getExternId;
						curInfo$p = p;
						call sub$4908(.rec20, 95h, 4);
						call sub$4CAC;
						call recAddWord(.rec20, 1, i);
						call recAddWord(.rec20, 1, w7197 - 2);
					end;
					else if testInfoFlag(F$ABSOLUTE) then
					do;
						curInfo$p = p;
						call sub$4CAC;
					end;
					else
					do;
						if getType = PROC$T or getType = LABEL$T or testInfoFlag(F$DATA) then
						do;
							q = .rec24$1;
							i = 1;
						end;
						else if testInfoFlag(F$MEMORY) then
						do;
							q = .rec24$3;
							i = 4;
						end;
						else
						do;
							q = .rec24$2;
							i = 2;
						end;

						if i = rec6.seg then
						do;
							q = .rec22;
							j = 1;
						end;
						else
							j = 2;

						curInfo$p = p;
						call sub$4908(q, 95h, 2);
						call sub$4CAC;
						call recAddWord(q, j, w7197 - 2);
					end;
				end;
			end sub$4DA8;

	/* sub$4C7A */	if b811D then
			do;
				do case atFData.type - 2;
					call sub$4D85;	/* ATI$2 */
					call sub$4D13;	/* ATI$STRING */
					call sub$4DA8;	/* ATI$DATA */
				end;
			end;
		end;

	/* sub$4A31 */
		call fread(.atFile, .atFData.info$p, 4);
		curInfo$p = (w811E := atFData.info$p) + botInfo;
		w8119,  w811B, w8115, w8117 = 0;
		if testInfoFlag(F$DATA) then
			rec6.seg = 1;
		else if testInfoFlag(F$MEMORY) then
			rec6.seg = 4;
		else if testInfoFlag(F$ABSOLUTE) then
			rec6.seg = 0;
		else
			rec6.seg = 2;

		rec6.addr = getLinkVal;
		w7197 = rec6.addr;
		if curInfo$p = botInfo then
			b811D = 0;
		else if testInfoFlag(F$EXTERNAL) then
		do;
			call sub$49BC(0d9h, w811E, atFData.stmtNum);
			b811D = 0;
		end;
		else
		do;
			call sub$4B6C;
			b811D = 0ffh;
		end;

		call sub$4BF4;
		if atFData.type = ATI$END then
		do;
			call sub$4889;
			return;
		end;

		do while 1;
			call sub$4C7A;
			call sub$4BF4;
			if atFData.type = ATI$END then
			do; 
				call sub$4889;
				return;
			end;
			else if b811D then
			do;
				if w811B > 1 then
					w811B = w811B - 1;
				else
				do;
					call advNxtInfo;
					do while curInfo$p <> 0;
						if BYTE$T <= getType and getType <= STRUCT$T then
							goto break;
						call advNxtInfo;
					end;
				break:
					call sub$4B6C;
					if not b811D then
						call sub$49BC(0d1h, w811E, atFData.stmtNum);
				end;
			end;
		end;
	end;

	do while 1;
		call fread(.atFile, .atFData.type, 1);
		if atFData.type = ATI$AHDR then
			call fread(.atFile, .atFData.info$p, 12);
		else if atFData.type = ATI$DHDR then
			call sub$4A31;
		else
			return;
	end;
end;
END;
src/plm3b.plm
plm3b: do;
$include(:f2:plm3b.ipx)

writeRec: procedure(rec$p, arg2b) public;
	declare rec$p address, arg2b byte;
	declare (p, len$p) address, crc byte, cnt address;
	declare len based len$p address;
	declare brec based rec$p(1) byte;

	len$p = rec$p + 1;
	if len > 0 and OBJECT then
	do;
			crc = 0;
			p = 0;
			len = len + arg2b + 1;
			cnt = len + 2;
			do while p < cnt;
				crc = crc - brec(p);
				p = p + 1;
			end;
			brec(cnt) = crc;	/* insert checksum */
			call fwrite(.objFile, rec$p, cnt + 1);
	end;
	len = 0;
end;



recAddByte: procedure(rec$p, arg2b, arg3b) public;
	declare rec$p address, (arg2b, arg3b) byte;
	declare len$p address, len based len$p address;
	declare rec based rec$p structure(type byte, len address, val(1) byte);

	len$p = .rec.len;
	rec.val(len + arg2b) = arg3b;
	len = len + 1;
end;



recAddWord: procedure(arg1w, arg2b, arg3w) public;
	declare arg1w address, arg2b byte, arg3w address;

	call recAddByte(arg1w, arg2b, low(arg3w));
	call recAddByte(arg1w, arg2b, high(arg3w));
end;
end;
src/plm4a.plm
plm4a: DO;
$include(:f2:plm4a.ipx)

declare b42A8(*) byte public data(
	2, 2, 3, 4, 3, 4, 2, 2, 
	3, 4, 2, 3, 2, 3, 3, 3, 
	3, 2, 2, 3, 4, 2, 3, 2, 
	3, 2, 2, 2, 2, 3, 2, 2, 
	2, 3, 2, 3, 2, 2, 3, 2, 
	2, 1, 2, 2, 3, 4),

	b42D6(*) byte public data(
	  0,  2,  4,  7,0Bh,0Eh,12h,14h,
	16h,19h,1Dh,1Fh,22h,24h,27h,2Ah,
	2Dh,30h,32h,34h,37h,3Bh,3Dh,40h,
	42h,45h,47h,49h,4Bh,4Dh,50h,52h,
	54h,56h,59h,5Bh,5Eh,60h,62h,65h,
	67h,69h,6Ah,6Ch,6Eh,71h),

	b4304(*) byte public data(
	24h,24h,24h,24h,13h,13h,18h,18h,
	18h,18h,16h,2Ch,15h,1Fh,1Fh,20h,
	20h,19h,19h,19h,19h,   8,   8,   9,
	   9,   6,   7,25h,25h,25h,25h,25h,
	 0Ah, 0Ah, 0Bh, 0Bh,14h,14h,14h,14h,
	14h,39h,1Ah,1Ah,1Ah,1Ah),

	b4332(*) byte public data(
	   0,   0,   0,   0,26h,30h,30h,26h,
	30h,20h,30h,12h,12h,12h,   0,10h,
	10h,10h,10h,10h,10h,60h,   0,26h,
	20h,20h,   0,   0,   0,   0,   0,   0,
	10h,80h,80h,80h,90h,90h,40h,0A0h,
	0A0h,0A0h,80h,0B0h,90h,80h,0B0h,90h,
	80h,0B0h,90h,80h,0B0h,90h,80h,0B0h,
	90h,20h,30h,30h,30h,10h,10h,70h,
	70h,30h,30h,30h,30h,80h,80h,80h,
	80h,80h,80h,80h,80h,   0,   0,   0,
	   0,   0,   0,   0,   0,   0,   0,   0,
	20h,20h,   0,   0,20h,   0,   0,2Ch,
	40h,   0,10h,10h,60h,20h,   0,   0,
	0A0h,0A0h,0A0h,0A0h,32h,16h,10h,20h,
	   0,10h,10h,10h,10h,10h,60h,   0,
	   0,   0,   0,   0,   0,   0,   0,   0,
	   0,   0,   0,   0,   0,   0,   0,70h,
	60h,60h,70h,50h,70h,60h,60h,0E0h,
	   0,   0,   0,   0,   0,   0,   0,   0,
	   0,   0,   0,   0,   0,   0,   0,   0,
	   0,   0,   0,   0,   0,   0,80h,80h,
	80h,80h,80h,80h,   0,   0,80h,80h,
	80h,80h,80h,80h,80h,80h,80h,80h,
	80h,80h,80h,80h,80h,80h,80h,80h,
	80h,80h,80h,80h,80h,80h,80h,80h,
	80h,80h,80h,80h,80h,80h,80h,80h,
	80h,80h,80h,80h,80h,80h,80h,80h,
	80h,80h,80h,80h,80h,80h,80h,80h,
	80h,80h,80h,80h,80h,80h,80h,80h,
	80h,80h,80h,80h,80h,80h,80h,80h,
	80h,80h,80h,80h,80h,80h,80h,80h,
	80h,80h,80h,80h,80h,80h,80h),

	b4431(*) byte public data(
	0, 0, 1, 1, 2, 2, 3, 3,
	4, 4, 5, 5, 6, 6, 7, 7,
	8, 9, 0Ah),

	b4444(*) byte public data(
	   0,   2,   4,   6,   8, 0Ah, 0Ch,10h,
	11h, 0Eh,12h,   0,   2,   4,   6,   8,
	 0Ah, 0Ch,10h,11h, 0Eh,12h,   0,   2,
	   4,   6,   8, 0Ah, 0Ch,10h,11h, 0Eh,
	12h,   0,   2,   4,   6,   8, 0Ah, 0Ch,
	10h,11h, 0Eh,12h,   0,   2,   4,   6,
	   8, 0Ah, 0Ch,10h,11h, 0Eh,12h, 0Ch,
	11h,12h, 0Ch,11h,12h,   2,   6,   0,
	   4,   6,   8, 0Ah, 0Ch, 0Eh,10h,11h,
	12h, 0Dh, 0Fh,   7,   9, 0Bh,   1,   5,
	   3),

	b4495(*) byte public data(	/* 11 byte entries */
	90h,91h,94h,95h,98h,99h,9Ah,9Ch,0A0h,0A1h,9Dh,
	6Ch,6Dh,70h,71h,74h,75h,76h,78h,7Ch,7Dh,79h,
	   0,   0,   0,   0,   0,   0,64h,65h,   0,   0,   0,
	   0,   0,   0,   0,   0,   0,68h,69h,   0,   0,   0,
	   0,58h,   0,   0,59h,5Ah,54h,55h,   0,   0,   0,
	   0,60h,   0,   0,61h,62h,5Ch,5Dh,   0,   0,   0,
	   0,84h,   0,   0,85h,86h,80h,81h,   0,   0,   0,
	   0,8Ch,   0,   0,8Dh,8Eh,88h,89h,   0,   0,   0,
	   0,   0,   0,   0,10h,11h,12h,14h,15h,16h,17h,
	   0,   1,   4,   5,   8,   9, 0Ah, 0Ch, 0Dh, 0Eh, 0Fh,
	   0,30h,   0,31h,   0,   0,   0,   0,   0,   0,   0,
	   0,28h,   0,29h,   0,   0,   0,   0,   0,   0,   0,
	18h,19h,1Ch,1Dh,20h,21h,22h,24h,25h,26h,27h,
	44h,45h,48h,49h,4Ch,4Dh,4Eh,50h,51h,52h,53h,
	0A8h,0A9h,0ACh,0ADh,0B0h,0B1h,0B2h,0B4h,0B5h,0B6h,0B7h,
	34h,36h,35h,38h,39h,3Ah,   0,   0,   0,   0,   0,
	3Ch,3Dh,3Eh,40h,41h,42h,   0,   0,   0,   0,   0,
	   0,2Ch,   0,   0,2Dh,2Eh,   0,   0,   0,   0,   0,
	0A4h,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0),

	b4566(*) byte public data(
	   8,1Ch, 0Ch,   0, 0Bh,11h,   1, 0Ah,
	 0Fh,10h, 0Dh,   9,   2,   3,   4,   5,
	   6,   7,   0,1Eh,12h,0Eh),

	b457C(*) byte public data(
	   3,   3,   3,   3,   3,   3, 0Ch, 0Dh,
	 0Eh, 0Fh,10h,11h,   0,   0,   0,   0,
	   0,   0,   0,   0,12h,   7,   4,   4,
	   2, 0Ah,15h,   0,   0,   0,   0,   8,
	   9,   0,   0,   0, 0Bh,   6,12h,12h,
	12h,12h,12h,12h,   5,   1,   1,   1,
	13h,13h,13h,   1,   1,   1,13h,13h,
	13h,14h,   0,   0,   0,   0,   0,   0,
	   0,   0,   0,   0,   0,   0,   0,   0,
	   0,   0,   0,   1,   1, 0Ch, 0Ch, 0Ch,
	 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Dh, 0Dh, 0Dh,
	 0Dh, 0Dh, 0Dh, 0Dh, 0Dh,   0, 0Eh, 0Eh,
	 0Eh, 0Eh, 0Fh, 0Fh, 0Fh, 0Fh,   0, 0Fh,
	 0Fh, 0Fh, 0Fh, 0Eh, 0Eh, 0Eh, 0Eh,   0,
	10h,10h,10h,10h,10h,   0,   0,   0,
	   0,   0,   0,   0,   0,   0,   0,   0,
	   1,   1,   0,   0,   0,0),

	b4602(*) byte public data(
	0A7h,0A7h,0A7h,0A7h,0A7h,0A7h,0A7h,0A7h,
	0A7h,0A7h,0A7h,0A8h,0A8h,0A8h,0A8h,0A8h,
	0A8h,0A8h,0A8h,0A8h,0A8h,0A8h,0A9h,0A9h,
	0A9h,0A9h,0A9h,0A9h,0A9h,0A9h,0A9h,0A9h,
	0A9h,0AAh,0AAh,0AAh,0AAh,0AAh,0AAh,0AAh,
	0AAh,0AAh,0AAh,0AAh,0ABh,0ABh,0ABh,0ABh,
	0ABh,0ABh,0ABh,0ABh,0ABh,0ABh,0ABh,0A6h,
	0A6h,0A6h,0A6h,0A6h,0A6h,0A6h,0A6h,0A6h,
	0A6h,0A6h,0A6h,0A6h,0A6h,0A6h,0A6h,0A6h,
	0A6h,0A6h,0A6h,0A6h,0A6h,0A6h,0A6h,0A6h,
	0A6h),

	opcodes(*) byte public data(
	3, 'SUB', 3, 'SBB', 3, 'RLC', 3, 'RRC',
	3, 'RAL', 3, 'RAR', 3, 'SHL', 3, 'SHR',
	3, 'ADD', 3, 'ADC', 3, 'MUL', 3, 'DIV',
	3, 'ANA', 3, 'ORA', 3, 'XRA', 3, 'NEG',
	3, 'NOT', 3, 'M10', 3, 'CPI', 3, 'CMP',
	3, 'SUI', 3, 'SBI', 3, 'ADI', 3, 'ACI',
	3, 'ANI', 3, 'ORI', 3, 'XRI', 3, 'INR',
	3, 'INX', 3, 'DCR', 3, 'DCX', 5, 'ADD', tab, 'A',
	3, 'PSW', 1, 'A', 1, 'B', 1, 'C',
	1, 'D', 1, 'E', 1, 'H', 1, 'L',
	1, 'M', 2, 'AH', 2, 'DH', 2, 'DA',
	2, 'DB', 3, 'DBP', 3, 'DHP', 3, 'PDB',
	3, 'APH', 3, 'DPH', 3, 'PDA', 3, 'PDH',
	2, 'PB', 2, 'PD', 2, 'PH', 3, 'BPH',
	3, 'BBA', 0),

	regNo(*) byte public data(7, 0, 2, 4, 7, 1, 3, 5, 6),
					/* A B D H A C E L M */
	regIdx(*) byte public data(86h,88h,8Ch,90h,86h,8Ah,8Eh,92h,94h),
	stkRegNo(*) byte public data(3, 0, 1, 2),
	stkRegIdx(*) byte public data(82h, 88h, 8Ch, 90h),	/* psw b d h */

	b473D(*) byte public data(
	90h, 98h, 7, 0Fh, 17h, 1Fh, 0, 0, 
	80h, 88h, 0, 0, 0A0h, 0B0h, 0A8h, 0, 
	0, 0, 0, 0FEh, 0B8h, 0D6h, 0DEh, 0C6h, 
	0CEh, 0E6h, 0F6h, 0EEh, 4, 3, 5, 0Bh, 
	87h),

	b475E(*) byte public data(
	9, 1Dh, 0Ch, 1, 0, 0, 1, 0, 
	0, 0, 0Dh, 9, 2, 3, 4, 5, 
	20h, 0, 1, 1Fh, 0, 0Eh),

	b4774(*) byte public data(
	17h, 0, 19h, 13h, 0, 0, 16h, 0, 0, 0, 1Ah, 18h, 3, 
	2, 5, 4, 0, 0, 15h, 0, 0, 1Bh),

	b478A(*) byte public data(
	8, 0, 0Ch, 14h, 0, 0, 1, 0, 
	0, 0, 0Dh, 9, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0Eh),

	b47A0(*) byte public data(
	0,4,8,0Ch,10h,14h,18h,1Ch,
	20h,24h,28h,2Ch,30h,34h,38h,3Ch,
	40h,44h,0CFh,48h,4Ch,50h,54h,58h,
	5Ch,60h,64h,68h,6Ch,70h,74h,78h,
	7Ch),

	w47C1(*) address public data(
	0,0,0,0,1000h,1001h,2002h,1004h,
	1005h,1006h,1007h,2008h,200Ah,100Ch,100Dh,100Eh,
	300Fh,2012h,1014h,3015h,1018h,1019h,101Ah,101Bh,
	101Ch,101Dh,101Eh,101Fh,1022h,2022h,3022h,4022h,
	2020h,1026h,2026h,3026h,1029h,2029h,120Fh,102Ch,
	202Ch,302Ch,102Fh,1030h,1031h,2032h,2034h,2036h,
	3038h,303Bh,303Eh,3041h,3044h,3047h,304Ah,304Dh,
	3050h,1053h,2054h,1056h,1057h,3058h,305Bh,105Eh,
	105Eh,405Fh,7063h,906Ah,0D073h,1083h,2083h,3083h,
	4083h,5083h,4080h,3081h,2082h,4088h,308Ch,208Fh,
	2091h,3093h,4096h,509Ah,509Fh,40A4h,30A8h,20ABh,
	20AEh,10ADh,10B0h,20B1h,20B3h,20B5h,10B7h,80B8h,
	10C0h,10FCh,10C1h,10C2h,20C3h,10C5h,80C6h,0A0CEh,
	102Ch,202Ch,102Ch,202Ch,220Dh,1210h,1211h,2212h,
	1022h,1214h,1215h,1216h,1217h,1218h,2219h,0,
	0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,10D8h,
	0,0,0,10D9h,10DAh,10DAh,10DBh,10DCh,
	30DDh,30E0h,30E3h,10E6h,10E7h,10E8h,20E9h,0,
	0,10EBh,0,0,0,0,0,0,
	0,0,0,0,0,0,10ECh,20EDh,
	40EFh,40F3h,20F7h,30F9h),

	w4919(*) address public data(
	134h,137h,13Fh,142h,14Ah,14Dh,151h,15Ah,
	15Ch,15Fh,161h,14Ah,14Dh,151h,15Ah,15Ch,
	15Fh,161h,134h,137h,13Fh,142h,14Ah,14Dh,
	151h,15Ah,15Ch,15Fh,161h,11Ah,11Dh,0FDh,
	101h,103h,10Bh,10Eh,1F6h,1F9h,1FBh,1E9h,
	1ECh,1EEh,1DBh,1DEh,1E0h,1CEh,1D1h,1D3h,
	134h,137h,13Fh,142h,14Ah,14Dh,151h,15Ah,
	15Ch,15Fh,161h,183h,185h,1AEh,1B2h,1B4h,
	183h,185h,1BEh,1C2h,1C4h,183h,185h,183h,
	185h,134h,137h,13Fh,142h,14Ah,14Dh,151h,
	177h,17Ah,16Ah,16Dh,183h,185h,192h,196h,
	198h,18Ah,18Ch,19Dh,1A1h,1A3h,134h,137h,
	13Fh,142h,14Ah,14Dh,151h,177h,17Ah,16Ah,
	16Dh,205h,134h,137h,13Fh,142h,14Ah,14Dh,
	151h,15Ah,15Ch,15Fh,161h),

	b4A03(*) byte public data(
	0Bh, 8, 0Bh, 8, 10h, 0Dh, 9, 10h, 
	0Eh, 0Bh, 9, 10h, 0Dh, 9, 10h, 0Eh, 
	0Bh, 9, 0Bh, 8, 0Bh, 8, 10h, 0Dh, 
	9, 10h, 0Eh, 0Bh, 9, 1Ah, 17h, 0Eh, 
	0Ah, 8, 0Fh, 0Ch, 0Fh, 0Ch, 0Ah, 0Dh, 
	0Ah, 8, 0Eh, 0Bh, 9, 0Dh, 0Ah, 8, 
	0Bh, 8, 0Bh, 8, 10h, 0Dh, 9, 10h, 
	0Eh, 0Bh, 9, 7, 5, 10h, 0Ch, 0Ah, 
	7, 5, 10h, 0Ch, 0Ah, 7, 5, 7, 
	5, 0Bh, 8, 0Bh, 8, 10h, 0Dh, 9, 
	0Ch, 9, 0Dh, 0Ah, 7, 5, 0Bh, 7, 
	5, 8, 6, 11h, 0Dh, 0Bh, 0Bh, 8, 
	0Bh, 8, 10h, 0Dh, 9, 0Ch, 9, 0Dh, 
	0Ah, 8, 0Bh, 8, 0Bh, 8, 10h, 0Dh, 
	9, 10h, 0Eh, 0Bh, 9),

	b4A78(*) byte public data(
/* 0000 */ 8Dh, tab, 'ADC', tab, 'L', 80h,
/* 0008 */ 0C6h, tab, 'ADI', tab, 84h, 0FFh, 80h,
/* 0011 */ 0E6h, tab, 'ANI', tab, 84h, 01h, 80h,
/* 001A */ 0E6h, tab, 'ANI', tab, 84h, 03h, 80h,
/* 0023 */ 0E6h, tab, 'ANI', tab, 84h, 07h, 80h,
/* 002C */ 0E6h, tab, 'ANI', tab, 84h, 80h,
/* 0034 */ 80h, 0E6h, tab, 'ANI', tab, 84h, 0c0h, 80h,
/* 003E */ 0E6h, tab, 'ANI', tab, 84h, 0E0h, 80h,
/* 0047 */ 0E6h, tab, 'ANI', tab, 84h, 0F8h, 80h,
/* 0050 */ 0E6h, tab, 'ANI', tab, 84h, 0FCh, 80h,
/* 0059 */ 0E6h, tab, 'ANI', tab, 84h, 0FEh, 80h,
/* 0062 */ 0E6h, tab, 'ANI', tab, 84h, 0F0h, 80h,
/* 006B */ 0CDh, tab, 'CALL', tab, 82h, 80h,
/* 0074 */ 0CDh, tab, 'CALL', tab, 83h, ' ', 80h,
/* 007E */ 0CDh, tab, 'CALL', tab, 93h, '     ', 80h,
/* 008C */ 2Fh, tab, 'CMA', 80h,
/* 0092 */ 27h, tab, 'DAA', 80h,
/* 0098 */ 09h, tab, 'DAD', tab, 'B', 80h,
/* 00A0 */ 29h, tab, 'DAD', tab, 'H', 80h,
/* 00A8 */ 09h, tab, 'DAD', tab, 0C0h, 80h,
/* 00B0 */ 39h, tab, 'DAD', tab, 'SP', 80h,
/* 00B9 */ 3Dh, tab, 'DCR', tab, 'A', 80h,
/* 00C1 */ 0Dh, tab, 'DCR', tab, 'C', 80h,
/* 00C9 */ 1Bh, tab, 'DCX', tab, 'D', 80h,
/* 00D1 */ 2Bh, tab, 'DCX', tab, 'H', 80h,
/* 00D9 */ 0F3h, tab, 'DI', 80h,
/* 00DE */ 00h, tab, 'DW', tab, 82h, 80h,
/* 00E5 */ 0FBh, tab, 'EI', 80h,
/* 00EA */ 00h, 089h, 'AH:', 80h,
/* 00F0 */ 00h, 089h, 'APH:', 80h,
/* 00F7 */ 00h, 089h, 'B:', 80h,
/* 00FC */ 00h, 089h, 'BBA:', 80h,
/* 0103 */ 00h, 089h, 'BPH:', 80h,
/* 010A */ 00h, 089h, 'D:', 80h,
/* 010F */ 00h, 089h, 'DA:', 80h,
/* 0115 */ 00h, 089h, 'DB:', 80h,
/* 011B */ 00h, 089h, 'DBP:', 80h,
/* 0122 */ 00h, 089h, 'DH:', 80h,
/* 0128 */ 00h, 089h, 'DHP:', 80h,
/* 012F */ 00h, 089h, 'DPH:', 80h,
/* 0136 */ 00h, 089h, 'H:', 80h,
/* 013B */ 00h, 089h, 'PB:', 80h,
/* 0141 */ 00h, 089h, 'PD:', 80h,
/* 0147 */ 00h, 089h, 'PDA:', 80h,
/* 014E */ 00h, 089h, 'PDB:', 80h,
/* 0155 */ 00h, 089h, 'PDH:', 80h,
/* 015C */ 00h, 089h, 'PH:', 80h,
/* 0162 */ 76h, tab, 'HLT', 80h,
/* 0168 */ 0DBh, tab, 'IN', tab, 86h, 80h,
/* 016F */ 3Ch, tab, 'INR', tab, 'A', 80h,
/* 0177 */ 13h, tab, 'INX', tab, 'D', 80h,
/* 017F */ 23h, tab, 'INX', tab, 'H', 80h,
/* 0187 */ 0C2h, tab, 'J', 88h, tab, 82h, 80h,
/* 018E */ 0FAh, tab, 'JM', tab, 87h, 04h, 80h,
/* 0196 */ 0C3h, tab, 'JMP', tab, 82h, 80h,
/* 019E */ 0D2h, tab, 'JNC', tab, 82h, 80h,
/* 01A6 */ 0D2h, tab, 'JNC', tab, 87h, 04h, 80h,
/* 01AF */ 0D2h, tab, 'JNC', tab, 87h, 05h, 80h,
/* 01B8 */ 0C2h, tab, 'JNZ', tab, 87h, 0FEh, 80h,
/* 01C1 */ 0C2h, tab, 'JNZ', tab, 87h, 0ECh, 80h,
/* 01CA */ 0C2h, tab, 'JNZ', tab, 87h, 0FDh, 80h,
/* 01D3 */ 0C2h, tab, 'JNZ', tab, 87h, 0F9h, 80h,
/* 01DC */ 0C2h, tab, 'JNZ', tab, 87h, 0F8h, 80h,
/* 01E5 */ 0C2h, tab, 'JNZ', tab, 87h, 0F7h, 80h,
/* 01EE */ 0EAh, tab, 'JPE', tab, 87h, 04h, 80h,
/* 01F7 */ 0CAh, tab, 'JZ', tab, 87h, 04h, 80h,
/* 01FF */ 3Ah, tab, 'LDA', tab, 82h, 80h,
/* 0207 */ 0Ah, tab, 'LDAX', tab, 0C0h, 80h,
/* 0210 */ 2Ah, tab, 'LHLD', tab, 82h, 80h,
/* 0219 */ 21h, tab, 'LXI', tab, 'H,', 82h, tab, 8Ah, 80h,
/* 0225 */ 21h, tab, 'LXI', tab, 'H,', 87h, 0Dh, 80h,
/* 0230 */ 21h, tab, 'LXI', tab, 'H,', 87h, 11h, 80h,
/* 023B */ 21h, tab, 'LXI', tab, 'H,', 87h, 08h, 80h,
/* 0246 */ 21h, tab, 'LXI', tab, 'H,', 87h, tab, 80h,
/* 0251 */ 21h, tab, 'LXI', tab, 'H,', 94h, 00h, 80h,
/* 025C */ 01h, tab, 'LXI', tab, 0C0h, ',', 92h, 80h,
/* 0266 */ 31h, tab, 'LXI', tab, 'SP,', 85h, 80h,
/* 0271 */ 7Ah, tab, 'MOV', tab, 'A,D', 80h,
/* 027B */ 7Bh, tab, 'MOV', tab, 'A,E', 80h,
/* 0285 */ 7Ch, tab, 'MOV', tab, 'A,H', 80h,
/* 028F */ 7Dh, tab, 'MOV', tab, 'A,L', 80h,
/* 0299 */ 78h, tab, 'MOV', tab, 'A,', 0E0h, 80h,
/* 02A3 */ 78h, tab, 'MOV', tab, 'A,', 0E2h, 80h,
/* 02AD */ 7Eh, tab, 'MOV', tab, 'A,M', 80h,
/* 02B7 */ 44h, tab, 'MOV', tab, 'B,H', 80h,
/* 02C1 */ 4Fh, tab, 'MOV', tab, 'C,A', 80h,
/* 02CB */ 4Dh, tab, 'MOV', tab, 'C,L', 80h,
/* 02D5 */ 57h, tab, 'MOV', tab, 'D,A', 80h,
/* 02DF */ 50h, tab, 'MOV', tab, 'D,B', 80h,
/* 02E9 */ 56h, tab, 'MOV', tab, 'D,M', 80h,
/* 02F3 */ 5Fh, tab, 'MOV', tab, 'E,A', 80h,
/* 02FD */ 59h, tab, 'MOV', tab, 'E,C', 80h,
/* 0307 */ 5Eh, tab, 'MOV', tab, 'E,M', 80h,
/* 0311 */ 67h, tab, 'MOV', tab, 'H,A', 80h,
/* 031B */ 66h, tab, 'MOV', tab, 'H,M', 80h,
/* 0325 */ 6Fh, tab, 'MOV', tab, 'L,A', 80h,
/* 032F */ 46h, tab, 'MOV', tab, 0D0h, ',M', 80h,
/* 0339 */ 40h, tab, 'MOV', tab, 0D2h, ',', 0e0h, 80h,
/* 0343 */ 46h, tab, 'MOV', tab, 0D2h, ',M', 80h,
/* 034D */ 40h, tab, 'MOV', tab, 0D0h, ',', 0e1h, 80h,
/* 0357 */ 40h, tab, 'MOV', tab, 0D2h, ',', 0e3h, 80h,
/* 0361 */ 70h, tab, 'MOV', tab, 'M,', 0E0h, 80h,
/* 036B */ 70h, tab, 'MOV', tab, 'M,', 0E2h, 80h,
/* 0375 */ 3Eh, tab, 'MVI', tab, 'A,', 84h, 10h, 80h,
/* 0380 */ 3Eh, tab, 'MVI', tab, 'A,', 84h, 0FFh, 80h,
/* 038B */ 3Eh, tab, 'MVI', tab, 'A,', 84h, 00h, 80h,
/* 0396 */ 06h, tab, 'MVI', tab, 'B,', 84h, 00h, 80h,
/* 03A1 */ 16h, tab, 'MVI', tab, 'D,', 84h, 00h, 80h,
/* 03AC */ 26h, tab, 'MVI', tab, 'H,', 84h, 00h, 80h,
/* 03B7 */ 06h, tab, 'MVI', tab, 0D2h, ',', 96h, 80h,
/* 03C1 */ 06h, tab, 'MVI', tab, 0D0h, ',', 84h, 0, 80h,
/* 03CC */ 36h, tab, 'MVI', tab, 'M,', 84h, 00h, 80h,
/* 03D7 */ 00h, tab, 9Bh, 80h,
/* 03DB */ 00h, tab, 9Bh, tab, 0E5h, 80h,
/* 03E1 */ 00h, tab, 9Bh, tab, 0E7h, 80h,
/* 03E7 */ 00h, tab, 9Bh, tab, 0C0h, 80h,
/* 03ED */ 00h, tab, 9Bh, tab, 0ECh, 80h,
/* 03F3 */ 00h, tab, 0ABh, 80h,
/* 03F7 */ 00h, tab, 0ABh, tab, 86h, 80h,
/* 03FD */ 00h, tab, 0BBh, tab, 0ECh, 80h,
/* 0403 */ 00h, tab, 8Bh, tab, 0E9h, 80h,
/* 0409 */ 00h, tab, 8Bh, tab, 0EBh, 80h,
/* 040F */ 00h, tab, 8Bh, tab, 0ECh, 80h,
/* 0415 */ 00h, tab, 8Bh, tab, 0DCh, 80h,
/* 041B */ 0B7h, tab, 'ORA', tab, 'A', 80h,
/* 0423 */ 0B5h, tab, 'ORA', tab, 'L', 80h,
/* 042B */ 0D3h, tab, 'OUT', tab, 86h, 80h,
/* 0433 */ 0E9h, tab, 'PCHL', 80h,
/* 043A */ 00h, '; PROC', tab, 81h, 80h,
/* 0444 */ 0C1h, tab, 'POP', tab, 'B', 80h,
/* 044C */ 0C1h, tab, 'POP', tab, 0C0h, tab, 8Ah, 80h,
/* 0456 */ 0F1h, tab, 'POP', tab, 'PSW', 80h,
/* 0460 */ 0E5h, tab, 'PUSH', tab, 'H', 80h,
/* 0469 */ 0C5h, tab, 'PUSH', tab, 0C0h, tab, 8Ah, 80h,
/* 0474 */ 0F5h, tab, 'PUSH', tab, 'PSW', 80h,
/* 047F */ 17h, tab, 'RAL', 80h,
/* 0485 */ 1Fh, tab, 'RAR', 80h,
/* 048B */ 0C9h, tab, 'RET', 80h,
/* 0491 */ 9Fh, tab, 'SBB', tab, 'A', 80h,
/* 0499 */ 98h, tab, 'SBB', tab, 'B', 80h,
/* 04A1 */ 9Ch, tab, 'SBB', tab, 'H', 80h,
/* 04A9 */ 9Eh, tab, 'SBB', tab, 'M', 80h,
/* 04B1 */ 22h, tab, 'SHLD', tab, 82h, 80h,
/* 04BA */ 0F9h, tab, 'SPHL', 80h,
/* 04C1 */ 32h, tab, 'STA', tab, 82h, 80h,
/* 04C9 */ 97h, tab, 'SUB', tab, 'A', 80h,
/* 04D1 */ 91h, tab, 'SUB', tab, 'C', 80h,
/* 04D9 */ 95h, tab, 'SUB', tab, 'L', 80h,
/* 04E1 */ 96h, tab, 'SUB', tab, 'M', 80h,
/* 04E9 */ 0D6h, tab, 'SUI', tab, 84h, 01h, 80h,
/* 04F2 */ 0EBh, tab, 'XCHG', 80h,
/* 04F9 */ 0E3h, tab, 'XTHL', tab, tab, 8Ah, 80h,
/* 0503 */ 03h, tab, 'INX', tab, 0C0h, 80h,
/* 050B */ 0Bh, tab, 'DCX', tab, 0C0h, 80h,
/* 0513 */ 69h, tab, 'MOV', tab, 'L,C', 80h,
/* 051D */ 60h, tab, 'MOV', tab, 'H,B', 80h,
/* 0527 */ 4Eh, tab, 'MOV', tab, 'C,M', 80h,
/* 0531 */ 46h, tab, 'MOV', tab, 'B,M', 80h,
/* 053B */ 1Ah, tab, 'LDAX', tab, 'D', 80h,
/* 0544 */ 0Ah, tab, 'LDAX', tab, 'B', 80h,
/* 054D */ 12h, tab, 'STAX', tab, 'D', 80h,
/* 0556 */ 0C2h, tab, 'JNZ', tab, 87h, 0FBh, 80h,
/* 055F */ 06h, tab, 'MVI', tab, 'B,', 84h, 0Ch, 80h,
/* 056A */ 48h, tab, 'MOV', tab, 'C,B', 80h,
/* 0574 */ 0C2h, tab, 'JNZ', tab, 87h, 0FFh, 80h,
/* 057D */ 0C2h, tab, 'JNZ', tab, 87h, 0FAh, 80h,
/* 0586 */ 21h, tab, 'LXI', tab, 'H,', 92h, 80h,
/* 0590 */ 03h, tab, 'INX', tab, 'B', 80h,
/* 0598 */ 78h, tab, 'MOV', tab, 'A,', 0E3h, 80h,
/* 05A2 */ 36h, tab, 'MVI', tab, 'M,', 86h, 80h,
/* 05AC */ 00h, tab, 8Bh, tab, 0D2h, 80h,
/* 05B2 */ 00h, tab, 0BBh, tab, 0E2h, 80h,
/* 05B8 */ 2Dh, tab, 'DCR', tab, 'L', 80h,
/* 05C0 */ 00h, 89h, 80h,
/* 05C3 */ 40h, tab, 'MOV', tab, 0D0h, ',', 0e2h, 80h,
/* 05CD */ 33h, tab, 'INX', tab, 'SP', 80h,
/* 05D6 */ 3Bh, tab, 'DCX', tab, 'SP', 80h,
/* 05DF */ 0DAh, tab, 'JC', tab, 82h, 80h,
/* 05E6 */ 2Ch, tab, 'INR', tab, 'L', 80h,
/* 05EE */ 0C3h, tab, 'JMP', tab, 87h, 07h, 80h),

	w506F(*) address public data(
/*  A4-1 */ 44ch,
/*  A5-1 */ 4f9h,
/*  A6-2 */ 219h, 0b0h,
/*  A7-1 */ 25ch,
/*  A8-1 */ 1ffh,
/*  A9-1 */ 207h,
/*  A10-1 */ 210h,
/*  A11-2 */ 34dh, 357h,
/*  A12-2 */ 357h, 3c1h,
/*  A13-1 */ 357h,
/*  A14-1 */ 4f2h,
/*  A15-1 */ 3c1h,
/*  A16-3 */ 343h, 17fh, 32fh,
/*  A17-2 */ 343h, 3c1h,
/*  A18-1 */ 343h,
/*  A19-3 */ 361h, 0d1h, 36bh,
/*  A20-1 */ 36bh,
/*  A21-1 */ 0deh,
/*  A22-1 */ 4bah,
/*  A23-1 */ 469h,
/*  A24-1 */ 503h,
/*  A25-1 */ 50bh,
/*  A26-1 */ 0d1h,
/*  A27-1 */ 48bh,
/*  A32-2 */ 2a3h, 48bh,
/*  A28-1 A29-2 A30-3 A31-4 A112-1 */ 0a0h, 0a0h, 0a0h, 0a0h,
/*  A33-1 A34-2 A35-3 */ 415h, 415h, 415h,
/*  A36-1 A37-2 */ 5ach, 5ach, 5ach,
/*  A39-1 A40-2 A41-3 A104-1 A105-2 A106-1 A107-2 */ 3e7h, 3e7h, 3e7h,
/*  A42-1 */ 3fdh,
/*  A43-1 */ 3f7h,
/*  A44-1 */ 5b2h,
/*  A45-2 */ 3fdh, 491h,
/*  A46-2 */ 3f7h, 491h,
/*  A47-2 */ 5b2h, 491h,
/*  A48-3 */ 3fdh, 4e9h, 491h,
/*  A49-3 */ 3f7h, 4e9h, 491h,
/*  A50-3 */ 5b2h, 4e9h, 491h,
/*  A51-3 */ 3fdh, 8h, 491h,
/*  A52-3 */ 3f7h, 8h, 491h,
/*  A53-3 */ 5b2h, 8h, 491h,
/*  A54-3 */ 3fdh, 491h, 8ch,
/*  A55-3 */ 3f7h, 491h, 8ch,
/*  A56-3 */ 5b2h, 491h, 8ch,
/*  A57-1 */ 0a8h,
/*  A58-2 */ 210h, 3ach,
/*  A59-1 */ 4b1h,
/*  A60-1 */ 4c1h,
/*  A61-3 */ 36bh, 17fh, 3cch,
/*  A62-3 */ 36bh, 17fh, 361h,
/*  A63-1 A64-1 */ 6bh,
/*  A65-4 */ 23bh, 460h, 210h, 433h,
/*  A66-7 */ 246h, 4f9h, 2adh, 17fh, 31bh, 325h, 433h,
/*  A67-9 */ 225h, 460h, 219h, 0b0h, 2adh, 17fh, 31bh, 325h, 433h,
/*  A68-13 */ 230h, 460h, 219h, 0b0h, 2adh, 17fh, 31bh, 325h, 2adh, 17fh, 31bh, 325h, 433h,
/*  A74-4 */ 3f3h,
/*  A75-3 */ 3f3h,
/*  A76-2 */ 3f3h,
/*  A69-1 A70-2 A71-3 A72-4 A73-5 */ 3d7h, 3d7h, 3d7h, 3d7h, 3d7h,
/*  A77-4 */ 23h, 485h, 485h, 485h,
/*  A78-3 */ 1ah, 485h, 485h,
/*  A79-2 */ 11h, 485h,
/*  A80-2 */ 41bh, 485h,
/*  A81-3 */ 59h, 485h, 485h,
/*  A82-4 */ 50h, 485h, 485h, 485h,
/*  A83-5 */ 47h, 485h, 485h, 485h, 485h,
/*  A84-5 */ 62h, 47fh, 47fh, 47fh, 47fh,
/*  A85-4 */ 3eh, 47fh, 47fh, 47fh,
/*  A86-3 */ 35h, 47fh, 47fh,
/*  A87-2 */ 2ch, 47fh,
/*  A89-1 */ 0a8h,
/*  A88-2 */ 0a8h, 0a8h,
/*  A90-1 */ 8ch,
/*  A91-2 */ 8ch, 16fh,
/*  A92-2 */ 503h, 207h,
/*  A93-2 */ 17fh, 2adh,
/*  A94-1 */ 92h,
/*  A95-8 */ 586h, 0a8h, 0a8h, 307h, 17fh, 2e9h, 4f2h, 433h,
/*  A96-1 */ 42bh,
/*  A98-1 */ 2a3h,
/*  A99-1 */ 299h,
/*  A100-2 */ 485h, 19eh,
/*  A101-1 */ 0a8h,
/*  A102-8 */ 5e6h, 5eeh, 544h, 54dh, 590h, 177h, 5b8h, 556h,
/*  A103-10 */ 17fh, 5eeh, 544h, 54dh, 590h, 177h, 0d1h, 285h, 423h, 1d3h,
/*  A135-1 */ 43ah,
/*  A139-1 */ 168h,
/*  A140-1 A141-1 */ 196h,
/*  A142-1 */ 19eh,
/*  A143-1 */ 187h,
/*  A144-3 */ 380h, 18eh, 4c9h,
/*  A145-3 */ 380h, 1f7h, 4c9h,
/*  A146-3 */ 380h, 1eeh, 4c9h,
/*  A147-1 */ 491h,
/*  A148-1 */ 0d9h,
/*  A149-1 */ 0e5h,
/*  A150-2 */ 0e5h, 162h,
/*  A153-1 */ 266h,
/*  A166-1 */ 74h,
/*  A167-2 */ 74h, 423h,
/*  A168-4 */ 74h, 423h, 4e9h, 491h,
/*  A169-4 */ 74h, 423h, 8h, 491h,
/*  A170-2 */ 74h, 491h,
/*  A171-3 */ 74h, 491h, 8ch,
/*  A97-1 */ 7eh,
/*  B31-14 */ 15ch, 307h, 17fh, 2e9h,
/*  B32-10 */ 10ah, 4f2h,
/*  B33-8 */ 136h, 0a0h, 460h, 0a0h, 0a0h, 444h, 98h, 48bh,
/*  B34-15 */ 122h, 2b7h, 2cbh,
/*  B35-12 */ 115h, 251h, 375h, 0a0h, 4f2h, 0a0h, 4f2h, 1a6h, 98h, 0b9h, 1e5h, 48bh,
/*  B29-26 */ 122h, 2b7h, 2cbh,
/*  B30-23 */ 115h, 251h, 375h, 474h, 0a0h, 4f2h, 4c9h, 0a0h, 4f2h, 0h, 4d1h, 325h,
	      285h, 499h, 311h, 177h, 1afh, 98h, 0c9h, 456h, 0b9h, 1c1h, 48bh,
/*  B0 B18 B48 B73 B94 B106 -11 */ 0eah, 2f3h, 3a1h,
/*  B1 B19 B49 B74 B95 B107 -8 */ 122h, 27bh, 409h, 325h, 271h, 3e1h, 311h, 48bh,
/*  B2 B20 B50 B75 B96 B108 -11 */ 10fh, 2c1h, 396h,
/*  B3 B21 B51 B76 B97 B109 -8 */ 115h, 27bh, 403h, 325h, 271h, 3dbh, 311h, 48bh,
/*  B4 B11 B22 B52 B77 B98 B110 -16 */ 11bh, 513h, 51dh,
/*  B5 B12 B23 B53 B78 B99 B111 -13 */ 128h, 527h, 17fh, 531h,
/*  B6 B13 B24 B54 B79 B100 B112 -9 */ 14eh, 53bh, 403h, 325h, 177h, 53bh, 3dbh, 311h, 48bh,
/*  B7 B14 B25 B55 B113 -16 */ 147h, 4f2h,
/*  B8 B15 B26 B56 B114 -14 */ 0f0h, 2f3h, 3a1h,
/*  B9 B16 B27 B57 B115 -11 */ 12fh, 4f2h,
/*  B10 B17 B28 B58 B116 -9 */ 155h, 53bh, 409h, 325h, 177h, 53bh, 3e1h, 311h, 48bh,
/*  B82 B103 -13 */ 0f0h, 2f3h, 3a1h,
/*  B83 B104 -10 */ 12fh, 27bh, 40fh, 2f3h, 271h, 17fh, 3edh, 2d5h, 4f2h, 48bh,
/*  B80 B101 -12 */ 147h, 325h, 3ach,
/*  B81 B102 -9*/ 155h, 53bh, 409h, 325h, 177h, 53bh, 3e1h, 311h, 48bh,
/*  B59 B64 B69 B71 B84 -7 */ 103h, 2adh,
/*  B60 B65 B70 B72 B85 -5 */ 0fch, 3d7h, 0c1h, 1b8h, 48bh,
/*  B89-8 */ 103h, 2adh,
/*  B90-6 */ 0fch, 41bh, 485h, 0c1h, 1cah, 48bh,
/*  B86-11 */ 15ch, 307h, 17fh, 2e9h,
/*  B87-7 */ 10ah, 4f2h,
/*  B88-5 */ 136h, 0a0h, 0c1h, 1b8h, 48bh,
/*  B91-17 */ 15ch, 307h, 17fh, 2e9h,
/*  B92-13 */ 10ah, 4f2h,
/*  B93-11 */ 136h, 285h, 41bh, 485h, 311h, 28fh, 485h, 325h, 0c1h, 1dch, 48bh,
/*  B61-16 */ 15ch, 307h, 17fh, 2e9h,
/*  B62-12 */ 10ah, 4f2h,
/*  B63-10 */ 136h, 28fh, 47fh, 325h, 285h, 47fh, 311h, 0c1h, 1d3h, 48bh,
/*  B66-16 */ 15ch, 307h, 17fh, 2e9h,
/*  B67-12 */ 10ah, 4f2h,
/*  B68-10 */ 136h, 285h, 485h, 311h, 28fh, 485h, 325h, 0c1h, 1d3h, 48bh,
/*  B45-13 */ 0f7h, 2fdh, 2dfh,
/*  B46-10 */ 10ah, 4f2h,
/*  B47-8 */ 136h, 28fh, 8ch, 325h, 285h, 8ch, 311h, 48bh,
/*  B42-14 */ 13bh, 513h, 51dh,
/*  B43-11 */ 15ch, 4f2h,
/*  B44-9 */ 141h, 53bh, 8ch, 325h, 177h, 53bh, 8ch, 311h, 48bh,
/*  B39-13 */ 0f7h, 2fdh, 2dfh,
/*  B40-10 */ 10ah, 4f2h,
/*  B41-8 */ 136h, 4c9h, 4d9h, 325h, 38bh, 4a1h, 311h, 48bh,
/*  B36-15 */ 13bh, 2fdh, 2dfh,
/*  B37-12 */ 141h, 4f2h,
/*  B38-10 */ 15ch, 4c9h, 4e1h, 2f3h, 38bh, 17fh, 4a9h, 2d5h, 4f2h, 48bh,
/*  B105-8 */ 5c0h, 55fh, 56ah, 0c1h, 574h, 0b9h, 57dh, 48bh,
/*  A108-2 */ 598h, 42bh,
/*  A38-1 */ 5a2h,
/*  A109-1 */ 3b7h,
/*  A110-1 */ 339h,
/*  A111-2 */ 0a0h, 0a8h,
/*  A113-1 */ 5c3h,
/*  A114-1 */ 32fh,
/*  A115-1 */ 361h,
/*  A116-1 */ 5cdh,
/*  A117-1 */ 5d6h,
/*  A118-2 */ 485h, 5dfh
),
	stack$origin(*) byte public data(14, '@STACK$ORIGIN ');

$list

sub$54BA: procedure public;

	emitSource: procedure;
		declare p(3) address, (s, t) address;

		call fread(.tx1File, .p, 6);
		if p(1) > 0 or p(2) = 0 then
			s = p(0);
		else
		do;
			s = p(2);
			p(2) = 0;
		end;
		do t = p(0) to s;
			call sub$5BD3;
			w812F = t;
			lineNo = p(1);
			depth = p(2);
			call getSourceLine;
		end;
	end;



	newStatementNo: procedure;
		call fread(.tx1File, .stmtNo, 2);
		if stmtNo = 0 then
			return;
		if DEBUG then
		do; 
			if rec8.len + 4 >= 1020 then
				call writeRec(.rec8.type, 1);
			call recAddWord(.rec8.type, 1, baseAddr);
			call recAddWord(.rec8.type, 1, stmtNo);
		end;
		if codeOn then
			call emitStatementNo;
	end;


	addrCheck: procedure(arg1w);
		declare arg1w address;
		if arg1w <> baseAddr then
			call sub$5E1B(0D8h);
	end;


	emitLocalLabel: procedure;
		declare localLabels based localLabels$p(1) address;

		call fread(.tx1File, .w96D7, 2);
		locLabStr(1) = '@';
		locLabStr(0) = num2Asc(w96D7, 0, 10, .locLabStr(2)) + 1;
		call addrCheck(localLabels(w96D7));
		call emitLabel;
	end;

	emitSymLabel: procedure;
		call fread(.tx1File, .curInfo$p, 2);
		curInfo$p = curInfo$p + botInfo;
		curSymbol$p = getSymbol;
		locLabStr(0) = cursym.name(0);
		call movmem(locLabStr(0), .cursym.name(1), .locLabStr(1));
		call addrCheck(getLinkVal);
		call emitLabel;
	end;

	emitSimpleError: procedure;
		call fread(.tx1File, .wa8125, 2);
		wa8125(1) = 0;
		wa8125(2) = stmtNo;
		call emitError;
	end;


	emitNearError: procedure;
		call fread(.tx1File, .wa8125, 4);
		wa8125(2) = stmtNo;
		call emitError;
	end;

	emitFullError: procedure;
		call fread(.tx1File, .wa8125, 6);
		call emitError;
	end;

	miscControl: procedure;
		declare pad byte, fname(19) byte;

		do case cfCode - 9dh;
			listOff = false;
			listOff = true;
			codeOn = PRINT;
			codeOn = false;
			if listing then
				call newPageNextChLst;
			do;
				call sub$5BD3;
				call tellF(.srcFil, .srcFileTable(srcFileIdx + 8));
				call backup(.srcFileTable(srcFileIdx + 8), olstch - ocurch);
				srcFileIdx = srcFileIdx + 10;
				call fread(.tx1File, .fname(13), 6);
				call fread(.tx1File, .fname(6), 7);
				call fread(.tx1File, .fname(0), 7);
				call movmem(16, .fname(1), .srcFileTable(srcFileIdx));
				call closeF(.srcFil);
				call initF(.srcFil, .('SOURCE'), .fname(1));
				call openF(.srcFil, 1);
				ocurch = olstch;
			end;
		end;
	end;

	setNewAddr: procedure;
		call fread(.tx1File, .curInfo$p, 2);
		call fread(.tx1File, .baseAddr, 2);
		curInfo$p = curInfo$p + botInfo;
		baseAddr = baseAddr + getLinkVal;
		call flushRecs;
	end;

/* sub$54BA */


	call fread(.tx1File, .cfCode, 1);
	if cfCode = 98h then
		call emitSource;
	else if cfCode = 86h then
		call fread(.tx1File, .stmtNo, 2);
	else if cfCode = 97h then
		call newStatementNo;
	else if cfCode = 88h or cfCode = 89h then
		call emitLocalLabel;
	else if cfCode = 8Ah then
		call emitSymLabel;
	else if cfCode = 0A4h then
		call setNewAddr;
	else if cfCode = 9Ah then
		call emitSimpleError;
	else if cfCode = 9Bh then
		call emitNearError;
	else if 9Dh <= cfCode and cfCode <= 0A2h then
		call miscControl;
	else if cfCode = 9Ch then
		bo812B = 0;
	else if cfCode = 0A3h then
		call emitFullError;
	else
		call sub$668B;
end;

end;
src/plm4b.plm
plm4b: DO;
$include(:f2:plm4b.ipx)

/* plm4a.plm */
declare	digits(*) byte data(' 123456789'),
	ErrStrings(*) byte data(
	0ACh, 'INVALID LABEL: UNDEFINED', 0,
	0C8h, 'LIMIT EXCEEDED: STATEMENT SIZE', 0,
	0C9h, 'INVALID DO CASE BLOCK, AT LEAST ONE CASE REQUIRED', 0,
	0CAh, 'LIMIT EXCEEDED: NUMBER OF ACTIVE CASES', 0,
	0CBh, 'LIMIT EXCEEDED: NESTING OF TYPED PROCEDURE CALLS', 0,
	0CCh, 'LIMIT EXCEEDED: NUMBER OF ACTIVE PROCEDURES AND DO CASE GROUPS', 0,
	0CDh, 'ILLEGAL NESTING OF BLOCKS, ENDS NOT BALANCED', 0,
	0CEh, 'LIMIT EXCEEDED: CODE SEGMENT SIZE', 0,
	0D1h, 'ILLEGAL INITIALIZATION OF MORE SPACE THAN DECLARED', 0,
	0D2h, 'ILLEGAL INITIALIZATION OF A BYTE TO A VALUE > 255', 0,
	0D6h, 'COMPILER ERROR: OPERAND CANNOT BE TRANSFORMED', 0,
	0D7h, 'COMPILER ERROR: EOF READ IN FINAL ASSEMBLY', 0,
	0D8h, 'COMPILER ERROR: BAD LABEL ADDRESS', 0,
	0D9h, 'ILLEGAL INITIALIZATION OF AN EXTERNAL VARIABLE', 0,
	0);

$list

flushRecs: procedure public;
	call writeRec(.rec8.type, 1);
	call writeRec(.rec6$4.type, 3);
	call writeRec(.rec22.type, 1);
	call writeRec(.rec24$1.type, 2);
	call writeRec(.rec24$2.type, 2);
	call writeRec(.rec24$3.type, 2);
	call writeRec(.rec20.type, 1);
	rec6$4.addr = baseAddr;
end;



addWrdDisp: procedure(str$p, arg2w) public;
	declare str$p address, arg2w address;
	declare str based str$p(1) byte;

	if arg2w <> 0 then
	do; 
		str(0) = str(0) + 1;
		if arg2w > 8000h then
		do;
			str(str(0)) = '-';
			arg2w = -arg2w;
		end;
		else
			str(str(0)) = '+';
		str(0) = str(0) + num2Asc(arg2w, 0, -16, .str(str(0) + 1));
	end;
end;


sub$5BD3: procedure public;
	if  not bo813B and listing then
	do;
		call setStartAndTabW(15, 4);
		if lineNo <> 0 then
			call lstLineNo;
		call tabLst(-7);
		if depth < 10 then
		do;
			call putLst(' ');
			call putLst(digits(depth));
		end;
		else
			call xnumLst(depth, 2, 10);
		if srcFileIdx <> 0 then
		do; 
			call tabLst(-11);
			call xwrnstrLst(.('='), 1);
			if srcFileIdx <> 10 then 
				call xnumLst(srcFileIdx / 10 - 1, 1, 10);
		end;
		if lstLineLen > 0 then
		do;
			call tabLst(-15);
			call xwrnstrLst(.lstLine, lstLineLen);
		end;

		call newLineLst;
		bo813C = true;
	end;
	bo813B = true;
	listing = not listOff and PRINT;
end;



emitStatementNo: procedure public;
	call sub$5BD3;
	call tabLst(-50);
	call xwrnstrLst(.('; STATEMENT # '), 14);
	call xnumLst(stmtNo, 0, 0Ah);
	call newLineLst;
end;


emitLabel: procedure public;
	if codeOn then
	do; 
		call sub$5BD3;
		call tabLst(-26);
		call xwrnstrLst(.locLabStr(1), locLabStr(0));
		call xwrnstrLst(.(':'), 1);
		call newLineLst;
	end;
end;


emitError: procedure public;
	declare (ErrOff, ErrLen) address;


	sub$5DB7: procedure;
		declare (p, q) address;

		q = 0;
		do while ErrStrings(q) <> 0;
			p = q;
			do while ErrStrings(q) <> 0;
				q = q + 1;
			end;
			if ErrStrings(p) = wa8125(0) then
			do;
				ErrOff = p + 1;
				ErrLen = q - ErrOff;
				return;
			end;
			q = q + 1;
		end;
		ErrLen = 0;
	end;


	programErrCnt = programErrCnt + 1;
	if PRINT then
	do;
		bo813B = bo813C;
		listing = true;
		call sub$5BD3;
		call xwrnstrLst(.('*** ERROR #'), 11);
		call xnumLst(wa8125(0), 0, 10);
		call xwrnstrLst(.(', '), 2);
		if wa8125(2) <> 0 then
		do;
			call xwrnstrLst(.('STATEMENT #'), 11);
			call xnumLst(wa8125(2), 0, 10);
			call xwrnstrLst(.(', '), 2);
		end;
		if wa8125(1) <> 0 then
		do; 
			call xwrnstrLst(.('NEAR '''), 6);
			curInfo$p = wa8125(1) + botInfo;
			curSymbol$p = getSymbol;
			if curSymbol$p <> 0 then
				call xwrnstrLst(.cursym.name(1), cursym.name(0));
			else
				call xputstr2cLst(.('<LONG CONSTANT>', 0), 0);
			call xwrnstrLst(.(''', '), 3);
		end;
		call sub$5DB7;
		call tabLst(2);
		if ErrLen = 0 then 
			call xwrnstrLst(.('UNKNOWN ERROR'), 13);
		else
			call xwrnstrLst(.ErrStrings(ErrOff), ErrLen);
		call newLineLst;
	end;
end;




sub$5E1B: procedure(arg1b) public;
	declare arg1b byte;
	fatalErrorCode, wa8125(0) = arg1b;
	wa8125(1) = 0;
	wa8125(2) = stmtNo;
	call emitError;
	goto errCont;
end;

sub$5E3E: procedure public;
	declare i byte;
	if codeOn then
	do; 
		if opByteCnt > 0 then
		do;
			call tabLst(-12);
			call xnumLst(baseAddr, -4, 10h);
			i = 0;
			call tabLst(-18);
			do while i < opByteCnt;
				call xnumLst(opBytes(i), -2, 10h);
				i = i + 1;
			end;
		end;
		call tabLst(-26);
		call setStartAndTabW(26, 8);
		call xwrnstrLst(.line, lineLen);
		call newLineLst;
	end;
end;




getSourceLine: procedure public;
	declare bA187 byte;

	getSourceCh: procedure byte;
		if ocurch = olstch then
		do;
			do while 1;
				call readf(.srcFil, .srcbuf, 640, .olstch);
				ocurch = 0;
				if olstch > 0 then
					goto break;
				if lstLineLen <> 0 then
					return lf;

				if srcFileIdx = 0 then
				do;
					if bA187 <> 0 then
						return lf;
					else
						call sub$5E1B(0D7h);
				end;

				bA187 = 0;
				call closeF(.srcFil);
				srcFileIdx = srcFileIdx - 10;
				call initF(.srcFil, .('SOURCE'), .srcFileTable(srcFileIdx));
				call openf(.srcFil, 1);
				call seekF(.srcFil, .srcFileTable(srcFileIdx + 8));
			end;
		break:	olstch = olstch - 1;
		end;
		else
			ocurch = ocurch + 1;
		return srcbuf(ocurch) and 7fh;
	end;



	lstLineLen = 0;
	bA187 = 0;

	do while 1;
		lstLine(lstLineLen) = getSourceCh;
		if lstLine(lstLineLen) = lf then
		do;
			bo813B = 0;
			bo813C = 0;
			return;
		end;
		else if lstLine(lstLineLen) = cr then
			bA187 = bA187 + 1;
		else if lstLine(lstLineLen) <> cr and lstLineLen < 80h  then
			lstLinelen = lstLineLen + 1;
	end;
end;

end;
src/plm4c.plm
plm4c: DO;
$include(:f2:plm4c.ipx)

declare ccBits(*) byte data(10h, 18h, 8, 0, 18h, 10h),
	ccCodes(*) byte data( 2, 'NC', 1, 'C ', 1, 'Z ', 2, 'NZ', 1, 'C ', 2, 'NC');


sub$5FE7: procedure(arg1w, arg2b) public;
	declare arg1w address, arg2b byte;
	declare p address, wA18D address,
		bA18F byte, bA190 byte;


	sub$603C: procedure;

		pstrcat2Line: procedure(str$p);
			declare str$p address;
			declare len based str$p byte;
			if str$p <> 0 then
			do;
				call movmem(len, str$p + 1, .line(lineLen));
				lineLen = lineLen + len;
			end;
		end;

		sub$6175: procedure;
			declare i byte, p address, j byte;

			j= ror(bA18F, 4) and 3;	
			bA190 = bA18F and 0fh;
			if bA190 < 4 then
			do;
				i= wValAry(bA190);
				p= sValAry(bA190);
			end;
			else if j= 0 then
			do;
				i= stkRegNo(bA190 - 4);
				p= .opcodes(stkRegIdx(bA190 - 4));
			end;
			else
			do;
				i= regNo(bA190 - 4);
				p= .opcodes(regIdx(bA190 - 4));
			end;

			do case j;
				i = rol(i, 4);
				i = rol(i, 3);
				;
			end;
			opBytes(0) = opBytes(0) or i;
			call pstrcat2Line(p);
		end;



		addWord: procedure;
			declare pw address,
				w based pw address;

			dstRec = b96D6;
			pw = .opBytes(opByteCnt);
			w = wValAry(bA190);
			opByteCnt = opByteCnt + 2;
			call pstrcat2Line(sValAry(bA190));
		end;



		addHelper: procedure;
			declare (pw, q) address,
				(i, j) byte;
			declare w based pw address;
			declare helpers based helpers$p(1) address;

			pw = .opBytes(opByteCnt);
			if bA190 = 1 then
				q = 69h;
			else
			do;
				i = b4566(b969D);
				j = b4495(b9692 + 11 * i);
				q = b42D6(shr(j, 2)) + (j and 3);
			end;
			helperStr(0) = num2Asc(q, -4, 10, .helperStr(3)) + 2;
			call pstrcat2Line(.helperStr);
			if standAlone then
			do;
				w = helpers(q);
				dstRec = 1;
			end;
			else
			do;
				w = 0;
				dstRec = 5;
				curExtId = helpers(q);
			end;
			opByteCnt = opByteCnt + 2;
		end;


		addSmallNum: procedure;
			declare i byte;
			
			wA18D = wA18D + 1;
			i = b4A78(wA18D);
			opBytes(opByteCnt) = i;
			opByteCnt = opByteCnt + 1;
			/* extend to word on opBytes if not 84h */
			if bA190 <> 0 then
			do;
				opBytes(opByteCnt) = 0;
				opByteCnt = opByteCnt + 1;
			end;
			lineLen = lineLen + num2Asc(i, 0, 10, .line(lineLen));
		end;



		addStackOrigin: procedure;
			dstRec = 3;
			opBytes(opByteCnt) = 0;
			opBytes(opByteCnt + 1) = 0;
			opByteCnt = opByteCnt + 2;
			call pstrcat2Line(.stack$origin);
		end;



		addByte: procedure;
			declare str$p address,
				str based str$p(1) byte;

			opBytes(opByteCnt) = wValAry(bA190);
			opByteCnt = opByteCnt + 1;
			if wValAry(bA190) > 255 then
			do;		/* reformat number to byte size */
				str$p = sValAry(bA190);
				str(0) = num2Asc(low(wValAry(bA190)), 0, -16, .str(1));
			end;
			call pstrcat2Line(sValAry(bA190));
		end;

		addPCRel: procedure;
			declare (pw, q) address,
				w based pw address;

			dstRec = 1;
			pw = .opBytes(opByteCnt);
			wA18D = wA18D + 1;
			q = b4A78(wA18D);
			if q > 127 then	/* sign extend */
				q = q or 0ff00h;
			w = baseAddr + q;
			opByteCnt = opByteCnt + 2;
			line(lineLen) = '$';
			lineLen = lineLen + 1;
			call addWrdDisp(.lineLen, q);
		end;




		addccCode: procedure;
			opBytes(0) = opBytes(0) or ccBits(b969C);
			call pstrcat2Line(.ccCodes(3 * b969C));
		end;


		emitHelperLabel: procedure;
			helperStr(0) = num2Asc(helperId, -4, 10, .helperStr(3)) + 3;
			call pstrcat2Line(.helperStr);
			helperId = helperId + 1;
		end;


		sub$64CF: procedure;
			declare i byte;
			do case bA190;
				i= b4566(b969D);
				i= b475E(b969D);
				i= b4774(b969D);
				i= b478A(b969D);
			end;
			opBytes(0) = b473D(i);
			opByteCnt = 1;
			call pstrcat2Line(.opcodes(b47A0(i)));
		end;


/* sub$603C */
		wA18D = w506F(arg1w);
		if b4A78(wA18D) = 0 then
			opByteCnt = 0;
		else
		do;
			opBytes(0) = b4A78(wA18D);
			opByteCnt = 1;
		end;

		dstRec = 0;
		lineLen = 0;

		do while 1;
			wA18D = wA18D + 1;
			bA18F = b4A78(wA18D);
			if bA18F < 80h then
			do;
				line(lineLen) = bA18F;
				lineLen = lineLen + 1;
			end;
			else if bA18F >= 0c0h then 
				call sub$6175;
			else
			do;
				bA190 = shr(bA18F,4) and 3;
				do case bA18F and 0fh;
					return;
					call pstrcat2Line(sValAry(bA190));
					call addWord;
					call addHelper;
					call addSmallNum;
					call addStackOrigin;
					call addByte;
					call addPCRel;
					call addccCode;
					call emitHelperLabel;
					call pstrcat2Line(w969E);
					call sub$64CF;
				end;
			end;
		end;
	end;




	sub$654F: procedure;
		declare p address, i byte;

		if opByteCnt = 0 or not OBJECT then
			return;
		if rec6$4.len + opByteCnt >= 1018 then
			call flushRecs;
		p = baseAddr + opByteCnt - 2;	
		do case dstRec;
			;
			do;
				if rec22.len + 2 >= 1018 then
					call flushRecs;
				call recAddWord(.rec22.type, 1, p);
			end;
			do;
				if rec24$1.len + 2 >= 1017 then
					call flushRecs;
				call recAddWord(.rec24$1.type, 2, p);
			end;
			do;
				if rec24$2.len + 2 >= 99 then
					call flushRecs;
				call recAddWord(.rec24$2.type, 2, p);
			end;
			do;
				if rec24$3.len + 2 >= 99 then
					call flushRecs;
				call recAddWord(.rec24$3.type, 2, p);
			end;
			do;
				if rec20.len + 4 >= 1018 then
					call flushRecs;
				call recAddWord(.rec20.type, 1, curExtId);
				call recAddWord(.rec20.type, 1, p);
			end;
		end;
		do i = 0 to opByteCnt - 1;
			call recAddByte(.rec6$4.type, 3, opBytes(i));
		end;
	end sub$654F;

/* sub$5FE7 */
	do while arg2b > 0;
		call sub$603C;
		call sub$654F;
		call sub$5E3E;
		arg1w = arg1w + 1;
		arg2b = arg2b - 1;
		p = baseAddr + opByteCnt;
		if baseAddr > p then
		do;
			wa8125(2), wa8125(1) = 0;
			wa8125(0) = 0CEh;
			call emitError;
		end; 
		baseAddr = p;
	end;
end;





sub$668B: procedure public;
	declare i byte;
	declare bA1AB byte;

	sub$66F1: procedure;

		if cfCode >= 0AEh then
		do; 
			i = cfCode - 0AEh;
			cfCode = b4602(i);
			i = b4444(i);
			b9692 = b4431(i);
		end;
	end;


	sub$6720: procedure;
		declare i byte;


		sub$67AD: procedure(arg1b, arg2b);
			declare (arg1b, arg2b) byte;


			sub$685C: procedure(arg1b, arg2b, arg3b);
				declare (arg1b, arg2b, arg3b) byte;
				wValAry(arg1b) = arg2b;
				sValAry(arg1b) = .opcodes(arg3b);
			end;



			rdBVal: procedure;
				call fread(.tx1File, .wValAry(arg2b), 1);
				wValAry(arg2b) = wValAry(arg2b) and 0ffh;
				b96B0 = num2Asc(wValAry(arg2b), 0, -16, .b96B1);
				sValAry(arg2b) = .b96B0;
			end;



			rdWVal: procedure;
				call fread(.tx1File, .wValAry(arg2b), 2);
				b96B0 = num2Asc(wValAry(arg2b), 0, -16, .b96B1);
				sValAry(arg2b) = .b96B0;
			end;

			rdLocLab: procedure;
				declare localLabels based localLabels$p(1) address;

				call fread(.tx1File, .w96D7, 2);
				wValAry(arg2b) = localLabels(w96D7);
				locLabStr(1) = '@';
				locLabStr(0) = num2Asc(w96D7, 0, 10, .locLabStr(2)) + 1;
				sValAry(arg2b) = .locLabStr(0);
				b96D6 = 1;
			end;



			sub$6982: procedure;
				declare s structure(i byte, p address);

				call fread(.tx1File, .s, 3);
				w969E = .commentStr;
				commentStr(0) = num2Asc(s.i, 0, 10, .commentStr(3)) + 2;
				wValAry(arg2b) = s.p;
				b96B0 = num2Asc(s.p, 0, 10, .b96B1);
				sValAry(arg2b) = .b96B0;
			end;


			sub$69E1: procedure(disp);
				declare disp address;
				call fread(.tx1File, .curInfo$p, 2);
				curInfo$p = curInfo$p + botInfo;
				wValAry(arg2b) = getLinkVal + disp;
				curSymbol$p = getSymbol;
				if curSymbol$p <> 0 then
				do;
					b96B0 = cursym.name(0);
					call movmem(b96B0, .cursym.name(1), .b96B1);
				end;
				else
				do;
					b96B0 = 1;
					b96B1(0) = '$';
					disp = wValAry(arg2b) - baseAddr;
				end;
				sValAry(arg2b) =  .b96B0;
				call addWrdDisp(sValAry(arg2b), disp);
				if testInfoFlag(F$EXTERNAL) then
				do;
					b96D6 = 5;
					curExtId = getExternId;
				end;
				else if getType = PROC$T then
					b96D6 = 1;
				else if getType = LABEL$T then 
					b96D6 = 1;
				else if testInfoFlag(F$MEMBER) then
					;
				else if testInfoFlag(F$BASED) then
					;
				else if testInfoFlag(F$DATA) then
					b96D6 = 1;
				else if testInfoFlag(F$MEMORY) then
					b96D6 = 4;
				else if not testInfoFlag(F$ABSOLUTE) then
					b96D6 = 2;
			end;




			sub$6B0E: procedure;
				declare p(3) address;

				call fread(.tx1File, .p, 6);
				curInfo$p = p(1) + botInfo;
				wValAry(arg2b) = p(2);
				b96B0 = num2Asc(p(2), 0, -16, .b96B1);
				sValAry(arg2b) = .b96B0;
				w969E = .commentStr;
				curSymbol$p = getSymbol;
				commentStr(0) = cursym.name(0) + 2;
				call movmem(cursym.name(0), .cursym.name(1), .commentStr(3));
				call addWrdDisp(w969E, p(0));
			end;



			sub$6B9B: procedure;
				declare wA1BD address;
				do case arg1b - 8;
					call rdBVal;
					call rdWVal;
					call sub$6982;
					do;
						call fread(.tx1File, .wA1BD, 2);
						call sub$69E1(wA1BD);
					end;
					call sub$6B0E;
				end;
			end;


		/* sub$67AD */

			do case bA1AB;
				return;
				do;
					call sub$685C(arg2b, regNo(arg1b), regIdx(arg1b));
					call sub$685C(arg2b + 2, regNo(4 + arg1b), regIdx(4 + arg1b));
				end;
				call sub$685C(arg2b, stkRegNo(arg1b), stkRegIdx(arg1b));
				call sub$6B9B;
				call rdBVal;
				call rdWVal;
				call rdLocLab;
				call sub$69E1(0);
			end;
		end sub$67AD;


/* sub$6720 */

		b96D6 = 0;
		if rol(b4332(cfCode), 1) then
		do;
			call fread(.tx1File, .b969C, 1);
			b969D = b457C(b969C);
		end;
		w969E = 0;
		bA1AB = ror(b4332(cfCode), 4) and 7;
		if bA1AB <> 0 then
		do;
			if bA1AB <= 3 then
				call fread(.tx1File, .i, 1);
			call sub$67AD(ror(i, 4) and 0fh, 0);
			bA1AB = ror(b4332(cfCode), 1) and 7;
			call sub$67AD(i and 0fh, 1);
		end;
	end sub$6720;

/* sub$668B */

	call sub$66F1;
	call sub$6720;
	if cfCode = 87h then
	do; 
		baseAddr = getLinkVal;
		if DEBUG then
		do;
			rec8.len = rec8.len - 4;
			call recAddWord(.rec8.type, 1, baseAddr);
			rec8.len = rec8.len + 2;
		end;
		call flushRecs;
	end;
	call sub$5BD3;
	call sub$5FE7(w47C1(cfCode) and 0fffh, shr(w47C1(cfCode), 12));
end;


end;
src/plm5a.plm
plm5a: DO;
$include(:f2:plm5a.ipx)

sub$557A: procedure;
	declare i byte, line(30) byte, actual address, j byte;

	do i = 0 to 25;
		debugSwitches(i) = false;
	end;
	if not debugFlag then
		return;

	call printStr(.('ENTER DEBUG SWITCHES', cr, lf, '*'), 23);
	call readF(.conFile, .line, 30, .actual);
	if actual <> 0 then
	do;
		actual = actual - 1;
		do i = 0 to actual;
			j = line(i);
			if 'A' <= j and j <= 'Z' then
				debugSwitches(j - 'A') = true;	
		end;
	end;
	call printStr(.('BEGINNING PHASE EXECUTION', cr, lf), 27);
end;


sub$561E: procedure(arg1b) byte;
	declare arg1b byte;
	if debugSwitches(arg1b - 'A') then
		return true;
	else
		return false;
end;
end;
src/plm6a.plm
plm6a: DO;
$include(:f2:plm6a.ipx)

declare b4222(*) byte data(
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0Eh, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 6, 1, 0, 0, 0,
	0, 3, 0, 9, 9, 8, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 9, 0Bh, 0Bh, 81h,
	99h, 91h, 91h, 91h, 81h, 89h, 89h, 89h, 8Ah, 80h, 80h,
	80h, 80h, 80h, 80h, 90h, 0A1h, 0A3h, 0A0h, 0A1h, 0A2h,
	0B0h, 0A0h, 0A0h, 0A0h, 0A0h, 0A0h, 0A3h, 0A3h, 0,
	0, 0, 0, 0, 0, 0, 0, 41h, 41h, 41h, 40h, 0, 0, 0, 0,
	0, 0C0h, 0C0h, 0C0h, 0C0h, 0C0h, 0D8h, 41h, 41h, 41h,
	0C0h);


sub$42E7: procedure public;
	declare cfCode byte, itemArgs(4) address;

	sub$4396: procedure;
		declare i address;
		if itemArgs(1) > 0 or itemArgs(2) = 0 then
			itemArgs(3) = itemArgs(0);
		else
		do;
			itemArgs(3) = itemArgs(2);
			itemArgs(2) = 0;
		end;
		do i = itemArgs(0) to itemArgs(3);
			call sub$6550;
			w7AE5 = i;
			lineNo = itemArgs(1);
			w7AE9 = itemArgs(2);
			call getSourceLine;
		end;
	end;

	sub$4400: procedure;
		ERRNum = itemArgs(0);
		w7AE0 = 0;
		STMTNum = w7AEB;
		call emitError;
	end;


	sub$4416: procedure;
		ERRNum = itemArgs(0);
		w7AE0 = itemArgs(1);
		STMTNum = w7AEB;
		call emitError;
	end;


	sub$442C: procedure;
		ERRNum = itemArgs(0);
		w7AE0 = itemArgs(1);
		STMTNum = itemArgs(2);
		call emitError;
	end;


	sub$4442: procedure;
		declare name(19) byte;

		do case cfCode - 9dh;
			listOff = false;
			listOff = true;
			codeOn = PRINT;
			codeOn = false;
			if listing then
				call newPageNextChLst;
			do;
				call sub$6550;
				call tellF(.srcFil, .srcFileTable(srcFileIdx + 8));
				call backup(.srcFileTable(srcFileIdx + 8), offLastCh - offCurCh);
				srcFileIdx = srcFileIdx + 10;
				call fread(.tx2File, .name(13), 6);	/* read in name of include file */
				call fread(.tx2File, .name(6), 7);
				call fread(.tx2File, .name(0), 7);	/* overwrites the type byte */
				call movmem(16, .name(1), .srcFileTable(srcFileIdx));
				call closeF(.srcFil);
				call initF(.srcFil, .('SOURCE'), .name(1));
				call openF(.srcFil, 1);
				offCurCh = offLastCh;	/* force read next time	*/
			end;
		end;
	end;


/* sub$42E7 */
	itemArgs(0), itemArgs(1), itemArgs(2) = 0;
	call fread(.tx2File, .cfCode, 1);
	if cfCode <> 0a2h then
		call fread(.tx2File, .itemArgs, shl(b4222(cfCode) and 3,1));
	if cfCode = 98h then
		call sub$4396;
	else if cfCode = 97h then
		w7AEB = itemArgs(0);
	else if cfCode = 9Ah then
		call sub$4400;
	else if cfCode = 9Bh then
		call sub$4416;
	else if cfCode = 0A3h then
		call sub$442C;
	else if 9Dh <= cfCode and cfCode <= 0A2h then
		call sub$4442;
	else if cfCode = 9Ch then
		b7AE4 = 0;
end;
end;
src/plm6b.plm
plm6b: DO;
$include(:f2:plm6b.ipx)

declare digits(*) byte data(' 123456789');

declare ERRStrings(*) byte data(
	1h, 'INVALID PL/M-80 CHARACTER',0,
	2h, 'UNPRINTABLE ASCII CHARACTER',0,
	3h, 'IDENTIFIER, STRING, OR NUMBER TOO LONG, TRUNCATED',0,
	4h, 'ILLEGAL NUMERIC CONSTANT TYPE',0,
	5h, 'INVALID CHARACTER IN NUMERIC CONSTANT',0,
	6h, 'ILLEGAL MACRO REFERENCE, RECURSIVE EXPANSION',0,
	7h, 'LIMIT EXCEEDED: MACROS NESTED TOO DEEPLY',0,
	8h, 'INVALID CONTROL FORMAT',0,
	9h, 'INVALID CONTROL',0,
	0Ah, 'ILLEGAL USE OF PRIMARY CONTROL AFTER NON-CONTROL LINE',0,
	0Bh, 'MISSING CONTROL PARAMETER',0,
	0Ch, 'INVALID CONTROL PARAMETER',0,
	0Dh, 'LIMIT EXCEEDED: INCLUDE NESTING',0,
	0Eh, 'INVALID CONTROL FORMAT, INCLUDE NOT LAST CONTROL',0,
	0Fh, 'MISSING INCLUDE CONTROL PARAMETER',0,
	10h, 'ILLEGAL PRINT CONTROL',0,
	11h, 'INVALID PATH-NAME',0,
	12h, 'INVALID MULTIPLE LABELS AS MODULE NAMES',0,
	13h, 'INVALID LABEL IN MODULE WITHOUT MAIN PROGRAM',0,
	14h, 'MISMATCHED IDENTIFIER AT END OF BLOCK',0,
	15h, 'MISSING PROCEDURE NAME',0,
	16h, 'INVALID MULTIPLE LABELS AS PROCEDURE NAMES',0,
	17h, 'INVALID LABELLED END IN EXTERNAL PROCEDURE',0,
	18h, 'INVALID STATEMENT IN EXTERNAL PROCEDURE',0,
	19h, 'UNDECLARED PARAMETER',0,
	1Ah, 'INVALID DECLARATION, STATEMENT OUT OF PLACE',0,
	1Bh, 'LIMIT EXCEEDED: NUMBER OF DO BLOCKS',0,
	1Ch, 'MISSING ''THEN''',0,
	1Dh, 'ILLEGAL STATEMENT',0,
	1Eh, 'LIMIT EXCEEDED: NUMBER OF LABELS ON STATEMENT',0,
	1Fh, 'LIMIT EXCEEDED: PROGRAM TOO COMPLEX',0,
	20h, 'INVALID SYNTAX, TEXT IGNORED UNTIL '';''',0,
	21h, 'DUPLICATE LABEL DECLARATION',0,
	22h, 'DUPLICATE PROCEDURE DECLARATION',0,
	23h, 'LIMIT EXCEEDED: NUMBER OF PROCEDURES',0,
	24h, 'MISSING PARAMETER',0,
	25h, 'MISSING '')'' AT END OF PARAMETER LIST',0,
	26h, 'DUPLICATE PARAMETER NAME',0,
	27h, 'INVALID ATTRIBUTE OR INITIALIZATION, NOT AT MODULE LEVEL',0,
	28h, 'DUPLICATE ATTRIBUTE',0,
	29h, 'CONFLICTING ATTRIBUTE',0,
	2Ah, 'INVALID INTERRUPT VALUE',0,
	2Bh, 'MISSING INTERRUPT VALUE',0,
	2Ch, 'ILLEGAL ATTRIBUTE, ''INTERRUPT'' WITH PARAMETERS',0,
	2Dh, 'ILLEGAL ATTRIBUTE, ''INTERRUPT'' WITH TYPED PROCEDURE',0,
	2Eh, 'ILLEGAL USE OF LABEL',0,
	2Fh, 'MISSING '')'' AT END OF FACTORED DECLARATION',0,
	30h, 'ILLEGAL DECLARATION STATEMENT SYNTAX',0,
	31h, 'LIMIT EXCEEDED: NUMBER OF ITEMS IN FACTORED DECLARE',0,
	32h, 'INVALID ATTRIBUTES FOR BASE',0,
	33h, 'INVALID BASE, SUBSCRIPTING ILLEGAL',0,
	34h, 'INVALID BASE, MEMBER OF BASED STRUCTURE OR ARRAY OF STRUCTURES',0,
	35h, 'INVALID STRUCTURE MEMBER IN BASE',0,
	36h, 'UNDECLARED BASE',0,
	37h, 'UNDECLARED STRUCTURE MEMBER IN BASE',0,
	38h, 'INVALID MACRO TEXT, NOT A STRING CONSTANT',0,
	39h, 'INVALID DIMENSION, ZERO ILLEGAL',0,
	3Ah, 'INVALID STAR DIMENSION IN FACTORED DECLARATION',0,
	3Bh, 'ILLEGAL DIMENSION ATTRIBUTE',0,
	3Ch, 'MISSING '')'' AT END OF DIMENSION',0,
	3Dh, 'MISSING TYPE',0,
	3Eh, 'INVALID STAR DIMENSION WITH ''STRUCTURE'' OR ''EXTERNAL''',0,
	3Fh, 'INVALID DIMENSION WITH THIS ATTRIBUTE',0,
	40h, 'MISSING STRUCTURE MEMBERS',0,
	41h, 'MISSING '')'' AT END OF STRUCTURE MEMBER LIST',0,
	42h, 'INVALID STRUCTURE MEMBER, NOT AN IDENTIFIER',0,
	43h, 'DUPLICATE STRUCTURE MEMBER NAME',0,
	44h, 'LIMIT EXCEEDED: NUMBER OF STRUCTURE MEMBERS',0,
	45h, 'INVALID STAR DIMENSION WITH STRUCTURE MEMBER',0,
	46h, 'INVALID MEMBER TYPE, ''STRUCTURE'' ILLEGAL',0,
	47h, 'INVALID MEMBER TYPE, ''LABEL'' ILLEGAL',0,
	48h, 'MISSING TYPE FOR STRUCTURE MEMBER',0,
	49h, 'INVALID ATTRIBUTE OR INITIALIZATION, NOT AT MODULE LEVEL',0,
	4Ah, 'INVALID STAR DIMENSION, NOT WITH ''DATA'' OR ''INITIAL''',0,
	4Bh, 'MISSING ARGUMENT OF ''AT'', ''DATA'', OR ''INITIAL''',0,
	4Ch, 'CONFLICTING ATTRIBUTE WITH PARAMETER',0,
	4Dh, 'INVALID PARAMETER DECLARATION, BASE ILLEGAL',0,
	4Eh, 'DUPLICATE DECLARATION',0,
	4Fh, 'ILLEGAL PARAMETER TYPE, NOT BYTE OR ADDRESS',0,
	50h, 'INVALID DECLARATION, LABEL MAY NOT BE BASED',0,
	51h, 'CONFLICTING ATTRIBUTE WITH ''BASE''',0,
	52h, 'INVALID SYNTAX, MISMATCHED ''(''',0,
	53h, 'LIMIT EXCEEDED: DYNAMIC STORAGE',0,
	54h, 'LIMIT EXCEEDED: BLOCK NESTING',0,
	55h, 'LONG STRING ASSUMED CLOSED AT NEXT SEMICOLON OR QUOTE',0,
	56h, 'LIMIT EXCEEDED: SOURCE LINE LENGTH',0,
	57h, 'MISSING ''END'', END-OF-FILE ENCOUNTERED',0,
	58h, 'INVALID PROCEDURE NESTING, ILLEGAL IN REENTRANT PROCEDURE',0,
	59h, 'MISSING ''DO'' FOR MODULE',0,
	5Ah, 'MISSING NAME FOR MODULE',0,
	5Bh, 'ILLEGAL PAGELENGTH CONTROL VALUE',0,
	5Ch, 'ILLEGAL PAGEWIDTH CONTROL VALUE',0,
	5Dh, 'MISSING ''DO'' FOR ''END'', ''END'' IGNORED',0,
	5Eh, 'ILLEGAL CONSTANT, VALUE > 65535',0,
	5Fh, 'ILLEGAL RESPECIFICATION OF PRIMARY CONTROL IGNORED',0,
	60h, 'COMPILER ERROR: SCOPE STACK UNDERFLOW',0,
	61h, 'COMPILER ERROR: PARSE STACK UNDERFLOW',0,
	62h, 'INCLUDE FILE IS NOT A DISKETTE FILE',0,
	/* 63h */
	64h, 'INVALID STRING CONSTANT IN EXPRESSION',0,
	65h, 'INVALID ITEM FOLLOWS DOT OPERATOR',0,
	66h, 'MISSING PRIMARY OPERAND',0,
	67h, 'MISSING '')'' AT END OF SUBEXPRESSION',0,
	68h, 'ILLEGAL PROCEDURE INVOCATION WITH DOT OPERATOR',0,
	69h, 'UNDECLARED IDENTIFIER',0,
	6Ah, 'INVALID INPUT/OUTPUT PORT NUMBER',0,
	6Bh, 'ILLEGAL INPUT/OUTPUT PORT NUMBER, NOT NUMERIC CONSTANT',0,
	6Ch, 'MISSING '')'' AFTER INPUT/OUTPUT PORT NUMBER',0,
	6Dh, 'MISSING INPUT/OUTPUT PORT NUMBER',0,
	6Eh, 'INVALID LEFT OPERAND OF QUALIFICATION, NOT A STRUCTURE',0,
	6Fh, 'INVALID RIGHT OPERAND OF QUALIFICATION, NOT IDENTIFIER',0,
	70h, 'UNDECLARED STRUCTURE MEMBER',0,
	71h, 'MISSING '')'' AT END OF ARGUMENT LIST',0,
	72h, 'INVALID SUBSCRIPT, MULTIPLE SUBSCRIPTS ILLEGAL',0,
	73h, 'MISSING '')'' AT END OF SUBSCRIPT',0,
	74h, 'MISSING ''='' IN ASSIGNMENT STATEMENT',0,
	75h, 'MISSING PROCEDURE NAME IN CALL STATEMENT',0,
	76h, 'INVALID INDIRECT CALL, IDENTIFIER NOT AN ADDRESS SCALAR',0,
	77h, 'LIMIT EXCEEDED: PROGRAM TOO COMPLEX',0,
	78h, 'LIMIT EXCEEDED: EXPRESSION TOO COMPLEX',0,
	79h, 'LIMIT EXCEEDED: EXPRESSION TOO COMPLEX',0,
	7Ah, 'LIMIT EXCEEDED: PROGRAM TOO COMPLEX',0,
	7Bh, 'INVALID DOT OPERAND, BUILT-IN PROCEDURE ILLEGAL',0,
	7Ch, 'MISSING ARGUMENTS FOR BUILT-IN PROCEDURE',0,
	7Dh, 'ILLEGAL ARGUMENT FOR BUILT-IN PROCEDURE',0,
	7Eh, 'MISSING '')'' AFTER BUILT-IN PROCEDURE ARGUMENT LIST',0,
	7Fh, 'INVALID SUBSCRIPT ON NON-ARRAY',0,
	80h, 'INVALID LEFT-HAND OPERAND OF ASSIGNMENT',0,
	81h, 'ILLEGAL ''CALL'' WITH TYPED PROCEDURE',0,
	82h, 'ILLEGAL REFERENCE TO OUTPUT FUNCTION',0,
	83h, 'ILLEGAL REFERENCE TO UNTYPED PROCEDURE',0,
	84h, 'ILLEGAL USE OF LABEL',0,
	85h, 'ILLEGAL REFERENCE TO UNSUBSCRIPTED ARRAY',0,
	86h, 'ILLEGAL REFERENCE TO UNSUBSCRIPTED MEMBER ARRAY',0,
	87h, 'ILLEGAL REFERENCE TO AN UNQUALIFIED STRUCTURE',0,
	88h, 'INVALID RETURN FOR UNTYPED PROCEDURE, VALUE ILLEGAL',0,
	89h, 'MISSING VALUE IN RETURN FOR TYPED PROCEDURE',0,
	8Ah, 'MISSING INDEX VARIABLE',0,
	8Bh, 'INVALID INDEX VARIABLE TYPE, NOT BYTE OR ADDRESS',0,
	8Ch, 'MISSING ''='' FOLLOWING INDEX VARIABLE',0,
	8Dh, 'MISSING ''TO'' CLAUSE',0,
	8Eh, 'MISSING IDENTIFIER FOLLOWING GOTO',0,
	8Fh, 'INVALID REFERENCE FOLLOWING GOTO, NOT A LABEL',0,
	90h, 'INVALID GOTO LABEL, NOT AT LOCAL OR MODULE LEVEL',0,
	91h, 'MISSING ''TO'' FOLLOWING ''GO''',0,
	92h, 'MISSING '')'' AFTER ''AT'' RESTRICTED EXPRESSION',0,
	93h, 'MISSING IDENTIFIER FOLLOWING DOT OPERATOR',0,
	94h, 'INVALID QUALIFICATION IN RESTRICTED REFERENCE',0,
	95h, 'INVALID SUBSCRIPTING IN RESTRICTED REFERENCE',0,
	96h, 'MISSING '')'' AT END OF RESTRICTED SUBSCRIPT',0,
	97h, 'INVALID OPERAND IN RESTRICTED EXPRESSION',0,
	98h, 'MISSING '')'' AFTER CONSTANT LIST',0,
	99h, 'INVALID NUMBER OF ARGUMENTS IN CALL, TOO MANY',0,
	9Ah, 'INVALID NUMBER OF ARGUMENTS IN CALL, TOO FEW',0,
	9Bh, 'INVALID RETURN IN MAIN PROGRAM',0,
	9Ch, 'MISSING RETURN STATEMENT IN TYPED PROCEDURE',0,
	9Dh, 'INVALID ARGUMENT, ARRAY REQUIRED FOR LENGTH OR LAST',0,
	9Eh, 'INVALID DOT OPERAND, LABEL ILLEGAL',0,
	9Fh, 'COMPILER ERROR: PARSE STACK UNDERFLOW',0,
	0A0h, 'COMPILER ERROR: OPERAND STACK UNDERFLOW',0,
	0A1h, 'COMPILER ERROR: ILLEGAL OPERAND STACK EXCHANGE',0,
	0A2h, 'COMPILER ERROR: OPERATOR STACK UNDERFLOW',0,
	0A3h, 'COMPILER ERROR: GENERATION FAILURE',0,
	0A4h, 'COMPILER ERROR: SCOPE STACK OVERFLOW',0,
	0A5h, 'COMPILER ERROR: SCOPE STACK UNDERFLOW',0,
	0A6h, 'COMPILER ERROR: CONTROL STACK OVERFLOW',0,
	0A7h, 'COMPILER ERROR: CONTROL STACK UNDERFLOW',0,
	0A8h, 'COMPILER ERROR: BRANCH MISSING IN ''IF'' STATEMENT',0,
	0A9h, 'ILLEGAL FORWARD CALL',0,
	0AAh, 'ILLEGAL RECURSIVE CALL',0,
	0ABh, 'INVALID USE OF DELIMITER OR RESERVED WORD IN EXPRESSION',0,
	0ACh, 'INVALID LABEL: UNDEFINED',0,
	0ADh, 'INVALID LEFT SIDE OF ASSIGNMENT: VARIABLE DECLARED WITH DATA ATTRIBUTE',0,
	0AEh, 'INVALID NULL PROCEDURE',0,
	/* xAF */
	0B0h, 'INVALID INTVECTOR INTERVAL VALUE',0,
	0B1h, 'INVALID INTVECTOR LOCATION VALUE',0,
	0B2h, 'INVALID ''AT'' RESTRICTED REFERENCE, EXTERNAL ATTRIBUTE CONFLICTS WITH PUBLIC ATTRIBUTE',0,
	0B3h, 'OUTER ''IF'' MAY NOT HAVE AN ''ELSE'' PART',0,
	0B4h, 'MISSING OR INVALID CONDITIONAL COMPILATION PARAMETER',0,
	0B5h, 'MISSING OR INVALID CONDITIONAL COMPILATION CONSTANT',0,
	0B6h, 'MISPLACED ELSE OR ELSEIF OPTION',0,
	0B7h, 'MISPLACED ENDIF OPTION',0,
	0B8h, 'CONDITIONAL COMPILATION PARAMETER NAME TOO LONG',0,
	0B9h, 'MISSING OPERATOR IN CONDITIONAL COMPILATION EXPRESSION',0,
	0BAh, 'INVALID CONDITIONAL COMPILATION CONSTANT, TOO LARGE',0,
	0BBh, 'LIMIT EXCEEDED: NUMBER OF SAVE LEVELS > 5',0,
	0BCh, 'MISPLACED RESTORE OPTION',0,
	0BDh, 'NULL STRING NOT ALLOWED',0,
	/* 0BEh, 0BFh, 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0c5h, 0c7h */
	0C8h, 'LIMIT EXCEEDED: STATEMENT SIZE',0,
	0C9h, 'INVALID DO CASE BLOCK, AT LEAST ONE CASE REQUIRED',0,
	0CAh, 'LIMIT EXCEEDED: NUMBER OF ACTIVE CASES',0,
	0CBh, 'LIMIT EXCEEDED: NESTING OF TYPED PROCEDURE CALLS',0,
	0CCh, 'LIMIT EXCEEDED: NUMBER OF ACTIVE PROCEDURES AND DO CASE GROUPS',0,
	0CDh, 'ILLEGAL NESTING OF BLOCKS, ENDS NOT BALANCED',0,
	0CEh, 'LIMIT EXCEEDED: CODE SEGMENT SIZE',0,
	0CFh, 'LIMIT EXCEEDED: SEGMENT SIZE',0,
	0D0h, 'LIMIT EXCEEDED: STRUCTURE SIZE',0,
	0D1h, 'ILLEGAL INITIALIZATION OF MORE SPACE THAN DECLARED',0,
	0D2h, 'ILLEGAL INITIALIZATION OF A BYTE TO A VALUE > 255',0,
	0D3h, 'INVALID IDENTIFIER IN ''AT'' RESTRICTED REFERENCE',0,
	0D4h, 'INVALID RESTRICTED REFERENCE IN ''AT'', BASE ILLEGAL',0,
	0D5h, 'UNDEFINED RESTRICTED REFERENCE IN ''AT''',0,
	0D6h, 'COMPILER ERROR: OPERAND CANNOT BE TRANSFORMED',0,
	0D7h, 'COMPILER ERROR: EOF READ IN FINAL ASSEMBLY',0,
	0D8h, 'COMPILER ERROR: BAD LABEL ADDRESS',0,
	0D9h, 'ILLEGAL INITIALIZATION OF AN EXTERNAL VARIABLE',0,
	0DAh, 'ILLEGAL SUCCESSIVE USES OF RELATIONAL OPERATORS',0,
	0DBh, 'LIMIT EXCEEDED: NUMBER OF EXTERNALS > 255',0,
	0);

$list
sub$6550: procedure public;
	if not b7AF1 and listing then
	do;
		call setStartAndTabW(15, 4);
		if lineNo <> 0 then
			call lstLineNo;
		call tabLst(-7);
		if w7AE9 < 10 then
		do;
			call putLst(' ');
			call putLst(digits(w7AE9));
		end;
		else
			call xnumLst(w7AE9, 2, 10);
		if srcFileIdx <> 0 then
		do;
			call tabLst(-11);
			call xwrnstrLst(.('='), 1);
			if srcFileIdx <> 10 then
				call xnumLst(srcFileIdx / 10 - 1, 1, 10);
		end;
		if lstLineLen > 0 then
		do;
			call tabLst(-15);
			call xwrnstrLst(.lstbuf, lstLineLen);
		end;
		call newLineLst;
		b7AF2 = true;
	end;
	b7AF1 = true;
	listing = not listOff and PRINT;
end;


emitError: procedure public;
	declare (ErrOff, ErrLen) address;

	findErrStr: procedure;
		declare (i, j) address;
		j = 0;
		do while ERRStrings(j) <> 0;
			i = j;
			do while ERRStrings(j) <> 0;
				j = j + 1;
			end;
			if ERRStrings(i) = ERRNum then
			do;
				ErrOff = i + 1;
				Errlen = j - ErrOff;
				return;
			end;
			j = j + 1;
		end;
		Errlen = 0;
	end;

	programErrCnt = programErrCnt + 1;
	if PRINT then
	do;
		b7AF1 = b7AF2;
		listing = true;
		call sub$6550;
		call xwrnstrLst(.('*** ERROR #'), 11);
		call xnumLst(ERRNum, 0, 10);
		call xwrnstrLst(.(', '), 2);
		if STMTNum <> 0 then
		do;
			call xwrnstrLst(.('STATEMENT #'), 11);
			call xnumLst(STMTNum, 0, 10);
			call xwrnstrLst(.(', '), 2);
		end;
		if w7AE0 <> 0 then
		do;
			call xwrnstrLst(.('NEAR '''), 6);
			curInfo$p = w7AE0 + botInfo;
			curSymbol$p = getSymbol;
			if curSymbol$p <> 0 then
				call xwrnstrLst(.cursym.name(1), cursym.name(0));
			else
				call xputstr2cLst(.('<LONG CONSTANT>', 0), 0);
			call xwrnstrLst(.(''', '), 3);
		end;
		call findErrStr;
		call tabLst(2);
		if ErrLen = 0 then
			call xwrnstrLst(.('UNKNOWN ERROR'), 13);
		else
			call xwrnstrLst(.ErrStrings(ErrOff), ErrLen);
		call newLineLst;
	end;
end;


fatalError: procedure(arg1b) public;
	declare arg1b byte;
	fatalErrorCode, ERRNum = arg1b;
	w7AE0 = 0;
	STMTNum = w7AEB;
	call emitError;
	goto errCont;
end;

getSourceLine: procedure public;
	declare crCnt byte;

	getSourceCh: procedure byte;
		if offCurCh = offLastCh then
		do;
			do while 1;
				call readF(.srcFil, .srcbuf, 1280, .offLastCh);
				offCurCh = 0;
				if offLastCh > 0 then
					goto break;		/* there are more chars */
				if lstLineLen <> 0 then		/* we already have a part line */
					return lf;

				if srcFileIdx = 0 then		/* top level file */
				do;
					if crCnt <> 0 then	/* allow file to finish with cr */
						return lf;
					else
						call fatalError(ERR215);
				end;
				call closeF(.srcFil);		/* unnest include file */
				srcFileIdx = srcFileIdx - 10;
				call initF(.srcFil, .('SOURCE'), .srcFileTable(srcFileIdx));
				call openf(.srcFil, 1);
				call seekF(.srcFil, .srcFileTable(srcFileIdx + 8));
			end;
		break:	offLastCh = offLastCh - 1;		/* correct for 0 index */
		end;
		else
			offCurCh = offCurCh + 1;		/* advance to next char */
		return srcbuf(offCurCh) and 7fh;		/* remove high bits */
	end;

	lstLineLen = 0;
	crCnt = 0;
	do while 1;
		lstbuf(lstLineLen) = getSourceCh;
		if lstbuf(lstLineLen) = lf then
		do;
			b7AF1 = 0;
			b7AF2 = 0;
			return;
		end;
		else if lstbuf(lstLineLen) = cr then		/* allow cr */
			crCnt = crCnt + 1;
		else if lstbuf(lstLineLen) <> cr and lstLineLen < 128 then
			lstLineLen = lstLineLen + 1;
	end;
end;
END;
src/plma.plm
PLMA: DO;
$include(:f2:plma.ipx)

DECLARE
	signonMsg(*) BYTE DATA(CR, LF, 'ISIS-II PL/M-80 COMPILER '),
	noMemMsg(*) BYTE DATA('NOT ENOUGH MEMORY FOR A COMPILATION'),
	a$ixi(*) BYTE DATA('.IXI'),
	a$obj(*) BYTE DATA('.OBJ'),
	a$lst(*) BYTE DATA('.LST'),
	plmtx1(*) BYTE DATA(':F1:PLMTX1.TMP '),
	plmtx2(*) BYTE DATA(':F1:PLMTX2.TMP '),
	plmat(*) BYTE DATA(':F1:PLMAT.TMP '),
	plmnms(*) BYTE DATA(':F1:PLMNMS.TMP '),
	plmxrf(*) BYTE DATA(':F1:PLMXRF.TMP '),
	aInvocationComm(*) BYTE DATA('INVOCATION COMMAND DOES NOT END WITH <CR><LF>'),
	aIncorrectDevice(*) BYTE DATA('INCORRECT DEVICE SPEC'),
	aSourceFileNotDisk(*) BYTE DATA('SOURCE FILE NOT A DISKETTE FILE'),
	aSourceFileName(*) BYTE DATA('SOURCE FILE NAME INCORRECT'),
	aSourceFileBadExt(*) BYTE DATA('SOURCE FILE EXTENSION INCORRECT'),
	aIllegalCommand(*) BYTE DATA('ILLEGAL COMMAND TAIL SYNTAX');

DECLARE
	cmdText$p ADDRESS PUBLIC,
	cmdch BASED cmdText$p BYTE;


sub$40AC: PROCEDURE PUBLIC;

	localRescan: procedure (conn, status$p);
	    declare (conn, status$p) address;
		call ISIS(IRESCAN, .conn);
	end localRescan;


	skipSpace: PROCEDURE;
		do while cmdch = ' ' or cmdch = '&';
			if cmdch = ' ' then
				cmdText$p = cmdText$p + 1;
			else if 0 <> cmd.link then
			do;
				cmdLine$p = cmd.link;
				cmdText$p = cmdLine$p + 3;
			end;
		end;
	end skipSpace;


	testToken: PROCEDURE(str, len) BOOLEAN;
		DECLARE str ADDRESS, len BYTE;
		DECLARE p ADDRESS;
		DECLARE strch BASED str BYTE;

		p = cmdText$p;
		do while len <> 0;
			if (cmdch and 5FH) <> strch then
			do;
				cmdText$p = p;
				return false;
			end;
			cmdText$p = cmdText$p + 1;
			str = str + 1;
			len = len - 1;
		end;
		return true;
	end testToken;


	skipAlphaNum: PROCEDURE;
		
		do while 'A' <= cmdch and cmdch <= 'Z' or 'a' <= cmdch and cmdch <= 'z'
					or '0' <= cmdch and cmdch <= '9';
			cmdText$p = cmdText$p + 1;
		end;
	end skipAlphaNum;



	getCmdLine: PROCEDURE;
		DECLARE (actual, status) ADDRESS;
		DECLARE (i, inQuote) BYTE;

		call localRescan(1, .status);
		if status <> 0 then
			call fatlIO(.conFile, status);
		startCmdLine$p = 0;
		cmdLine$p = topMem;

		loop: do;
			call readf(.conFile, .ioBuffer, 128, .actual);
			if ioBuffer(actual - 1) <> LF or ioBuffer(actual - 2) <> CR then
				call fatal(.aInvocationComm, length(aInvocationComm));
			topMem = cmdLine$p - actual - 3;
			if startCmdLine$p = 0 then
				startCmdLine$p = topMem;
			else
				cmd.link = topMem;
			cmdLine$p = topMem;
			cmd.pstr(0) = actual;
			call movmem(actual, .ioBuffer, .cmd.pstr(1));
			inQuote = 0;
			do i = 0 to actual - 1;
				if ioBuffer(i) = QUOTE then
					inQuote = not inQuote;
				else if ioBuffer(i) = '&' then
					if not inQuote then
						goto extend;
			end;
			cmd.link = 0;
			cmdLine$p = startCmdLine$p;
			topMem = topMem - 1;
			return;
		extend:
			call printStr(.('**'), 2);
			goto loop;
		end;
	end getCmdLine;

	parseInvokeName: PROCEDURE;
		DECLARE (p, start$p, len) ADDRESS;
		DECLARE ch BASED cmdText$p BYTE;

		call skipSpace;
		if testToken(.('DEBUG'), 5) then
			debugFlag = 0FFH;
		else
			debugFlag = 0;
		call skipSpace;
		start$p = cmdText$p;
		if ch = ':' then
			cmdText$p = cmdText$p + 4;
		call skipAlphaNum;
		if (len := cmdText$p - start$p) > 10 then
			len = 10;
		do p = .overlay1 to .overlay5 by FILE$NAME$LEN;
			call movmem(len, start$p, p);
		end;
		call movmem(len, start$p, .invokeName);
		call movmem(len, start$p, .overlay6);
		do p = .overlay1 to .overlay5 by FILE$NAME$LEN;
			call movmem(5, p + 10, p + len);
		end;
		call movmem(5, .ov0, .invokeName(len));
		call movmem(5, .ov6, .overlay6 + len);
	end parseInvokeName;


	parseSrcFile: PROCEDURE;
		DECLARE cmdText BASED cmdText$p(1) BYTE;
		DECLARE fullName ADDRESS;
		DECLARE fileName ADDRESS;
		DECLARE nameLen ADDRESS;

		do while  cmdch <> ' ' and cmdch <> CR and cmdch <> '&';
			cmdText$p = cmdText$p + 1;
		end;
		call skipSpace;
		fullName = cmdText$p;
		if cmdch = ':' then
		do;
			if cmdText(3) <> ':' then
				call fatal(.aIncorrectDevice, length(aIncorrectDevice));
			if cmdText(1) >= 'a' then
				cmdText(1) = cmdText(1) and 05FH;
			if cmdText(1) <> 'F' then
				call fatal(.aSourceFileNotDisk, length(aSourceFileNotDisk));
			cmdText$p = cmdText$p + 4;
		end;
		fileName = cmdText$p;
		call skipAlphaNum;
		if (nameLen := cmdText$p - fileName) = 0 or nameLen > 6 then
			call fatal(.aSourceFileName, length(aSourceFileName));
		srcStemLen = cmdText$p - fullname;
		call FILLX(10, .srcStemName, double(' '));
		call movmem(srcStemLen, fullname, .srcStemName);
		if cmdch = '.' then
		do;
			filename = (cmdText$p := cmdText$p + 1);
			call skipAlphaNum;
			if (namelen := cmdText$p - filename) = 0 or nameLen > 3 then
				call fatal(.aSourceFileBadExt, length(aSourceFileBadExt));
		end;
		namelen = cmdText$p - fullname;
		srcFileIdx = 0;
		call FILLX(16, .srcFileTable, double(' '));
		call movmem(namelen, fullname, .srcFileTable);
		call FILLX(4, .srcFileTable(8), double(0));
		call skipSpace;
		if cmdch = '$' then
			call fatal(.aIllegalCommand, length(aIllegalCommand));
		if cmdch = CR then
			offNxtCmdChM1 = 0;
		else
			offNxtCmdChM1 = cmdText$p - cmdLine$p - 1;
	end parseSrcFile;

	sub$45F6: PROCEDURE;
		LEFTMARGIN = 1;
		call FILLX(15, .ixiFileName, double(' '));
		call movmem(srcStemLen, .srcStemName, .ixiFileName);
		call movmem(4, .a$ixi, .ixiFileName(srcStemLen));
		call initf(.ixiFile, .('IXREF '), .ixiFileName);
		objBlk, objByte = 0;
		call FILLX(15, .objFileName, double(' '));	
		call movmem(srcStemLen, .srcStemName, .objFileName);
		call movmem(4, .a$obj, .objFileName(srcStemLen));
		call initf(.objFile, .('OBJECT'), .objFileName);
		call FILLX(15, .lstFileName, double(' '));	
		call movmem(srcStemLen, .srcStemName, .lstFileName);
		call movmem(4, .a$lst, .lstFileName(srcStemLen));
		call initf(.lstFil, .('LIST '), .lstFileName);
		call initf(.tx1File, .('UT1 '), .plmtx1);
		call initf(.tx2File, .('UT2 '), .plmtx2);
		call initf(.atFile, .('AT  '), .plmat);
		call initf(.nmsFile, .('NAMES '), .plmnms);
		call initf(.xrfFile, .('XREF '), .plmxrf);
		IXREF = false;
		IXREFSET = false;
		PRINT = true;
		PRINTSet = true;
		XREF = false;
		SYMBOLS = false;
		DEBUG = false;
		PAGING = true;
		OBJECT = true;
		OBJECTSet = true;
		OPTIMIZE = true;
		call setDate(.(' '), 1);
		call setPageLen(57);
		call setMarkerInfo(20, 45, 21);
		call setPageNo(0);
		call setMarginAndTabW(0FFH, 4);
		call setTitle(.(' '), 1);
		call setPageWidth(120);
	end sub$45F6;


	call movmem(4, .verNo, .version);
	call initf(.conFile, .('CONSOL'), .(':CI: '));
	call openf(.confile, 1);
	topMem = MEMCHK - 12;
	if topMem < 0C000H then
		call fatal(.noMemMsg, length(noMemMsg));
	call getCmdLine;
	call printStr(.signonMsg, length(signonMsg));
	call printStr(.version, 4);
	call printStr(.(CR, LF), 2);
	cmdText$p = cmdLine$p + 3;
	blkSize1 = topMem - blkSize1 - 256;
	blkSize2 = topMem - blkSize2 - 256;
	call parseInvokeName;
	call parseSrcFile;
	call sub$45F6;
end sub$40AC;

END;

src/plmb.plm
PLMB: DO;
$include(:f2:plmb.ipx)


sub$4767: PROCEDURE PUBLIC;

	installBuiltins: PROCEDURE;
		DECLARE p ADDRESS;
		DECLARE len BASED p BYTE;
		DECLARE charray BASED p(1) BYTE;

		p = .builtins;
		do while len <> 0;
			call lookup(p);
			call createInfo(0, BUILTIN$T);
			call setBuiltinId(charray(len + 1));
			call setParamCnt(charray(len + 2));
			call setDataType(charray(len + 3));
			p = p + len +  4;
		end;	
		call lookup(.(6, 'MEMORY'));
		call createInfo(0, BYTE$T);
		call setInfoFlag(F$LABEL);
		call setInfoFlag(F$MEMORY);
		call setInfoFlag(F$ARRAY);
	end installBuiltins;


	installKeywords: PROCEDURE;
		DECLARE p ADDRESS;
		DECLARE pstr BASED p STRUCTURE(len BYTE, array(1) BYTE);
	
		p = .keywords;
		do while pstr.len <> 0;
			call lookup(p);
			cursym.info$p = 0FF00H or pstr.array(pstr.len);
			p = p + pstr.len + 2;
		end;
	end installKeywords;


	sub$4845: PROCEDURE;
		DECLARE i ADDRESS;
		DECLARE hashChains BASED hashChains$p(1) ADDRESS;

		if w3C44 > w3C34 then
			botMem = w3C44;
		else
			botMem = w3C34;
		botMem = botMem + 256;
		botSymbol = (topSymbol := (hashChains$p := topMem + 1 - DOUBLE(128)) - 1) + 1;
		topInfo = (botInfo := botMem) + 1;
		do i = 0 to 63;
			hashChains(i) = 0;
		end;
		call setPageNo(1);
		locallabelCnt = 0;
		w382A = w382A + 1;
		procChains(0), procChains(1), blockDepth = 0;
	end sub$4845;

	call sub$4845;
	call installKeywords;
	call installBuiltins;
end sub$4767;


END;
src/plmc.plm
plmc: DO;
	DECLARE vtext(*) BYTE DATA('program_version_number='),
		verno(*) BYTE PUBLIC DATA('V4.0');

END;



src/plmd.plm
plmd: DO;
$include(:f2:plmd.ipx)

setDate: PROCEDURE(str, len) PUBLIC;
	DECLARE str ADDRESS, len BYTE;
	if len > 9 then
		len = 9;
	call fill(9, .DATE, ' ');
	call movmem(len, str, .DATE);
end setDate;


setPageLen: PROCEDURE(len) PUBLIC;
	DECLARE len ADDRESS;
	PAGELEN = len;
end setPageLen;


setMarkerInfo: PROCEDURE(b1, b2, b3) PUBLIC;
	DECLARE (b1, b2, b3) BYTE;
	b3CFB = b1;
	b3CFC = b2;
	b3CFD = b3;
end;

setPageNo: PROCEDURE(v) PUBLIC;
	DECLARE v ADDRESS;

	pageNo = v - 1;
end;


setMarginAndTabW: PROCEDURE(b1, b2) PUBLIC;
	DECLARE (b1, b2) BYTE;

	margin = b1 - 1;
	tWidth = b2;
end;


setTitle: PROCEDURE(str, len) PUBLIC;
	DECLARE str ADDRESS, len BYTE;
	if len > 60 then
		len = 60;
	call movmem(len, str, .TITLE);
	TITLELEN = len;
end setTitle;


setPageWidth: PROCEDURE(width) PUBLIC;
	DECLARE width ADDRESS;
	PWIDTH = width;
end setPageWidth;



END;
src/plme.plm
plmE:
DO;
DECLARE ioBuffer(2048) BYTE PUBLIC,
	builtins(*) BYTE PUBLIC INITIAL(
	5, 'CARRY', 0 , 0 , 2,
	3, 'DEC', 1 , 1 , 2 ,
	6, 'DOUBLE', 2 , 1 , 3 ,
	4, 'HIGH', 3 , 1 , 2 ,
	5, 'INPUT', 4 , 1 , 2 ,
	4, 'LAST', 5 , 1 , 3 ,
	6, 'LENGTH', 6 , 1 , 3 ,
	3, 'LOW', 7 , 1 , 2 ,
	4, 'MOVE', 8 , 3 , 0 ,
	6, 'OUTPUT', 9 , 1 , 0 ,
	6, 'PARITY', 0Ah , 0 , 2 ,
	3, 'ROL', 0Bh , 2 , 2 ,
	3, 'ROR', 0Ch , 2 , 2 ,
	3, 'SCL', 0Dh , 2 , 2 ,
	3, 'SCR', 0Eh , 2 , 2 ,
	3, 'SHL', 0Fh , 2 , 2 ,
	3, 'SHR', 10h , 2 , 2 ,
	4, 'SIGN', 11h , 0 , 2 ,
	4, 'SIZE', 12h , 1 , 2 ,
	8, 'STACKPTR', 13h , 0 , 3 ,
	4, 'TIME', 14h , 1 , 0 ,
	4, 'ZERO', 15h , 0 , 2 ,
	0),
	pad(17) BYTE,

	keywords(*) BYTE PUBLIC INITIAL(
	7, 'ADDRESS', 28h,
	3, 'AND', 0Ah,
	2, 'AT', 29h,
	5, 'BASED', 2Ah,
	2, 'BY', 35h,
	4, 'BYTE', 2Bh,
	4, 'CALL', 1Ch,
	4, 'CASE', 36h,
	4, 'DATA', 2Ch,
	7, 'DECLARE', 1Dh,
	7, 'DISABLE', 1Eh,
	2, 'DO', 1Fh,
	4, 'ELSE', 37h,
	6, 'ENABLE', 20h,
	3, 'END', 21h,
	3, 'EOF', 38h,
	8, 'EXTERNAL', 2Dh,
	2, 'GO', 22h,
	4, 'GOTO', 23h,
	4, 'HALT', 24h,
	2, 'IF', 25h,
	7, 'INITIAL', 2Eh,
	9, 'INTERRUPT', 2Fh,
	5, 'LABEL', 30h,
	9, 'LITERALLY', 31h,
	5, 'MINUS', 9  ,
	3, 'MOD', 7  ,
	3, 'NOT', 0Dh,
	2, 'OR', 0Bh,
	4, 'PLUS', 8  ,
	9, 'PROCEDURE', 26h,
	6, 'PUBLIC', 32h,
	9, 'REENTRANT', 33h,
	6, 'RETURN', 27h,
	9, 'STRUCTURE', 34h,
	4, 'THEN', 39h,
	2, 'TO', 3Ah,
	5, 'WHILE', 3Bh,
	3, 'XOR', 0Ch,
        0);

END;
src/wrec.plm
wrec: do;
$include(:f2:wrec.ipx)

writeRec: procedure(rec$p, arg2b) public;
	declare rec$p address, arg2b byte;
	declare (p, len$p) address, crc byte, cnt address;
	declare len based len$p address;
	declare brec based rec$p(1) byte;

	len$p = rec$p + 1;
	if len > 0 and OBJECT then
	do;
			crc = 0;
			p = 0;
			len = len + arg2b + 1;
			cnt = len + 2;
			do while p < cnt;
				crc = crc - brec(p);
				p = p + 1;
			end;
			brec(cnt) = crc;	/* insert checksum */
			call fwrite(.objFile, rec$p, cnt + 1);
	end;
	len = 0;
end;



recAddByte: procedure(rec$p, arg2b, arg3b) public;
	declare rec$p address, (arg2b, arg3b) byte;
	declare len$p address, len based len$p address;
	declare rec based rec$p structure(type byte, len address, val(1) byte);

	len$p = .rec.len;
	rec.val(len + arg2b) = arg3b;
	len = len + 1;
end;



recAddWord: procedure(arg1w, arg2b, arg3w) public;
	declare arg1w address, arg2b byte, arg3w address;

	call recAddByte(arg1w, arg2b, low(arg3w));
	call recAddByte(arg1w, arg2b, high(arg3w));
end;
end;
shared/fill.asm
	public FILL,FILLX

	CSEG

; FILLX(cnt$w, dest$p, val$w)
; FILL(cnt$w, dest$p, val$b)
FILLX:
FILL:	pop	h
	xthl
	mov	a, e
	inr	l
	inr	h
	jmp	L2

L1:	stax	b
	inx	b

L2:	dcr	l
	jnz	L1
	dcr	h
	jnz	L1
	ret

	END

shared/fread.asm
	PUBLIC	fread
	extrn	movmem
	extrn	readf
	extrn	fatlIO
	extrn	@P0099	; hl@deiSUBhli
	extrn	@P0095	; hl@deSUBhl
	extrn	@P0012	; hl@deiADDhli
	extrn	@P0102	; hl@deiSUBhl

DSEG
file:	ds 2
buf:	ds 2
cnt:	ds 2
avail:	ds 2

; file structure offsets
aftn	equ 0
snam	equ 2
fnam	equ 8
bufptr	equ 24
size	equ 26
actual	equ 28
curoff	equ 30

CSEG

; fread: procedure(file, buf, cnt) public; declare (file, buf, cnt) address; end;

fread:	xchg
	shld	cnt
	mov	h, b
	mov	l, c
	shld	buf
	pop	h
	xthl
	shld	file
	xchg
	lxi	h, actual
	dad	d
	push	h
	xchg
	lxi	b, curoff
	dad	b
	push	h
	call	@P0099
	xchg

L1:	lhld	cnt
	call	@P0095
	lhld	cnt
	jnc	L2
	xchg

L2:	shld	avail
	lhld	file
	mov	b, h
	mov	c, l
	lxi	h, actual
	dad	b
	mov	a, m
	inx	h
	mov	e, m
	ora	e
	jnz	L3
	lxi	d, 0FEh
	call	fatlIO		; fatalIO(arg1w, arg2w)

L3:	lhld	file
	lxi	d, bufptr
	dad	d
	pop	d
	push	d
	call	@P0012
	mov	b, h
	mov	c, l
	lhld	avail
	push	h
	lhld	buf
	xchg
	call	movmem
	pop	h
	push	h
	lxi	d, avail
	call	@P0012
	xchg
	pop	h
	push	h
	mov	m, e
	inx	h
	mov	m, d
	lhld	avail
	mov	b, h
	mov	c, l
	lxi	d, cnt
	call	@P0102
	shld	cnt
	mov	a, h
	ora	l
	jz	L5
	lhld	buf
	dad	b
	shld	buf
	pop	d
	pop	h
	push	d
	push	h
	call	@P0099
	jc	L4
	lhld	file
	push	h
	xchg
	lxi	h, bufptr
	dad	d
	mov	c, m
	inx	h
	mov	b, m
	push	b
	inx	h
	mov	c, m
	inx	h
	mov	b, m
	inx	h
	xchg
	call	readf
	lxi	b, curoff
	lhld	file
	dad	b
	mvi	m, 0
	inx	h
	mvi	m, 0

L4:	pop	h
	mov	e, m
	inx	h
	mov	d, m
	dcx	h
	xthl
	push	h
	jmp	L1

L5:	pop	h
	pop	h
	ret

	end
shared/fwrite.asm
	public	fwrite
	extrn	movmem
	extrn	fflush
	extrn	@P0099	; hl@deiSUBhli
	extrn	@P0095	; hl@deSUBhl
	extrn	@P0012	; hl@deiADDhli
	extrn	@P0102	; hl@deiSUBhl

; file structure offsets
aftn	equ	0
sNam	equ	aftn + 2
fNam	equ	sNam + 6
bufp	equ	fNam + 16
bsize	equ	bufp + 2
actual	equ	bsize + 2
curoff	equ	actual + 2

DSEG
file:	ds 2
buf:	ds 2
len:	ds 2
wcnt:	ds 2

CSEG
; fwrite(file, buf, len)

fwrite:	xchg
	shld	len
	mov	h, b
	mov	l, c
	shld	buf
	pop	h
	xthl
	shld	file
	xchg
	lxi	h, bsize
	dad	d
	push	h
	xchg
	lxi	b, curoff
	dad	b
	push	h
	call	@P0099		; hl = m[de] - (bc = m[hl])
	xchg			; room in buffer

L1:	lhld	len
	call	@P0095
	lhld	len
	jnc	L2
	xchg

L2:	shld	wcnt
	lhld	file
	lxi	d, bufp
	dad	d
	pop	d		; current offset
	push	d		; current offset
	call	@P0012
	xchg
	lhld	buf		; copy first lot of bytes
	mov	b, h
	mov	c, l
	lhld	wcnt
	push	h		; wcnt
	call	movmem
	pop	h		; advance the offset
	push	h		; current offset
	lxi	d, wcnt
	call	@P0012
	xchg
	pop	h
	push	h		; current offset
	mov	m, e
	inx	h
	mov	m, d
	lhld	wcnt		; work out bytes left to copy
	mov	b, h
	mov	c, l
	lxi	d, len
	call	@P0102
	shld	len
	mov	a, h
	ora	l
	jz	L4		; all done
	lhld	buf		; advance the buf pointer
	dad	b
	shld	buf
	pop	d		; cur offset
	pop	h		; buf size
	push	d
	push	h
	call	@P0099		; hl = m[de] - (bc = m[hl])
	jc	L3		; ok still room	in buffer
	lhld	file		; write	what we	have
	mov	b, h
	mov	c, l
	call	fflush		; flushFile(arg1w)

L3:	pop	h		; set as bufSize byte space available
	mov	e, m
	inx	h
	mov	d, m
	dcx	h
	xthl
	push	h
	jmp	L1

L4:	pop	h
	pop	h
	ret

	end
shared/memchk.asm
	public MEMCHK

	CSEG

MEMCHK:		
	call	0F81Bh
	mov	h, b
	mov	l, a
	ret

	end;
shared/movmem.asm
	public MOVMEM

	CSEG


; movmem(cnt, src, dest)

movmem:	pop	h		; hl = cnt arg
	xthl
	push	b		; src
	mov	b, h		; xchg hl,bc
	mov	c, l
	pop	h
	dcx	b
	mov	a, e
	sub	l
	mov	a, d
	jz	L1
	sbb	h
	jmp	L2

L1:	sbb	h
	rz

L2:	push	h
	lxi	h, L5
	jc	L3
	pop	h
	dad	b
	push	h
	xchg
	dad	b
	xchg
	lxi	h, L7

L3:	inx	b
	mov	a, b
	rrc
	rrc
	rrc
	mov	b, a
	mvi	a, 7
	ana	c
	push	psw
	xra	c
	rrc
	rrc
	rrc
	xra	b
	ani	1Fh
	xra	b
	mov	c, a
	mvi	a, 1Fh
	ana	b
	mov	b, a
	inr	b
	inr	c
	pop	psw
	rlc
	rlc
	push	b
	cma
	mov	c, a
	mvi	b, 0FFh
	inx	b
	dad	b
	pop	b
	xthl
	ret

L4:	mov	a, m
	stax	d
	inx	h
	inx	d
	mov	a, m
	stax	d
	inx	h
	inx	d
	mov	a, m
	stax	d
	inx	h
	inx	d
	mov	a, m
	stax	d
	inx	h
	inx	d
	mov	a, m
	stax	d
	inx	h
	inx	d
	mov	a, m
	stax	d
	inx	h
	inx	d
	mov	a, m
	stax	d
	inx	h
	inx	d
	mov	a, m
	stax	d
	inx	h
	inx	d

L5:	dcr	c
	jnz	L4
	dcr	b
	jnz	L4
	ret

L6:	mov	a, m
	stax	d
	dcx	h
	dcx	d
	mov	a, m
	stax	d
	dcx	h
	dcx	d
	mov	a, m
	stax	d
	dcx	h
	dcx	d
	mov	a, m
	stax	d
	dcx	h
	dcx	d
	mov	a, m
	stax	d
	dcx	h
	dcx	d
	mov	a, m
	stax	d
	dcx	h
	dcx	d
	mov	a, m
	stax	d
	dcx	h
	dcx	d
	mov	a, m
	stax	d
	dcx	h
	dcx	d

L7:	dcr	c
	jnz	L6
	dcr	b
	jnz	L6
	ret

	END

shared/putlst.asm
	public putLst
	extrn	wrcLst
	extrn	nlLead
	extrn	newPgl
	extrn	PWIDTH
	extrn	tWidth
	extrn	margin
	extrn	b3CFF
	extrn	linLft
	extrn	col
	extrn	@P0029	; dehl@deDIVhl
	extrn	@P0094	; hl@0aSUBhl

	DSEG
i:	ds	2

	CSEG
putLst:			
	push	b
	lda	col
	ora	a
	jnz	L76B8
	lda	linLft
	ora	a
	jnz	L7695
	call	newPgl
	jmp	L76BF

L7695:	mov	b, a
	lda	b3CFF
	cmp	b
	jc	L76A3
	call	newPgl
	jmp	L76BF

L76A3:	ora	a
	jz	L76BF
	mvi	c, 0Ah
	call	wrcLst
	lxi	h, linLft
	dcr	m
	lxi	h, b3CFF
	dcr	m
	mov	a, m
	jmp	L76A3

L76B8:	lxi	h, PWIDTH
	cmp	m
	cnc	nlLead

L76BF:	pop	b
	mvi	a, 9
	cmp	c
	jnz	L770C
	lxi	h, margin
	lda	col
	cmp	m
	rc
	lxi	h, margin
	lda	col
	sub	m
	mov	e, a
	mvi	d, 0
	lhld	tWidth
	mvi	h, 0
	call	@P0029		; de = de/hl; hl = de %	hl
	mov	a, c
	call	@P0094
	xchg
	lxi	h, i
	mov	m, e
	lda	col
	add	e
	lxi	h, PWIDTH
	cmp	m
	jc	L76F8
	call	nlLead
	ret

L76F8:	mov	a, e

L76F9:	ora	a
	rz
	mvi	c, 20h
	call	wrcLst
	lxi	h, col
	inr	m
	lxi	h, i
	dcr	m
	mov	a, m
	jmp	L76F9

L770C:	push	b
	call	wrcLst
	pop	b
	mvi	a, 0Dh
	cmp	c
	lxi	h, col
	jnz	L771D
	mvi	m, 0
	ret

L771D:	inr	m
	ret

	end
shared/wrclst.asm
	extrn	lchCnt
	extrn	lbufp
	extrn	lbufsz
	extrn	lfopen
	extrn	lstFil
	extrn	openf
	extrn	writef
	extrn	@P0095		;hl@deSUBhl
	public	wrcLst

	
TRUE	equ	0ffh

	CSEG

wrcLst:	lhld	lchCnt
	xchg
	lhld	lbufp
	dad	d
	mov	m, c
	lhld	lbufsz
	call	@P0095
	ora	l
	jnz	L7DBA
	lda	lfOpen
	rar
	jc	L7DA3
	mvi	e, 2
	lxi	b, lstFil
	call	openf
	lxi	h, lfOpen
	mvi	m, TRUE

L7DA3:	lxi	b, lstFil
	push	b
	lhld	lbufsz
	inx	h
	xchg
	lhld	lbufp
	mov	b, h
	mov	c, l
	call	writef
	lxi	h, 0
	jmp	L7DBE


L7DBA:	lhld	lchCnt
	inx	h

L7DBE:	shld	lchCnt
	ret

	end
src/plm0c.asm
CSEG
	public gnxtch
	public ingetc
	extrn inChrp
	extrn getlin
	extrn lastch
	extrn readf
	extrn ocurch
	extrn olstch
	extrn srcFil
	extrn inbuf
	public trunc
	public rsrcln

gnxtch:	lhld	inChrp
	inx	h
	shld	inChrp

L58E6:
	mov	a, m
	cpi	0Ah
	jnz	L58F5
	call	getlin
	lhld	inChrp
	jmp	L58E6

L58F5:	sta	lastch
	ret

; inSrcCh
; get next char	into m[inChr$p]
; char is 0x81 on EOF, cr is discarded
; Attributes: hidden

ingetc:	lhld	ocurch
	lxi	d, olstch	; see if characters left in buffer
	ldax	d
	cmp	l
	jnz	L593A
	inx	d
	ldax	d
	cmp	h
	jnz	L593A
	lxi	h, 0
	shld	ocurch
	lxi	b, srcFil
	push	b
	lxi	b, inbuf
	push	b
	lxi	b, 200h
	lxi	d, olstch
	call	readf
	lhld	olstch
	mov	a, h
	ora	l
	jnz	L5930
	lhld	inChrp
	mvi	a, 81h
	mov	m, a
	ret

L5930:	dcx	h
	shld	olstch
	lhld	ocurch
	jmp	L593E

L593A:	inx	h
	shld	ocurch

L593E:	lxi	b, inbuf
	dad	b
	mvi	a, 7Fh
	ana	m
	cpi	0Dh
	jz	ingetc		; inSrcCh
				; get next char	into m[inChr$p]
				; char is 0x81 on EOF, cr is discarded
	lhld	inChrp
	mov	m, a
	ret

	DSEG
i:	ds 1
trunc:	db 0

	CSEG

rSrcLn:
	lxi	h, i
	mvi	m, 7Fh		; max 127 chars
	lhld	inChrp
	mov	a, m

L5958:	cpi	0Ah
	rz
	cpi	81h
	rz
	lda	i
	dcr	a
	jz	L5972
	sta	i
	inx	h
	shld	inChrp
	call	ingetc		; inSrcCh
				; get next char	into m[inChr$p]
				; char is 0x81 on EOF, cr is discarded
	jmp	L5958

L5972:
	mvi	a, 0FFh
	sta	trunc

L5977:
	call	ingetc		; inSrcCh
				; get next char	into m[inChr$p]
				; char is 0x81 on EOF, cr is discarded
	cpi	0Ah		; waste	rest of	line
	rz
	cpi	81h
	rz
	jmp	L5977
end
