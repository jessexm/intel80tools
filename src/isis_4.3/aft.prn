PL/M-80 COMPILER                                                                                                PAGE   1


ISIS-II PL/M-80 V4.0 COMPILATION OF MODULE AFT
OBJECT MODULE PLACED IN AFT.OBJ
COMPILER INVOKED BY:  :F1:plm80 aft.plm PRINT(AFT.LST) OBJECT(AFT.OBJ) DEBUG OPTIMIZE CODE



   1          aft:
              do;
        
              $include(:f0:aft.ipx)
   2   1  =   declare a$access$p literally 'aAcesP';
   3   1  =   declare a$blk$count$p literally 'aBCntP';
   4   1  =   declare a$empty$p literally 'aEmtyP';
   5   1  =   declare a$eof$data$ptr$p literally 'aEoPP';
   6   1  =   declare Aft$Window literally 'AWindo';
   7   1  =   declare a$hdr$blk$p literally 'aHBlkP';
   8   1  =   declare Get$Aft$Slot literally 'GASlot';
   9   1  =   declare AFT$BOTTOM literally '10';
  10   1  =   declare AFT$FULL literally '3';
  11   1  =   declare AFT$LAST literally '17';
  12   1  =   abortx: procedure(errcode) external; declare errcode byte; end;
        
  15   1      DECLARE aft$current BYTE INITIAL(0ffh);
  16   1      DECLARE pointer$base ADDRESS PUBLIC,
                  datum$base ADDRESS PUBLIC,
                  a$empty$p ADDRESS PUBLIC,
                  a$dev$p ADDRESS PUBLIC,
                  a$access$p ADDRESS PUBLIC,
                  a$edit$p ADDRESS PUBLIC,
                  a$lbuf$p ADDRESS PUBLIC,
                  a$dbuf$p ADDRESS PUBLIC,
                  a$data$ptr$p ADDRESS PUBLIC,
                  a$i$no$p ADDRESS PUBLIC,
                  a$pbuf$p ADDRESS PUBLIC,
                  a$ptr$ptr$p ADDRESS PUBLIC,
                  a$eof$data$ptr$p ADDRESS PUBLIC,
                  a$ptr$change$p ADDRESS PUBLIC,
                  a$data$change$p ADDRESS PUBLIC,
                  a$blk$count$p ADDRESS PUBLIC,
                  a$blk$seqno$p ADDRESS PUBLIC,
                  a$ptr$blk$p ADDRESS PUBLIC,
                  a$hdr$blk$p ADDRESS PUBLIC,
                  a$data$blk$p ADDRESS PUBLIC,
                  a$dbuf$read$p ADDRESS PUBLIC;
        
  17   1      DECLARE aft(18) STRUCTURE (
                      empty   BYTE,
                      device  BYTE,
                      access  BYTE,
                      edit    BYTE,
                      lbuf    ADDRESS,
                      dbuf    ADDRESS,
                      pbuf    ADDRESS,
                      data$ptr BYTE,
                      i$no    ADDRESS,
                      ptr$ptr BYTE,
                      eofcnt  BYTE,
PL/M-80 COMPILER                                                                                                PAGE   2


                      ptr$change BYTE,
                      data$change BYTE,
                      blk ADDRESS,
                      blk$seq ADDRESS,
                      ptr$blk ADDRESS,
                      hdr$blk ADDRESS,
                      data$blk$count ADDRESS,
                      dbuf$read BYTE) PUBLIC INITIAL(
                          0, 0, 3, 0, 0, 0, 0, 80h, 0, 0, 80h, 0, 0, 19h, 0, 101h, 101h, 102h, 0,
                          0, 1, 3, 0, 0, 0, 0, 80h, 0, 0, 80h, 0, 0, 19h, 0, 101h, 101h, 102h, 0,
                          0, 2, 3, 0, 0, 0, 0, 80h, 0, 0, 80h, 0, 0, 19h, 0, 101h, 101h, 102h, 0,
                          0, 3, 3, 0, 0, 0, 0, 80h, 0, 0, 80h, 0, 0, 19h, 0, 101h, 101h, 102h, 0,
                          0, 4, 3, 0, 0, 0, 0, 80h, 0, 0, 80h, 0, 0, 19h, 0, 101h, 101h, 102h, 0,
                          0, 5, 3, 0, 0, 0, 0, 80h, 0, 0, 80h, 0, 0, 19h, 0, 101h, 101h, 102h, 0,
                          0, 6, 3, 0, 0, 0, 0, 80h, 0, 0, 80h, 0, 0, 19h, 0, 101h, 101h, 102h, 0,
                          0, 7, 3, 0, 0, 0, 0, 80h, 0, 0, 80h, 0, 0, 19h, 0, 101h, 101h, 102h, 0,
                          0, 8, 3, 0, 0, 0, 0, 80h, 0, 0, 80h, 0, 0, 19h, 0, 101h, 101h, 102h, 0,
                          0, 9, 3, 0, 0, 0, 0, 80h, 0, 0, 80h, 0, 0, 19h, 0, 101h, 101h, 102h, 0,
                          0FFh, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0FFh, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0FFh, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0FFh, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0FFh, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0FFh, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0FFh, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0FFh, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);            
        
  18   1      DECLARE a$dbuf BASED a$dbuf$p ADDRESS,
                  a$pbuf BASED a$pbuf$p ADDRESS;
        
        
  19   1      aft$window: PROCEDURE(slot$number) PUBLIC;
                                                 ; STATEMENT # 19
                         ; PROC  AWINDO
           02A7  21E82C          LXI     H,SLOTNUMBER
           02AA  71              MOV     M,C
  20   2          DECLARE slot$number BYTE;
        
  21   2          if aft$current <> slot$number then
                                                 ; STATEMENT # 21
           02AB  21E82C          LXI     H,SLOTNUMBER
           02AE  3AC52A          LDA     AFTCURRENT
           02B1  BE              CMP     M
           02B2  CA1A03          JZ      @1
  22   2          do; 
  23   3              a$empty$p = .aft(aft$current := slot$number).empty;
                                                 ; STATEMENT # 23
           02B5  3AE82C          LDA     SLOTNUMBER
           02B8  32C52A          STA     AFTCURRENT
           02BB  6F              MOV     L,A
           02BC  2600            MVI     H,0
           02BE  111C00          LXI     D,1CH
           02C1  CDC829          CALL    @P0034 
           02C4  01F02A          LXI     B,AFT
           02C7  09              DAD     B
           02C8  22CA2A          SHLD    AEMTYP
  24   3              a$dev$p = a$empty$p + 1;
PL/M-80 COMPILER                                                                                                PAGE   3


                                                 ; STATEMENT # 24
           02CB  23              INX     H
           02CC  22CC2A          SHLD    ADEVP
  25   3              a$access$p = a$dev$p + 1;
                                                 ; STATEMENT # 25
           02CF  23              INX     H
           02D0  22CE2A          SHLD    AACESP
  26   3              a$edit$p = a$access$p + 1;
                                                 ; STATEMENT # 26
           02D3  23              INX     H
           02D4  22D02A          SHLD    AEDITP
  27   3              a$lbuf$p = a$edit$p + 1;
                                                 ; STATEMENT # 27
           02D7  23              INX     H
           02D8  22D22A          SHLD    ALBUFP
  28   3              a$data$ptr$p = a$lbuf$p + 6;
                                                 ; STATEMENT # 28
           02DB  110600          LXI     D,6H
           02DE  19              DAD     D
           02DF  22D62A          SHLD    ADATAPTRP
  29   3              a$i$no$p = a$data$ptr$p + 1;
                                                 ; STATEMENT # 29
           02E2  23              INX     H
           02E3  22D82A          SHLD    AINOP
  30   3              a$ptr$ptr$p = a$i$no$p + 2;
                                                 ; STATEMENT # 30
           02E6  23              INX     H
           02E7  23              INX     H
           02E8  22DC2A          SHLD    APTRPTRP
  31   3              a$eof$data$ptr$p = a$empty$p + 14;
                                                 ; STATEMENT # 31
           02EB  110E00          LXI     D,0EH
           02EE  2ACA2A          LHLD    AEMTYP
           02F1  19              DAD     D
           02F2  22DE2A          SHLD    AEOPP
  32   3              a$ptr$change$p = a$eof$data$ptr$p + 1;
                                                 ; STATEMENT # 32
           02F5  23              INX     H
           02F6  22E02A          SHLD    APTRCHANGEP
  33   3              a$data$change$p = a$ptr$change$p + 1;
                                                 ; STATEMENT # 33
           02F9  23              INX     H
           02FA  22E22A          SHLD    ADATACHANGEP
  34   3              a$blk$count$p = a$data$change$p + 1;
                                                 ; STATEMENT # 34
           02FD  23              INX     H
           02FE  22E42A          SHLD    ABCNTP
  35   3              a$blk$seqno$p = a$blk$count$p + 2;
                                                 ; STATEMENT # 35
           0301  23              INX     H
           0302  23              INX     H
           0303  22E62A          SHLD    ABLKSEQNOP
  36   3              a$ptr$blk$p = a$blk$seqno$p + 2;
                                                 ; STATEMENT # 36
           0306  23              INX     H
           0307  23              INX     H
           0308  22E82A          SHLD    APTRBLKP
PL/M-80 COMPILER                                                                                                PAGE   4


  37   3              a$hdr$blk$p = a$ptr$blk$p + 2;
                                                 ; STATEMENT # 37
           030B  23              INX     H
           030C  23              INX     H
           030D  22EA2A          SHLD    AHBLKP
  38   3              a$data$blk$p = a$hdr$blk$p + 2;
                                                 ; STATEMENT # 38
           0310  23              INX     H
           0311  23              INX     H
           0312  22EC2A          SHLD    ADATABLKP
  39   3              a$dbuf$read$p = a$data$blk$p + 2;
                                                 ; STATEMENT # 39
           0315  23              INX     H
           0316  23              INX     H
           0317  22EE2A          SHLD    ADBUFREADP
  40   3          end;
                                                 ; STATEMENT # 40
                         @1:
  41   2          a$dbuf$p = .aft(slot$number).dbuf;
                                                 ; STATEMENT # 41
           031A  111C00          LXI     D,1CH
           031D  2AE82C          LHLD    SLOTNUMBER
           0320  2600            MVI     H,0
           0322  CDC829          CALL    @P0034 
           0325  01F02A          LXI     B,AFT
           0328  09              DAD     B
           0329  010600          LXI     B,DBUF
           032C  09              DAD     B
           032D  22D42A          SHLD    ADBUFP
  42   2          a$pbuf$p = a$dbuf$p + 2;
                                                 ; STATEMENT # 42
           0330  23              INX     H
           0331  23              INX     H
           0332  22DA2A          SHLD    APBUFP
  43   2          pointer$base = a$pbuf;
                                                 ; STATEMENT # 43
           0335  5E              MOV     E,M
           0336  23              INX     H
           0337  56              MOV     D,M
           0338  EB              XCHG
           0339  22C62A          SHLD    POINTERBASE
  44   2          datum$base = a$dbuf;
                                                 ; STATEMENT # 44
        
           033C  2AD42A          LHLD    ADBUFP
           033F  5E              MOV     E,M
           0340  23              INX     H
           0341  56              MOV     D,M
           0342  EB              XCHG
           0343  22C82A          SHLD    DATUMBASE
  45   2      end;
                                                 ; STATEMENT # 45
           0346  C9              RET
        
        
  46   1      get$aft$slot: PROCEDURE BYTE PUBLIC;
                                                 ; STATEMENT # 46
PL/M-80 COMPILER                                                                                                PAGE   5


                         ; PROC  GASLOT
  47   2          DECLARE i BYTE;
        
  48   2          do i = AFT$BOTTOM to AFT$LAST;
                                                 ; STATEMENT # 48
           0347  21E92C          LXI     H,I
           034A  360A            MVI     M,0AH
                         @3:
           034C  3E11            MVI     A,11H
           034E  21E92C          LXI     H,I
           0351  BE              CMP     M
           0352  DA7403          JC      @4
  49   3              if aft(i).empty then
                                                 ; STATEMENT # 49
           0355  111C00          LXI     D,1CH
           0358  2AE92C          LHLD    I
           035B  2600            MVI     H,0
           035D  CDC829          CALL    @P0034 
           0360  01F02A          LXI     B,AFT
           0363  09              DAD     B
           0364  7E              MOV     A,M
           0365  1F              RAR
           0366  D26D03          JNC     @2
  50   3                  return i;
                                                 ; STATEMENT # 50
           0369  3AE92C          LDA     I
           036C  C9              RET
                         @2:
  51   3          end;
                                                 ; STATEMENT # 51
                         @5:
           036D  21E92C          LXI     H,I
           0370  34              INR     M
           0371  C24C03          JNZ     @3
                         @4:
  52   2          call abortx(AFT$FULL);
                                                 ; STATEMENT # 52
           0374  0E03            MVI     C,3H
           0376  CD4B0B          CALL    ABORTX
  53   2      end;
                                                 ; STATEMENT # 53
           0379  C9              RET
  54   1      end;
              eof;



MODULE INFORMATION:

     CODE AREA SIZE     = 00D3H    211D
     VARIABLE AREA SIZE = 0225H    549D
     MAXIMUM STACK SIZE = 0002H      2D
     124 LINES READ
     0 PROGRAM ERRORS

END OF PL/M-80 COMPILATION
