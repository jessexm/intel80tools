**** warning failed to sync symbols ****
:F1:asm80 open.asm print(open.lst) object(open.obj) DEBUG



ISIS-II 8080/8085 MACRO ASSEMBLER, V4.1         OPEN     PAGE    1


  LOC  OBJ         LINE        SOURCE STATEMENT

                      1 ; open:
                      2 ; do;
                      3 ; $include(open.ipx)
                      4 ; declare a$access$p literally 'aAcesP';
                      5 ; declare a$blk$count$p literally 'aBCntP';
                      6 ; declare a$empty$p literally 'aEmtyP';
                      7 ; declare a$eof$data$ptr$p literally 'aEoPP';
                      8 ; declare Aft$Window literally 'AWindo';
                      9 ; declare a$hdr$blk$p literally 'aHBlkP';
                     10 ; declare Chk$Write$Protect literally 'CkWriP';
                     11 ; declare Clear$Buf literally 'ClrBuf';
                     12 ; declare direct$i$no literally 'dirINo';
                     13 ; declare Get$Aft$Slot literally 'GASlot';
                     14 ; declare Get$Block literally 'GetBlk';
                     15 ; declare Map$Write literally 'MapWri';
                     16 ; declare Write$Dir$Entry literally 'WDirEn';
                     17 ; declare abswrite literally 'abs$wr';
                     18 ; declare AFT$BOTTOM literally '10';
                     19 ; declare AFT$LAST literally '17';
                     20 ; declare AFT$T literally 'structure(AFT$T1, AFT$T2, AFT$T3, AFT$T4)';
                     21 ; declare AFT$T1 literally 'empty BYTE, device BYTE, access BYTE, edit BYTE, lbuf ADDRESS';
                     22 ; declare AFT$T2 literally 'dbuf ADDRESS, pbuf ADDRESS, data$ptr BYTE, i$no ADDRESS, ptr$ptr BYT
                        E';
                     23 ; declare AFT$T3 literally 'eofcnt BYTE, ptr$change BYTE, data$change BYTE, blk ADDRESS, blk$seq
                         ADDRESS';
                     24 ; declare AFT$T4 literally 'ptr$blk ADDRESS, hdr$blk ADDRESS, data$blk$count ADDRESS, dbuf$read 
                        BYTE';
                     25 ; declare ALREADY$OPEN literally '12';
                     26 ; declare BAD$ACCESS literally '22';
                     27 ; declare BAD$ECHO literally '25';
                     28 ; declare BBDEV literally '26';
                     29 ; declare BOOLEAN literally 'BYTE';
                     30 ; declare CI$AFT literally '1';
                     31 ; declare CIDEV literally '27';
                     32 ; declare CO$AFT literally '0';
                     33 ; declare CODEV literally '28';
                     34 ; declare DIRECTORY$FULL literally '9';
                     35 ; declare DIRECT$T literally 'structure(DIRECT$T1, DIRECT$T2)';
                     36 ; declare DIRECT$T1 literally 'empty BOOLEAN, file(6) BYTE, ext(3) BYTE, attrib BYTE';
                     37 ; declare DIRECT$T2 literally 'eof$count BYTE, blk ADDRESS, hdr$blk ADDRESS';
                     38 ; declare F9DEV literally '9';
                     39 ; declare FALSE literally '0';
                     40 ; declare LF literally '0ah';
                     41 ; declare NO$SUCH$FILE literally '13';
                     42 ; declare TRUE literally '0ffh';
                     43 ; declare a$access$p address external;
                     44 ; declare a$blk$count$p address external;
                     45 ; declare a$dbuf$p address external;
                     46 ; declare a$dev$p address external;
                     47 ; declare a$edit$p address external;
                     48 ; declare a$empty$p address external;
                     49 ; declare a$eof$data$ptr$p address external;
                     50 ; declare aft(18) AFT$T external;
                     51 ; declare a$hdr$blk$p address external;


ISIS-II 8080/8085 MACRO ASSEMBLER, V4.1         OPEN     PAGE    2


  LOC  OBJ         LINE        SOURCE STATEMENT

                     52 ; declare a$i$no$p address external;
                     53 ; declare a$lbuf$p address external;
                     54 ; declare a$pbuf$p address external;
                     55 ; declare direct DIRECT$T external;
                     56 ; declare direct$i$no address external;
                     57 ; declare pn(1) byte external;
                     58 ; abs$wr: procedure(block, buffer$ptr) external; declare block address, buffer$ptr address; end;
                     59 ; procedure(slot$number) external; declare slot$number byte; end;
                     60 ; attrib: procedure(file$ptr, swid, value) external;
                     61 ;           declare file$ptr address, swid address, value BOOLEAN; end;
                     62 ; ChkWriteProtect: procedure external; end;
                     63 ; ClearBuf: procedure(buf$address) external; declare buf$address address; end;
                     64 ; del: procedure(disknum) external; declare disknum byte; end;
                     65 ; dlook: procedure(fn) BOOLEAN external; declare fn address; end;
                     66 ; Get$Aft$Slot: procedure byte external; end;
                     67 ; get$block: procedure(diskNum) address external; declare diskNum byte; end;
                     68 ; get$buf: procedure address external; end;
                     69 ; MapWrite: procedure(diskNum) external; declare diskNum byte; end;
                     70 ; rewind: procedure external; end;
                     71 ; warn: procedure(errcode) external; declare errcode byte; end;
                     72 ; write: procedure(aftn, buffer, count) external; declare aftn byte, buffer address, count addre
                        ss; end;
                     73 ; WriteDirEntry: procedure external; end;
                     74 ; xpath: procedure(p1, p2) external; declare p1 address, p2 address; end;
                     75 ; declare a$access based a$access$p  byte;
                     76 ; declare a$blk$count based a$blk$count$p  address;
                     77 ; declare a$dbuf based a$dbuf$p  address;
                     78 ; declare a$device based a$dev$p  byte;
                     79 ; declare a$edit based a$edit$p  byte;
                     80 ; declare a$empty based a$empty$p  byte;
                     81 ; declare a$eof$data$ptr based a$eof$data$ptr$p  byte;
                     82 ; declare a$hdr$blk based a$hdr$blk$p  address;
                     83 ; declare a$i$no based a$i$no$p  address;
                     84 ; declare a$lbuf based a$lbuf$p  address;
                     85 ; declare a$pbuf based a$pbuf$p  address;
                     86         
                     87 ; supportedAccess(*) BYTE DATA(3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                     88 ;                      1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
                     89 ;                      2, 2, 2, 2, 2, 2, 3, 1, 2);
                     90 ; NB. data follows code         
                     91 
                     92 
                     93         name    OPEN
                     94         public  open
                     95 ; externals with aliased names
                     96         extrn   aAcesP, aBCntP, aEmtyP, aEoPP, AWindo
                     97         extrn   aHBlkP, CkWriP, ClrBuf, dirINo, GASlot
                     98         extrn   GetBlk, MapWri, WDirEn, absWr
                     99 ; externals with non aliased names
                    100         extrn   attrib, del, dlook, getBuf, rewind
                    101         extrn   warn, write, xpath
                    102         extrn   aDbufP, aDevP, aEditP, aft, aINoP
                    103         extrn   aLbufP, aPbufP, direct, pn
                    104 ; plm80lib
                    105         extrn @P0034, @P0097, @P0099


ISIS-II 8080/8085 MACRO ASSEMBLER, V4.1         OPEN     PAGE    3


  LOC  OBJ         LINE        SOURCE STATEMENT

                    106         extrn @P0100, @P0101, @P0103
                    107 
  0002              108 ACCESS  equ     2       ; offset of aft.access
  0001              109 DEVICE  equ     1       ; offset of aft.device
                    110 
                    111         CSEG
                    112 ; transfer$dir$aft: PROCEDURE;    /* copy data from directory to aft entry */
                    113 ;            ; PROC  TRANSFERDIRAFT
                    114 ;     a$eof$data$ptr = direct.eof$count;
  0000 2A0000   E   115 dr2aft: LHLD    AEOPP
  0003 3A0B00   E   116         LDA     DIRECT+0BH
  0006 77           117         MOV     M,A
                    118 ;     a$blk$count = direct.blk;
  0007 2A0000   E   119         LHLD    ABCNTP
                    120 ;       PUSH    H       optimised
  000A EB           121         xchg
  000B 2A0C00   E   122         LHLD    DIRECT+0CH
  000E EB           123         XCHG
                    124 ;       POP     H       optimised
  000F 73           125         MOV     M,E
  0010 23           126         INX     H
  0011 72           127         MOV     M,D
                    128 ; end;
  0012 C9           129         RET
                    130         
                    131 ; open: PROCEDURE(pathname, access$mode, lined$aft) BYTE PUBLIC;
                    132 ;            ; PROC  OPEN
  0013 214803   C   133 open:   LXI     H,LINEDA+1H
  0016 72           134         MOV     M,D
  0017 2B           135         DCX     H
  0018 73           136         MOV     M,E
  0019 2B           137         DCX     H
  001A 70           138         MOV     M,B
  001B 2B           139         DCX     H
  001C 71           140         MOV     M,C
  001D 2B           141         DCX     H
  001E D1           142         POP     D       
  001F C1           143         POP     B       
  0020 70           144         MOV     M,B
  0021 2B           145         DCX     H
  0022 71           146         MOV     M,C
  0023 D5           147         PUSH    D       
                    148 ;     DECLARE (pathname, access$mode, lined$aft) ADDRESS;
                    149 ;     DECLARE (aftn, reqAccess, found, temp, i, ival) BYTE;
                    150 ;     DECLARE temp$buf ADDRESS;
                    151 ;     DECLARE bytes BASED temp$buf (128) BYTE;
                    152 ;     DECLARE addr BASED temp$buf (64) ADDRESS;
                    153         
                    154         
                    155         
                    156         
                    157 ;     if access$mode > 3 or (reqAccess := access$mode) = 0 then
  0024 3E03         158         MVI     A,3H
  0026 214503   C   159         LXI     H,MODE
  0029 CD0000   E   160         CALL    @P0103 


ISIS-II 8080/8085 MACRO ASSEMBLER, V4.1         OPEN     PAGE    4


  LOC  OBJ         LINE        SOURCE STATEMENT

  002C 9F           161         SBB     A
  002D EB           162         XCHG
  002E 2B           163         DCX     H
  002F 4E           164         MOV     C,M
  0030 23           165         INX     H
  0031 46           166         MOV     B,M
  0032 214A03   C   167         LXI     H,REQACC
  0035 71           168         MOV     M,C
  0036 110000       169         LXI     D,0H
  0039 F5           170         PUSH    PSW
  003A CD0000   E   171         CALL    @P0097 
  003D B5           172         ORA     L
  003E D601         173         SUI     1
  0040 9F           174         SBB     A
  0041 C1           175         POP     B
  0042 48           176         MOV     C,B
  0043 B1           177         ORA     C
  0044 1F           178         RAR
  0045 D24D00   C   179         JNC     @1
                    180 ;         call warn(BAD$ACCESS);
  0048 0E16         181         MVI     C,16H
  004A CD0000   E   182         CALL    WARN
                    183 @1:
                    184 ;     call xpath(pathname, .pn);
  004D 2A4303   C   185         LHLD    PATHNM
  0050 44           186         MOV     B,H
  0051 4D           187         MOV     C,L
  0052 110000   E   188         LXI     D,PN
  0055 CD0000   E   189         CALL    XPATH
                    190 ;     if (i := supportedAccess(pn(0))) <> 3 then
  0058 2A0000   E   191         LHLD    PN
  005B 2600         192         MVI     H,0
  005D 012603   C   193         LXI     B,SUPACC
  0060 09           194         DAD     B
  0061 7E           195         MOV     A,M
  0062 324D03   C   196         STA     I
  0065 FE03         197         CPI     3H
  0067 CA7600   C   198         JZ      @2
                    199 ;         if i <> reqAccess then
  006A 214A03   C   200         LXI     H,REQACC
                    201 ;       LDA     I       optimised
  006D BE           202         CMP     M
  006E CA7600   C   203         JZ      @3
                    204 ;             call warn(BAD$ACCESS);
  0071 0E16         205         MVI     C,16H
  0073 CD0000   E   206         CALL    WARN
                    207 @3:
                    208 @2:
                    209 ;     if pn(0) = CIDEV then
  0076 3A0000   E   210         LDA     PN
  0079 FE1B         211         CPI     1BH
  007B C28100   C   212         JNZ     @4
                    213 ;         return CI$AFT;
  007E 3E01         214         MVI     A,1H
  0080 C9           215         RET


ISIS-II 8080/8085 MACRO ASSEMBLER, V4.1         OPEN     PAGE    5


  LOC  OBJ         LINE        SOURCE STATEMENT

                    216 @4:
                    217 ;     if pn(0) = CODEV then
                    218 ;       LDA     PN      optimised
  0081 FE1C         219         CPI     1CH
  0083 C28900   C   220         JNZ     @5
                    221 ;         return CO$AFT;
  0086 3E00         222         MVI     A,0H
  0088 C9           223         RET
                    224 @5:
                    225 ;     call aft$window(aftn := get$aft$slot);
  0089 CD0000   E   226         CALL    GASLOT
  008C 324903   C   227         STA     AFTN
  008F 4F           228         MOV     C,A
  0090 CD0000   E   229         CALL    AWINDO
                    230 ;     a$access = reqAccess;
  0093 2A0000   E   231         LHLD    AACESP
  0096 3A4A03   C   232         LDA     REQACC
  0099 77           233         MOV     M,A
                    234 ;     a$edit = 0;
  009A 2A0000   E   235         LHLD    AEDITP
  009D 3E00         236         mvi     a,0
                    237 ;       MVI     M,0H    optimised
  009F 77           238         mov     m,a
                    239 ;     if lined$aft <> 0 then
                    240 ;       MVI     A,0H    optimised
  00A0 114703   C   241         LXI     D,LINEDA
  00A3 CD0000   E   242         CALL    @P0101 
  00A6 B5           243         ORA     L
  00A7 CAE200   C   244         JZ      @6
                    245 ;     do;
                    246 ;         a$edit = AFT$BOTTOM + low(lined$aft);
  00AA 2A4703   C   247         LHLD    LINEDA
  00AD 7D           248         MOV     A,L
  00AE C60A         249         ADI     0AH
  00B0 2A0000   E   250         LHLD    AEDITP
  00B3 77           251         MOV     M,A
                    252 ;         if aft(a$edit).access <> 2 OR (reqAccess AND 1) = 0 then
                    253 ;       LHLD    AEDITP  optimised
  00B4 6E           254         MOV     L,M
  00B5 2600         255         MVI     H,0
  00B7 111C00       256         LXI     D,1CH
  00BA CD0000   E   257         CALL    @P0034 
  00BD 010000   E   258         LXI     B,AFT
  00C0 09           259         DAD     B
  00C1 010200       260         LXI     B,ACCESS
  00C4 09           261         DAD     B
  00C5 7E           262         MOV     A,M
  00C6 D602         263         SUI     2H
  00C8 C6FF         264         ADI     255
  00CA 9F           265         SBB     A
  00CB F5           266         PUSH    PSW     ; 1
  00CC 3A4A03   C   267         LDA     REQACC
  00CF E601         268         ANI     1H
  00D1 D600         269         SUI     0H
  00D3 D601         270         SUI     1


ISIS-II 8080/8085 MACRO ASSEMBLER, V4.1         OPEN     PAGE    6


  LOC  OBJ         LINE        SOURCE STATEMENT

  00D5 9F           271         SBB     A
  00D6 C1           272         POP     B       ; 1
  00D7 48           273         MOV     C,B
  00D8 B1           274         ORA     C
  00D9 1F           275         RAR
  00DA D2E200   C   276         JNC     @7
                    277 ;             call warn(BAD$ECHO);
  00DD 0E19         278         MVI     C,19H
  00DF CD0000   E   279         CALL    WARN
                    280 @7:
                    281 ;     end;
                    282 @6:
                    283 ;     if (a$device := pn(0)) <= F9DEV then
  00E2 2A0000   E   284         LHLD    ADEVP
  00E5 3A0000   E   285         LDA     PN
  00E8 77           286         MOV     M,A
  00E9 4F           287         MOV     C,A
  00EA 3E09         288         MVI     A,9H
  00EC B9           289         CMP     C
  00ED DA5E02   C   290         JC      @8
                    291 ;     do;
                    292 ;         found = dlook(.PN);
  00F0 010000   E   293         LXI     B,PN
  00F3 CD0000   E   294         CALL    DLOOK
  00F6 324B03   C   295         STA     FOUND
                    296 ;         if found then
                    297 ;       LDA     FOUND   optimised
  00F9 1F           298         RAR
  00FA D23F01   C   299         JNC     @9
                    300 ;             do i = AFT$BOTTOM TO AFT$LAST;
  00FD 214D03   C   301         LXI     H,I
  0100 360A         302         MVI     M,0AH
                    303 @27:
  0102 3E11         304         MVI     A,11H
                    305 ;       LXI     H,I     optimised
  0104 BE           306         CMP     M
  0105 DA3F01   C   307         JC      @28
                    308 ;                 call aft$window(i);
                    309 ;       LHLD    I       optimised
                    310 ;       MOV     C,L
  0108 4E           311         mov     c,m
  0109 CD0000   E   312         CALL    AWINDO
                    313 ;                 if not a$empty then
  010C 2A0000   E   314         LHLD    AEMTYP
  010F 7E           315         MOV     A,M
  0110 1F           316         RAR
  0111 DA3801   C   317         JC      @10
                    318 ;                     if a$i$no = direct$i$no and a$device = pn(0) then
  0114 2A0000   E   319         LHLD    AINOP
  0117 110000   E   320         LXI     D,DIRINO
  011A CD0000   E   321         CALL    @P0099 
  011D B5           322         ORA     L
  011E D601         323         SUI     1
  0120 9F           324         SBB     A
  0121 2A0000   E   325         LHLD    ADEVP


ISIS-II 8080/8085 MACRO ASSEMBLER, V4.1         OPEN     PAGE    7


  LOC  OBJ         LINE        SOURCE STATEMENT

  0124 F5           326         PUSH    PSW     ; 1
  0125 3A0000   E   327         LDA     PN
  0128 96           328         SUB     M
  0129 D601         329         SUI     1
  012B 9F           330         SBB     A
  012C C1           331         POP     B       ; 1
  012D 48           332         MOV     C,B
  012E A1           333         ANA     C
  012F 1F           334         RAR
  0130 D23801   C   335         JNC     @11
                    336 ;                         call warn(ALREADY$OPEN);
  0133 0E0C         337         MVI     C,0CH
  0135 CD0000   E   338         CALL    WARN
                    339 @11:
                    340 @10:
                    341 ;             end;
                    342 @29:
  0138 214D03   C   343         LXI     H,I
  013B 34           344         INR     M
  013C C20201   C   345         JNZ     @27
                    346 @28:
                    347 @9:
                    348 ;         call aft$window(aftn);
  013F 2A4903   C   349         LHLD    AFTN
  0142 4D           350         MOV     C,L
  0143 CD0000   E   351         CALL    AWINDO
                    352 ;         temp = 0;
  0146 214C03   C   353         LXI     H,TEMP
  0149 3600         354         MVI     M,0H
                    355 ;         a$i$no = direct$i$no;
  014B 2A0000   E   356         LHLD    AINOP
                    357 ;       PUSH    H       optimised
  014E EB           358         xchg
  014F 2A0000   E   359         LHLD    DIRINO
  0152 EB           360         XCHG
                    361 ;       POP     H       optimised
  0153 73           362         MOV     M,E
  0154 23           363         INX     H
  0155 72           364         MOV     M,D
                    365 ;         if reqAccess = 1 then
  0156 3A4A03   C   366         LDA     REQACC
  0159 FE01         367         CPI     1H
  015B C26D01   C   368         JNZ     @12
                    369 ;         do;
                    370 ;             if not found then
  015E 3A4B03   C   371         LDA     FOUND
  0161 1F           372         RAR
  0162 DA6A01   C   373         JC      @13
                    374 ;                 call warn(NO$SUCH$FILE);
  0165 0E0D         375         MVI     C,0DH
  0167 CD0000   E   376         CALL    WARN
                    377 @13:
                    378 ;         end;
  016A C39A01   C   379         JMP     @14
                    380 @12:


ISIS-II 8080/8085 MACRO ASSEMBLER, V4.1         OPEN     PAGE    8


  LOC  OBJ         LINE        SOURCE STATEMENT

                    381 ;         else
                    382 ;         do;
                    383 ;             if not found then
  016D 3A4B03   C   384         LDA     FOUND
  0170 1F           385         RAR
  0171 DA9401   C   386         JC      @15
                    387 ;             do;
                    388 ;                 if direct$i$no = 0ffffh then
  0174 01FFFF       389         LXI     B,0FFFFH
  0177 110000   E   390         LXI     D,DIRINO
  017A CD0000   E   391         CALL    @P0100 
  017D B5           392         ORA     L
  017E C28601   C   393         JNZ     @16
                    394 ;                     call warn(DIRECTORY$FULL);
  0181 0E09         395         MVI     C,9H
  0183 CD0000   E   396         CALL    WARN
                    397 @16:
                    398 ;                 direct.blk = 0;
  0186 210000       399         LXI     H,0H
  0189 220C00   E   400         SHLD    DIRECT+0CH
                    401 ;                 direct.eof$count = 128;
  018C 210B00   E   402         LXI     H,DIRECT+0BH
  018F 3680         403         MVI     M,80H
                    404 ;                 direct.attrib = 0;
  0191 2B           405         DCX     H
  0192 3600         406         MVI     M,0H
                    407 ;             end;
                    408 @15:
                    409 ;             call chk$write$protect;
  0194 CD0000   E   410         CALL    CKWRIP
                    411 ;             call transfer$dir$aft;
  0197 CD0000   C   412         CALL    DR2AFT
                    413 ;         end;
                    414 @14:
                    415 ;         a$hdr$blk = direct.hdr$blk;
  019A 2A0000   E   416         LHLD    AHBLKP
                    417 ;       PUSH    H       optimised
  019D EB           418         xchg
  019E 2A0E00   E   419         LHLD    DIRECT+0EH
  01A1 EB           420         XCHG
                    421 ;       POP     H       optimised
  01A2 73           422         MOV     M,E
  01A3 23           423         INX     H
  01A4 72           424         MOV     M,D
                    425 ;         a$dbuf = get$buf;
  01A5 CD0000   E   426         CALL    GETBUF
  01A8 E5           427         PUSH    H       ; 1
  01A9 2A0000   E   428         LHLD    ADBUFP
  01AC C1           429         POP     B       ; 1
  01AD 71           430         MOV     M,C
  01AE 23           431         INX     H
  01AF 70           432         MOV     M,B
                    433 ;         a$pbuf = get$buf;
  01B0 CD0000   E   434         CALL    GETBUF
  01B3 E5           435         PUSH    H       ; 1


ISIS-II 8080/8085 MACRO ASSEMBLER, V4.1         OPEN     PAGE    9


  LOC  OBJ         LINE        SOURCE STATEMENT

  01B4 2A0000   E   436         LHLD    APBUFP
  01B7 C1           437         POP     B       ; 1
  01B8 71           438         MOV     M,C
  01B9 23           439         INX     H
  01BA 70           440         MOV     M,B
                    441 ;         if reqAccess = 2 and found then
  01BB 3A4A03   C   442         LDA     REQACC
  01BE D602         443         SUI     2H
  01C0 D601         444         SUI     1
  01C2 9F           445         SBB     A
  01C3 214B03   C   446         LXI     H,FOUND
  01C6 A6           447         ANA     M
  01C7 1F           448         RAR
  01C8 D2E401   C   449         JNC     @17
                    450 ;         do;
                    451 ;             call del(a$device);
  01CB 2A0000   E   452         LHLD    ADEVP
  01CE 4E           453         MOV     C,M
  01CF CD0000   E   454         CALL    DEL
                    455 ;             call aft$window(aftn);
  01D2 2A4903   C   456         LHLD    AFTN
  01D5 4D           457         MOV     C,L
  01D6 CD0000   E   458         CALL    AWINDO
                    459 ;             direct.blk = 0;
  01D9 210000       460         LXI     H,0H
  01DC 220C00   E   461         SHLD    DIRECT+0CH
                    462 ;             direct.eof$count = 128;
  01DF 210B00   E   463         LXI     H,DIRECT+0BH
  01E2 3680         464         MVI     M,80H
                    465 ;         end;
                    466 @17:
                    467 ;         call transfer$dir$aft;
  01E4 CD0000   C   468         CALL    DR2AFT
                    469 ;         ival = input(0fch);
  01E7 DBFC         470         IN      0FCH
  01E9 324E03   C   471         STA     IVAL
                    472 ;         output(0fch) = ival OR 2;
  01EC F602         473         ORI     2H
  01EE D3FC         474         OUT     0FCH
                    475 ;         if reqAccess <> 1 then  /* not read only */
  01F0 3A4A03   C   476         LDA     REQACC
  01F3 FE01         477         CPI     1H
  01F5 CA2402   C   478         JZ      @18
                    479 ;         do;
                    480 ;             if (temp := not (reqAccess = 3 and found)) then
  01F8 3A4A03   C   481         LDA     REQACC
  01FB D603         482         SUI     3H
  01FD D601         483         SUI     1
  01FF 9F           484         SBB     A
  0200 214B03   C   485         LXI     H,FOUND
  0203 A6           486         ANA     M
  0204 2F           487         CMA
  0205 23           488         INX     H
  0206 77           489         MOV     M,A
  0207 1F           490         RAR


ISIS-II 8080/8085 MACRO ASSEMBLER, V4.1         OPEN     PAGE   10


  LOC  OBJ         LINE        SOURCE STATEMENT

  0208 D21C02   C   491         JNC     @19
                    492 ;             do;
                    493 ;                 direct.hdr$blk = get$block(a$device);
  020B 2A0000   E   494         LHLD    ADEVP
  020E 4E           495         MOV     C,M
  020F CD0000   E   496         CALL    GETBLK
  0212 220E00   E   497         SHLD    DIRECT+0EH
                    498 ;                 a$hdr$blk = direct.hdr$blk;
  0215 EB           499         xchg            ; optimisation for code below
  0216 2A0000   E   500         LHLD    AHBLKP
                    501 ;       PUSH    H       optimised by xchg above
                    502 ;       LHLD    DIRECT+0EH
                    503 ;       XCHG
                    504 ;       POP     H
  0219 73           505         MOV     M,E
  021A 23           506         INX     H
  021B 72           507         MOV     M,D
                    508 ;             end;
                    509 @19:
                    510 ;             direct.empty = 0;
  021C 210000   E   511         LXI     H,DIRECT
  021F 3600         512         MVI     M,0H
                    513 ;             call write$dir$entry;
  0221 CD0000   E   514         CALL    WDIREN
                    515 ;         end;
                    516 @18:
                    517 ;         call aft$window(aftn);
  0224 2A4903   C   518         LHLD    AFTN
                    519 ; LER                                                                                           
                             PAGE  11
                    520 
                    521 
  0227 4D           522         MOV     C,L
  0228 CD0000   E   523         CALL    AWINDO
                    524 ;         call rewind;
  022B CD0000   E   525         CALL    REWIND
                    526 ;         if temp then    /* not update + new file */
  022E 3A4C03   C   527         LDA     TEMP
  0231 1F           528         RAR
  0232 D25602   C   529         JNC     @20
                    530 ;         do;
                    531 ;             call clear$buf(a$pbuf);
  0235 2A0000   E   532         LHLD    APBUFP
  0238 4E           533         MOV     C,M
  0239 23           534         INX     H
  023A 46           535         MOV     B,M
  023B CD0000   E   536         CALL    CLRBUF
                    537 ;             call map$write(a$device);
  023E 2A0000   E   538         LHLD    ADEVP
  0241 4E           539         MOV     C,M
  0242 CD0000   E   540         CALL    MAPWRI
                    541 ;             call abswrite(a$hdr$blk, a$pbuf);
  0245 2A0000   E   542         LHLD    AHBLKP
  0248 E5           543         PUSH    H
  0249 2A0000   E   544         LHLD    APBUFP


ISIS-II 8080/8085 MACRO ASSEMBLER, V4.1         OPEN     PAGE   11


  LOC  OBJ         LINE        SOURCE STATEMENT

  024C 5E           545         MOV     E,M
  024D 23           546         INX     H
  024E 56           547         MOV     D,M
  024F E1           548         POP     H
  0250 4E           549         MOV     C,M
  0251 23           550         INX     H
  0252 46           551         MOV     B,M
  0253 CD0000   E   552         CALL    ABSWR
                    553 ;         end;
                    554 @20:
                    555 ;         output(0FCh) = ival;
  0256 3A4E03   C   556         LDA     IVAL
  0259 D3FC         557         OUT     0FCH
                    558 ;     end;
  025B C3E602   C   559         JMP     @21
                    560 @8:
                    561 ;     else if a$device <> BBDEV then
  025E 2A0000   E   562         LHLD    ADEVP
  0261 7E           563         MOV     A,M
  0262 FE1A         564         CPI     1AH
  0264 CAE602   C   565         JZ      @22
                    566 ;     do;
                    567 ;         do i = AFT$BOTTOM to AFT$LAST;
  0267 214D03   C   568         LXI     H,I
  026A 360A         569         MVI     M,0AH
                    570 @30:
  026C 3E11         571         MVI     A,11H
                    572 ;       LXI     H,I     optimisation
  026E BE           573         CMP     M
  026F DAAD02   C   574         JC      @31
                    575 ;             if not aft(i).empty then
  0272 6E           576         mov     l,m     ; optimisation
  0273 2600         577         mvi     h,0     ; reordering
  0275 111C00       578         LXI     D,1CH
                    579 ;       LHLD    I
                    580 ;       MVI     H,0     optmisation and minor reorder
  0278 CD0000   E   581         CALL    @P0034 
  027B 010000   E   582         LXI     B,AFT
  027E 09           583         DAD     B
  027F 7E           584         MOV     A,M
  0280 1F           585         RAR
  0281 DAA602   C   586         JC      @23
                    587 ;                 if a$device = aft(i).device then
  0284 2A0000   E   588         LHLD    ADEVP
  0287 111C00       589         LXI     D,1CH
  028A E5           590         PUSH    H
  028B 2A4D03   C   591         LHLD    I
  028E 2600         592         MVI     H,0
  0290 CD0000   E   593         CALL    @P0034 
  0293 010000   E   594         LXI     B,AFT
  0296 09           595         DAD     B
  0297 010100       596         LXI     B,DEVICE
  029A 09           597         DAD     B
  029B C1           598         POP     B
  029C 0A           599         LDAX    B


ISIS-II 8080/8085 MACRO ASSEMBLER, V4.1         OPEN     PAGE   12


  LOC  OBJ         LINE        SOURCE STATEMENT

  029D BE           600         CMP     M
  029E C2A602   C   601         JNZ     @24
                    602 ;                     call warn(ALREADY$OPEN);
  02A1 0E0C         603         MVI     C,0CH
  02A3 CD0000   E   604         CALL    WARN
                    605 @24:
                    606 @23:
                    607 ;         end;
                    608 @32:
  02A6 214D03   C   609         LXI     H,I
  02A9 34           610         INR     M
  02AA C26C02   C   611         JNZ     @30
                    612 @31:
                    613 ;         if a$device >= 14h and a$device <= 17h then
  02AD 2A0000   E   614         LHLD    ADEVP
  02B0 7E           615         MOV     A,M
  02B1 D614         616         SUI     14H
  02B3 9F           617         SBB     A
  02B4 2F           618         CMA
  02B5 F5           619         PUSH    PSW
  02B6 3E17         620         MVI     A,17H
  02B8 96           621         SUB     M
  02B9 9F           622         SBB     A
  02BA 2F           623         CMA
  02BB C1           624         POP     B
  02BC 48           625         MOV     C,B
  02BD A1           626         ANA     C
  02BE 1F           627         RAR
  02BF D2E602   C   628         JNC     @25
                    629 ;             do i = 1 to 120;
  02C2 214D03   C   630         LXI     H,I
  02C5 3601         631         MVI     M,1H
                    632 @33:
  02C7 3E78         633         MVI     A,78H
                    634 ;       LXI     H,I     optimisation
  02C9 BE           635         CMP     M
  02CA DAE602   C   636         JC      @34
                    637 ;                 a$empty = FALSE;
  02CD 2A0000   E   638         LHLD    AEMTYP
  02D0 3600         639         MVI     M,0H
                    640 ;                 call write(aftn, .(0), 1);
  02D2 2A4903   C   641         LHLD    AFTN
  02D5 E5           642         PUSH    H
  02D6 110100       643         LXI     D,1H
  02D9 015103   C   644         LXI     B,zero
  02DC CD0000   E   645         CALL    WRITE
                    646 ;             end;
                    647 @35:
  02DF 214D03   C   648         LXI     H,I
  02E2 34           649         INR     M
  02E3 C2C702   C   650         JNZ     @33
                    651 @34:
                    652 @25:
                    653 ;     end;
                    654 @22:


ISIS-II 8080/8085 MACRO ASSEMBLER, V4.1         OPEN     PAGE   13


  LOC  OBJ         LINE        SOURCE STATEMENT

                    655 @21:
                    656 ;     if lined$aft <> 0 then
  02E6 3E00         657         MVI     A,0H
  02E8 114703   C   658         LXI     D,LINEDA
  02EB CD0000   E   659         CALL    @P0101 
  02EE B5           660         ORA     L
  02EF CA1B03   C   661         JZ      @26
                    662 ;     do;
                    663 ;         temp$buf, a$lbuf = get$buf;
  02F2 CD0000   E   664         CALL    GETBUF
  02F5 224F03   C   665         SHLD    TMPBUF
  02F8 E5           666         PUSH    H 
  02F9 2A0000   E   667         LHLD    ALBUFP
  02FC C1           668         POP     B
  02FD 71           669         MOV     M,C
  02FE 23           670         INX     H
  02FF 70           671         MOV     M,B
                    672 ;         bytes(0) = LF;
  0300 2A4F03   C   673         LHLD    TMPBUF
  0303 360A         674         MVI     M,0AH
                    675 ;         addr(63) = 0ff00h;
  0305 017E00       676         LXI     B,7EH
  0308 2A4F03   C   677         LHLD    TMPBUF
  030B 09           678         DAD     B
  030C 0100FF       679         LXI     B,0FF00H
  030F 71           680         MOV     M,C
  0310 23           681         INX     H
  0311 70           682         MOV     M,B
                    683 ;         bytes(125) = TRUE;
  0312 017D00       684         LXI     B,7DH
  0315 2A4F03   C   685         LHLD    TMPBUF
  0318 09           686         DAD     B
  0319 36FF         687         MVI     M,0FFH
                    688 ;     end;
                    689 @26:
                    690 ;     a$empty = FALSE;
  031B 2A0000   E   691         LHLD    AEMTYP
  031E 3600         692         MVI     M,0H
                    693 ;     return aftn - AFT$BOTTOM;
  0320 3A4903   C   694         LDA     AFTN
  0323 D60A         695         SUI     0AH
  0325 C9           696         RET
                    697 ; end;
                    698 ; end;
  0326 03           699 supAcc: db 3, 3, 3, 3, 3, 3, 3, 3       ; supportedAccess
  0327 03              
  0328 03              
  0329 03              
  032A 03              
  032B 03              
  032C 03              
  032D 03              
  032E 03           700         db 3, 3, 1, 2, 1, 2, 1, 2
  032F 03              
  0330 01              


ISIS-II 8080/8085 MACRO ASSEMBLER, V4.1         OPEN     PAGE   14


  LOC  OBJ         LINE        SOURCE STATEMENT

  0331 02              
  0332 01              
  0333 02              
  0334 01              
  0335 02              
  0336 01           701         db 1, 1, 1, 1, 2, 2, 2, 2
  0337 01              
  0338 01              
  0339 01              
  033A 02              
  033B 02              
  033C 02              
  033D 02              
  033E 02           702         db 2, 2, 3, 1, 2
  033F 02              
  0340 03              
  0341 01              
  0342 02              
  0343 0000         703 pathNm: dw 0                    ; open arguments pathname
  0345 0000         704 mode:   dw 0                    ; access$mode
  0347 0000         705 linedA: dw 0                    ; lined$aft
  0349              706 aftn:   ds 1                    ; open local vars
  034A              707 reqAcc: ds 1
  034B              708 found:  ds 1
  034C              709 temp:   ds 1
  034D              710 i:      ds 1
  034E              711 ival:   ds 1
  034F 0000         712 tmpBuf: dw 0
  0351 0000         713 zero:   dw 0                    ; 0 used in call to write
                    714 
                    715         end;


PUBLIC SYMBOLS
OPEN   C 0013    

EXTERNAL SYMBOLS
@P0034 E 0000    @P0097 E 0000    @P0099 E 0000    @P0100 E 0000    @P0101 E 0000    @P0103 E 0000    AACESP E 0000    
ABCNTP E 0000    ABSWR  E 0000    ADBUFP E 0000    ADEVP  E 0000    AEDITP E 0000    AEMTYP E 0000    AEOPP  E 0000    
AFT    E 0000    AHBLKP E 0000    AINOP  E 0000    ALBUFP E 0000    APBUFP E 0000    ATTRIB E 0000    AWINDO E 0000    
CKWRIP E 0000    CLRBUF E 0000    DEL    E 0000    DIRECT E 0000    DIRINO E 0000    DLOOK  E 0000    GASLOT E 0000    
GETBLK E 0000    GETBUF E 0000    MAPWRI E 0000    PN     E 0000    REWIND E 0000    WARN   E 0000    WDIREN E 0000    
WRITE  E 0000    XPATH  E 0000    

USER SYMBOLS
@1     C 004D    @10    C 0138    @11    C 0138    @12    C 016D    @13    C 016A    @14    C 019A    @15    C 0194    
@16    C 0186    @17    C 01E4    @18    C 0224    @19    C 021C    @2     C 0076    @20    C 0256    @21    C 02E6    
@22    C 02E6    @23    C 02A6    @24    C 02A6    @25    C 02E6    @26    C 031B    @27    C 0102    @28    C 013F    
@29    C 0138    @3     C 0076    @30    C 026C    @31    C 02AD    @32    C 02A6    @33    C 02C7    @34    C 02E6    
@35    C 02DF    @4     C 0081    @5     C 0089    @6     C 00E2    @7     C 00E2    @8     C 025E    @9     C 013F    
@P0034 E 0000    @P0097 E 0000    @P0099 E 0000    @P0100 E 0000    @P0101 E 0000    @P0103 E 0000    AACESP E 0000    
ABCNTP E 0000    ABSWR  E 0000    ACCESS A 0002    ADBUFP E 0000    ADEVP  E 0000    AEDITP E 0000    AEMTYP E 0000    
AEOPP  E 0000    AFT    E 0000    AFTN   C 0349    AHBLKP E 0000    AINOP  E 0000    ALBUFP E 0000    APBUFP E 0000    
ATTRIB E 0000    AWINDO E 0000    CKWRIP E 0000    CLRBUF E 0000    DEL    E 0000    DEVICE A 0001    DIRECT E 0000    
DIRINO E 0000    DLOOK  E 0000    DR2AFT C 0000    FOUND  C 034B    GASLOT E 0000    GETBLK E 0000    GETBUF E 0000    


ISIS-II 8080/8085 MACRO ASSEMBLER, V4.1         OPEN     PAGE   15


I      C 034D    IVAL   C 034E    LINEDA C 0347    MAPWRI E 0000    MODE   C 0345    OPEN   C 0013    PATHNM C 0343    
PN     E 0000    REQACC C 034A    REWIND E 0000    SUPACC C 0326    TEMP   C 034C    TMPBUF C 034F    WARN   E 0000    
WDIREN E 0000    WRITE  E 0000    XPATH  E 0000    ZERO   C 0351    

ASSEMBLY COMPLETE,   NO ERRORS
