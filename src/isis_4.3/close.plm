close:
do;
$include(close.ipx)



DECLARE	caseMap(*) BYTE DATA (0,0,0,0,0,0,0,0,0,0,	/* F0-F9 */
			      1,2,1,2,1,2,1,1,1,1,	/* TI, TO, VI, VO, I1, O1, TR, HR, T1, T2 */
			      3,3,3,3,4,4,1,1,1);	/* TP, HP, P1, P2, LP, L1, BB, CI, CO */

DECLARE	t$blk	ADDRESS,
	t$eof	BYTE,
	zero	ADDRESS INITIAL(0),
	bytes	ADDRESS INITIAL(0);

close: PROCEDURE(aftn) PUBLIC;
	DECLARE aftn BYTE;
	DECLARE i ADDRESS;

	call aft$window(aftn);
	if a$empty then
		return;
	if a$edit <> 0 then
		call return$buf(a$lbuf);
	do case caseMap(a$device);
		do;	/* 0 - disk */
			call save$data$blk;
			call save$pointer$block;
			call return$buf(a$pbuf);
			call return$buf(a$dbuf);
			if a$access >= 2 then
			do;
				call adjust$eof;
				t$eof = a$eof$data$ptr;
				t$blk = a$blk$count;
				bytes = a$i$no * 16;
				call map$write(a$device);
				aft(a$device).dbuf = a$dbuf;		/* let device use returned buffers */
				aft(a$device).pbuf = a$pbuf;
				call aft$window(a$device);
				call rewind;		/* get to dir header */
				call seek(a$device, SEEK$ABS, .zero, .bytes);	/* seek to file entry */
				call read(a$device, .direct, 16, .i);		/* read the dir entry */
				direct.eof$count = t$eof;
				direct.blk = t$blk;
				a$data$ptr = a$data$ptr - DOUBLE(16);
				call dir$close(a$device);
			end;
		end;
		;	/* 1 */
		;	/* 2 */
		do i = 0 to 119;	/* 3 output 120 nulls */
			call write(aftn, .(0), 1);
		end;
		;	/* 4 */
	end;
	aft(aftn).empty = TRUE;
end;	
end;
eof
