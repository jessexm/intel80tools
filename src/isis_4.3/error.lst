:F1:asm80 error.asm print(error.lst) object(error.obj) DEBUG



ISIS-II 8080/8085 MACRO ASSEMBLER, V4.1         ERROR    PAGE    1


  LOC  OBJ         LINE        SOURCE STATEMENT

                      1 ; the original code in error.plm appears to have been hand optimised.
                      2 ; the code below contains the plm code and the optimised asm
                      3 
                      4 ; declare ABORT literally '2';
                      5 ; declare CMSK literally '0fch';
                      6 ; declare CR literally '0dh';
                      7 ; declare DISK$IO$ERROR literally '24';
                      8 ; declare debug$Toggle literally 'dTogle';
                      9 ; declare global$severity literally 'gblSev';
                     10 ; declare LF literally '0ah';
                     11 ; declare userStatus$p literally 'uStatP';
                     12 ; declare WARNING literally '0';
                     13 ; declare isis$E byte external;
                     14 ; declare sector byte external;
                     15 ; declare track byte external;
                     16 ; declare usrSP address external;
                     17 ; declare uStatP address external;
                     18 ; CO: procedure(val) external; declare val byte; end;
                     19 ; IOCHK: procedure byte external; end;
                     20 ; IOSET: procedure(val) external; declare val byte; end;
                     21 ; reboot: procedure external; end;
                     22 ; trap: procedure external; end;
                     23 ; declare userStatus based userStatus$p  address;
                     24 
                     25         name error
                     26         public dTogle, gblSev, cdksat, err, warn, abortx, errDrv
                     27         extrn isisE, sector, track, usrSP, uStatP
                     28         extrn CO, IOCHK, IOSET, reboot, trap
                     29 
  0002               30 ABORT   equ     2
  0000               31 WARNIN  equ     0
  000D               32 CR      equ     0dh
  000A               33 LF      equ     0ah        
                     34         
                     35 ; DECLARE pad ADDRESS,    /* padding to align to isis.bin */
                     36 ;         debug$Toggle BYTE PUBLIC,
                     37 ;         global$severity BYTE PUBLIC,
                     38 ;         c$dk$sat ADDRESS PUBLIC;
                     39         
                     40 ; DECLARE msg1(7) BYTE INITIAL(CR, LF, 'ERROR'),
                     41 ;         msg2(4) BYTE, /* error number goes here */
                     42 ;         msg3(9) BYTE INITIAL(' USER PC '),
                     43 ;         msg4(4) BYTE, /* user pc in hex goes here */
                     44 ;         msg5(9) BYTE INITIAL(CR, LF, 'STATUS='),
                     45 ;         msg6(4) BYTE, /* drive status goes here */
                     46 ;         msg7(5) BYTE INITIAL(CR, LF, 'D= '),
                     47 ;         errdrv  BYTE PUBLIC, /* drive goes here */
                     48 ;         msg9(3) BYTE INITIAL(' T='),
                     49 ;         msg10(1) BYTE,  /* track goes here */
                     50 ;         msg11(3) BYTE INITIAL('   '),
                     51 ;         msg12(3) BYTE INITIAL(' S='),
                     52 ;         msg13(1) BYTE,  /* sector goes here */
                     53 ;         msg14(5) BYTE INITIAL('   ', CR, LF);
                     54 ; DECLARE initio BYTE AT (6);


ISIS-II 8080/8085 MACRO ASSEMBLER, V4.1         ERROR    PAGE    2


  LOC  OBJ         LINE        SOURCE STATEMENT

  0006               55 initio  equ     6
                     56 
                     57         DSEG
  0000               58 pad:    ds 2
  0002               59 dTogle: ds 1
  0003               60 gblSev: ds 1
  0004               61 cdksat: ds 2
                     62 
  0006 0D            63 msg1:   db CR, LF, 'ERROR'
  0007 0A              
  0008 4552524F        
  000C 52        
  000D               64 msg2:   ds 4
  0011 20555345      65 msg3:   db ' USER PC '
  0015 52205043  
  0019 20        
  001A               66 msg4:   ds 4
  001E 0D            67 msg5:   db CR, LF, 'STATUS='
  001F 0A              
  0020 53544154        
  0024 55533D    
  0027               68 msg6:   ds 4
  002B 0D            69 msg7:   db CR, LF, 'D= '
  002C 0A              
  002D 443D20          
  0030               70 errdrv: ds 1
  0031 20543D        71 msg9:   db ' T='
  0034               72 msg10:  ds 1
  0035 202020        73 msg11:  db '   '
  0038 20533D        74 msg12:  db ' S='
  003B               75 msg13:  ds 1
  003C 202020        76 msg14:  db '   ', CR, LF
  003F 0D              
  0040 0A              
                     77         
                     78 
                     79 
                     80         extrn   @P0014, @P0029, @P0035, @P0094, @P0102
                     81 
                     82         CSEG
  0000               83 severe: ds      1       ; err arguments
  0001               84 errtyp: ds      1
  0002               85 imax:   ds      1       ; err var
                     86 
  0003 0000          87 value:  dw      0       ; num arguments
  0005               88 base:   ds      1
  0006 0000          89 bufp:   dw      0
  0008 0000          90 div:    dw      0       ; num vars
  000A 0000          91 digit:  dw      0
                     92 j:                      ; shared var
  000C               93 i:      ds      1
  000D               94 offset: ds      1               
                     95 
                     96 ; num: PROCEDURE(value, base, bufp);
  000E 210700   C    97 num:    LXI     H,BUFP+1H


ISIS-II 8080/8085 MACRO ASSEMBLER, V4.1         ERROR    PAGE    3


  LOC  OBJ         LINE        SOURCE STATEMENT

  0011 72            98         MOV     M,D
  0012 2B            99         DCX     H
  0013 73           100         MOV     M,E
  0014 2B           101         DCX     H
  0015 71           102         MOV     M,C
  0016 2B           103         DCX     H
  0017 D1           104         POP     D       
  0018 C1           105         POP     B       
  0019 70           106         MOV     M,B
  001A 2B           107         DCX     H
  001B 71           108         MOV     M,C
  001C D5           109         PUSH    D       
                    110 ; DECLARE value ADDRESS, base BYTE, bufp ADDRESS;
                    111 ; DECLARE buf based bufp (4) BYTE;
                    112 ; DECLARE (div, digit) ADDRESS, (i, offset) BYTE;
                    113 ; do i = 1 to 4;
  001D 210C00   C   114         LXI     H,I
  0020 3601         115         MVI     M,1H
                    116 @11:
  0022 3E04         117         MVI     A,4H
                    118 ;       LXI     H,I     ; optimised
  0024 BE           119         CMP     M
  0025 DA7A00   C   120         JC      @12
                    121 ;   offset = '0';
  0028 210D00   C   122         LXI     H,OFFSET
  002B 3630         123         MVI     M,30H
                    124 ; div = value / base;
  002D 2A0300   C   125         LHLD    VALUE
  0030 EB           126         XCHG
  0031 2A0500   C   127         LHLD    BASE
  0034 2600         128         MVI     H,0
  0036 CD0000   E   129         CALL    @P0029 
  0039 EB           130         XCHG
  003A 220800   C   131         SHLD    DIV
                    132 ; digit = value - div * base;
  003D EB           133         XCHG
  003E CD0000   E   134         CALL    @P0035 
  0041 110300   C   135         LXI     D,VALUE
  0044 CD0000   E   136         CALL    @P0102 
  0047 220A00   C   137         SHLD    DIGIT
                    138 ;   if digit > 9 then
  004A 3E09         139         MVI     A,9H
  004C CD0000   E   140         CALL    @P0094 
  004F D25700   C   141         JNC     @1
                    142 ;     offset = '7';
  0052 210D00   C   143         LXI     H,OFFSET
  0055 3637         144         MVI     M,37H
                    145 @1:
                    146 ;   buf(4 - i) = digit + offset;
  0057 3A0D00   C   147         LDA     OFFSET
  005A 110A00   C   148         LXI     D,DIGIT
  005D CD0000   E   149         CALL    @P0014 
  0060 EB           150         XCHG
  0061 3E04         151         MVI     A,4H
  0063 23           152         INX     H


ISIS-II 8080/8085 MACRO ASSEMBLER, V4.1         ERROR    PAGE    4


  LOC  OBJ         LINE        SOURCE STATEMENT

  0064 96           153         SUB     M
  0065 4F           154         MOV     C,A
  0066 0600         155         MVI     B,0
  0068 2A0600   C   156         LHLD    BUFP
  006B 09           157         DAD     B
  006C 73           158         MOV     M,E
                    159 ;   value = div;
  006D 2A0800   C   160         LHLD    DIV
  0070 220300   C   161         SHLD    VALUE
                    162 ; end;
                    163 @13:
  0073 210C00   C   164         LXI     H,I
  0076 34           165         INR     M
  0077 C22200   C   166         JNZ     @11
                    167 @12:
                    168 ; do i = 0 to 2;
                    169 ;       LXI     H,I     optimised
  007A 3600         170         MVI     M,0H
                    171 @14:
  007C 3E02         172         MVI     A,2H
                    173 ;       LXI     H,I     optimised
  007E BE           174         CMP     M
  007F DA9D00   C   175         JC      @15
                    176 ;   if buf(i) = '0' then
                    177 ;       LHLD    I       optimised
  0082 6E           178         mov     l,m
  0083 2600         179         MVI     H,0
  0085 EB           180         XCHG
  0086 2A0600   C   181         LHLD    BUFP
  0089 19           182         DAD     D
  008A 7E           183         MOV     A,M
  008B FE30         184         CPI     30H
  008D C29500   C   185         JNZ     @2
                    186 ;     buf(i) = ' ';
                    187 ;       LHLD    I       optimised
                    188 ;       MVI     H,0
                    189 ;       XCHG
                    190 ;       LHLD    BUFP
                    191 ;       DAD     D
  0090 3620         192         MVI     M,20H
  0092 C39600   C   193         JMP     @3
                    194 @2:
                    195 ;   else
                    196 ;     return;
  0095 C9           197         RET
                    198 @3:
                    199 ; end;
                    200 @16:
  0096 210C00   C   201         LXI     H,I
  0099 34           202         INR     M
  009A C27C00   C   203         JNZ     @14
                    204 @15:
                    205 ; end;
  009D C9           206         RET
                    207         


ISIS-II 8080/8085 MACRO ASSEMBLER, V4.1         ERROR    PAGE    5


  LOC  OBJ         LINE        SOURCE STATEMENT

                    208         
                    209 ; err: PROCEDURE(severity, error$type) PUBLIC;
  009E 210100   C   210 err:    LXI     H,ERRTYP
  00A1 73           211         MOV     M,E
  00A2 2B           212         DCX     H
  00A3 71           213         MOV     M,C
                    214 ; DECLARE (severity, error$type, j, imax) BYTE;
                    215 ; DECLARE pc BASED usrSP ADDRESS;
                    216         
                    217 ; if (severity := severity or global$severity) <> WARNING then 
  00A4 3A0300   D   218         LDA     GBLSEV
  00A7 210000   C   219         LXI     H,SEVERE
  00AA B6           220         ORA     M
  00AB 77           221         MOV     M,A
  00AC FE00         222         CPI     0H
  00AE CA4F01   C   223         JZ      @4
                    224 ; do;
                    225 ;   call num(error$type, 10, .msg2);
  00B1 2A0100   C   226         LHLD    ERRTYP
  00B4 2600         227         MVI     H,0
  00B6 E5           228         PUSH    H 
  00B7 110D00   D   229         LXI     D,MSG2
  00BA 0E0A         230         MVI     C,0AH
  00BC CD0E00   C   231         CALL    NUM
                    232 ;   call num(pc, 16, .msg4);    
  00BF 2A0000   E   233         LHLD    USRSP
  00C2 4E           234         MOV     C,M
  00C3 23           235         INX     H
  00C4 46           236         MOV     B,M
  00C5 C5           237         PUSH    B 
  00C6 111A00   D   238         LXI     D,MSG4
  00C9 0E10         239         MVI     C,10H
  00CB CD0E00   C   240         CALL    NUM
                    241 ;   call ioset((iochk AND CMSK) OR (initio AND 3));
  00CE CD0000   E   242         CALL    IOCHK
  00D1 E6FC         243         ANI     0FCH
  00D3 F5           244         PUSH    PSW 
  00D4 3A0600       245         LDA     INITIO
  00D7 E603         246         ANI     3H
  00D9 C1           247         POP     B 
  00DA 48           248         MOV     C,B
  00DB B1           249         ORA     C
  00DC 4F           250         MOV     C,A
  00DD CD0000   E   251         CALL    IOSET
                    252 ;   imax = 25;  /* number of characters in normal error message */
  00E0 210200   C   253         LXI     H,IMAX
  00E3 3619         254         MVI     M,19H
                    255 ;   if error$type = DISK$IO$ERROR then
  00E5 3A0100   C   256         LDA     ERRTYP
  00E8 FE18         257         CPI     18H
  00EA C22E01   C   258         JNZ     @5
                    259 ;   do;
                    260 ;     if high(c$dk$sat) <> 0 then
  00ED 2A0400   D   261         LHLD    CDKSAT
  00F0 7C           262         MOV     A,H


ISIS-II 8080/8085 MACRO ASSEMBLER, V4.1         ERROR    PAGE    6


  LOC  OBJ         LINE        SOURCE STATEMENT

  00F1 FE00         263         CPI     0H
  00F3 CAFC00   C   264         JZ      @6
                    265 ;     c$dk$sat = 128;
  00F6 218000       266         LXI     H,80H
  00F9 220400   D   267         SHLD    CDKSAT
                    268 @6:
  00FC E5           269         push    h       ; optimised LHLD CDKSAT below
                    270 ;     imax = 58;
  00FD 210200   C   271         LXI     H,IMAX
  0100 363A         272         MVI     M,3AH
                    273 ;     call num(c$dk$sat, 16, .msg6);
                    274 ;       LHLD    CDKSAT  ; optimised see above
                    275 ;       PUSH    H
  0102 112700   D   276         LXI     D,MSG6
  0105 0E10         277         MVI     C,10H
  0107 CD0E00   C   278         CALL    NUM
                    279 ;     errdrv = errdrv or '0'; /* convert drive to ascii number */
  010A 3A3000   D   280         LDA     ERRDRV
  010D F630         281         ORI     30H
  010F 323000   D   282         STA     ERRDRV
                    283 ;     call num(track, 10, .msg10);
  0112 2A0000   E   284         LHLD    TRACK
  0115 2600         285         MVI     H,0
  0117 E5           286         PUSH    H       ; 1
  0118 113400   D   287         LXI     D,MSG10
  011B 0E0A         288         MVI     C,0AH
  011D CD0E00   C   289         CALL    NUM
                    290 ;     call num(sector, 10, .msg13);
  0120 2A0000   E   291         LHLD    SECTOR
  0123 2600         292         MVI     H,0
  0125 E5           293         PUSH    H       ; 1
  0126 113B00   D   294         LXI     D,MSG13
  0129 0E0A         295         MVI     C,0AH
  012B CD0E00   C   296         CALL    NUM
                    297 ; end;
                    298 @5:
                    299 ;   do j = 0 to imax;
  012E 210C00   C   300         LXI     H,J
  0131 3600         301         MVI     M,0H
                    302 @17:
  0133 3A0200   C   303         LDA     IMAX
                    304 ;       LXI     H,J     optimised
  0136 BE           305         CMP     M
  0137 DA4C01   C   306         JC      @18
                    307 ;     call co(msg1(j));
                    308 ;       LHLD    J       optimised
  013A 6E           309         mov     l,m
  013B 2600         310         MVI     H,0
  013D 010600   D   311         LXI     B,MSG1
  0140 09           312         DAD     B
  0141 4E           313         MOV     C,M
  0142 CD0000   E   314         CALL    CO
                    315 ;   end;
                    316 @19:
  0145 210C00   C   317         LXI     H,J


ISIS-II 8080/8085 MACRO ASSEMBLER, V4.1         ERROR    PAGE    7


  LOC  OBJ         LINE        SOURCE STATEMENT

  0148 34           318         INR     M
  0149 C23301   C   319         JNZ     @17
                    320 @18:
                    321 ; end;
  014C C35D01   C   322         JMP     @7
                    323 @4:
                    324 ; else
                    325 ; do;
                    326 ;   userStatus = error$type;
  014F 2A0000   E   327         LHLD    USTATP
  0152 3A0100   C   328         LDA     ERRTYP
  0155 77           329         MOV     M,A
  0156 23           330         INX     H
  0157 3600         331         MVI     M,0
                    332 ;   STACKPTR = usrSP;
  0159 2A0000   E   333         LHLD    USRSP
  015C F9           334         SPHL
                    335 ; end;
                    336 @7:
                    337 ; if severity >= ABORT then
  015D 3A0000   C   338         LDA     SEVERE
  0160 FE02         339         CPI     2H
  0162 DA8801   C   340         JC      @8
                    341 ; do;
                    342 ;   if debug$toggle then
  0165 3A0200   D   343         LDA     DTOGLE
  0168 1F           344         RAR
  0169 D26F01   C   345         JNC     @9
                    346 ;     call trap;  /* trap to monitor */
  016C CD0000   E   347         CALL    TRAP
                    348 @9:
                    349 ;   if ISIS$E then      /* Parameter 1 of the ISIS 'E' command */
  016F 3A0000   E   350         LDA     ISISE
  0172 1F           351         RAR
  0173 D28501   C   352         JNC     @10
                    353 ;   do;
                    354 ;     userStatus = error$type;
  0176 2A0000   E   355         LHLD    USTATP
  0179 3A0100   C   356         LDA     ERRTYP
  017C 77           357         MOV     M,A
  017D 23           358         INX     H
  017E 3600         359         MVI     M,0
                    360 ;     STACKPTR = usrSP;
  0180 2A0000   E   361         LHLD    USRSP
  0183 F9           362         SPHL
                    363 ;     return;
  0184 C9           364         RET
                    365 ; end;
                    366 @10:
                    367 ; call reboot;
  0185 CD0000   E   368         CALL    REBOOT
                    369 ; end;
                    370 @8:
                    371 ; end;
  0188 C9           372         RET


ISIS-II 8080/8085 MACRO ASSEMBLER, V4.1         ERROR    PAGE    8


  LOC  OBJ         LINE        SOURCE STATEMENT

                    373         
                    374         
                    375 ; abortx: PROCEDURE(errcode) PUBLIC;
                    376 ;       DECLARE errcode BYTE;
                    377 ;       call err(ABORT, errcode);
                    378 ; end;
  0189 59           379 abortx: mov     e,c
  018A 0E02         380         mvi     c,ABORT
  018C C39E00   C   381         jmp     err
                    382         
                    383 ; warn: PROCEDURE(errcode) PUBLIC;
                    384 ;       DECLARE errcode BYTE;
                    385 ;       call err(WARNING, errcode);
                    386 ; end;
  018F 59           387 warn:   mov     e,c
  0190 0E00         388         mvi     c,WARNIN
  0192 C39E00   C   389         jmp     err
                    390         
                    391         end


PUBLIC SYMBOLS
ABORTX C 0189    CDKSAT D 0004    DTOGLE D 0002    ERR    C 009E    ERRDRV D 0030    GBLSEV D 0003    WARN   C 018F    

EXTERNAL SYMBOLS
@P0014 E 0000    @P0029 E 0000    @P0035 E 0000    @P0094 E 0000    @P0102 E 0000    CO     E 0000    IOCHK  E 0000    
IOSET  E 0000    ISISE  E 0000    REBOOT E 0000    SECTOR E 0000    TRACK  E 0000    TRAP   E 0000    USRSP  E 0000    
USTATP E 0000    

USER SYMBOLS
@1     C 0057    @10    C 0185    @11    C 0022    @12    C 007A    @13    C 0073    @14    C 007C    @15    C 009D    
@16    C 0096    @17    C 0133    @18    C 014C    @19    C 0145    @2     C 0095    @3     C 0096    @4     C 014F    
@5     C 012E    @6     C 00FC    @7     C 015D    @8     C 0188    @9     C 016F    @P0014 E 0000    @P0029 E 0000    
@P0035 E 0000    @P0094 E 0000    @P0102 E 0000    ABORT  A 0002    ABORTX C 0189    BASE   C 0005    BUFP   C 0006    
CDKSAT D 0004    CO     E 0000    CR     A 000D    DIGIT  C 000A    DIV    C 0008    DTOGLE D 0002    ERR    C 009E    
ERRDRV D 0030    ERRTYP C 0001    GBLSEV D 0003    I      C 000C    IMAX   C 0002    INITIO A 0006    IOCHK  E 0000    
IOSET  E 0000    ISISE  E 0000    J      C 000C    LF     A 000A    MSG1   D 0006    MSG10  D 0034    MSG11  D 0035    
MSG12  D 0038    MSG13  D 003B    MSG14  D 003C    MSG2   D 000D    MSG3   D 0011    MSG4   D 001A    MSG5   D 001E    
MSG6   D 0027    MSG7   D 002B    MSG9   D 0031    NUM    C 000E    OFFSET C 000D    PAD    D 0000    REBOOT E 0000    
SECTOR E 0000    SEVERE C 0000    TRACK  E 0000    TRAP   E 0000    USRSP  E 0000    USTATP E 0000    VALUE  C 0003    
WARN   C 018F    WARNIN A 0000    

ASSEMBLY COMPLETE,   NO ERRORS
