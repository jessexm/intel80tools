PL/M-80 COMPILER                                                                                                PAGE   1


ISIS-II PL/M-80 V4.0 COMPILATION OF MODULE RENAME
OBJECT MODULE PLACED IN RENAME.OBJ
COMPILER INVOKED BY:  :F1:plm80 rename.plm PRINT(RENAME.LST) OBJECT(RENAME.OBJ) DEBUG OPTIMIZE CODE



   1          rename:
              do;
              $include(rename.ipx)
   2   1  =   declare Chk$pn$disk$file literally 'ckpndf';
   3   1  =   declare Chk$Write$Protect literally 'CkWriP';
   4   1  =   declare Write$Dir$Entry literally 'WDirEn';
   5   1  =   declare BOOLEAN literally 'BYTE';
   6   1  =   declare DIFFERENT$DISK literally '10';
   7   1  =   declare MULTIDEFINED literally '11';
   8   1  =   declare NO$SUCH$FILE literally '13';
   9   1  =   declare pn(1) byte external;
  10   1  =   declare pn2(1) byte external;
  11   1  =   chk$pn$disk$file: procedure(filename) external; declare filename address; end;
  14   1  =   ChkWriteProtect: procedure external; end;
  16   1  =   dlook: procedure(fn) BOOLEAN external; declare fn address; end;
  19   1  =   warn: procedure(errcode) external; declare errcode byte; end;
  22   1  =   WriteDirEntry: procedure external; end;
  24   1  =   xpath: procedure(p1, p2) external; declare p1 address, p2 address; end;
        
  27   1      rename: PROCEDURE(old$file, new$file) PUBLIC;
                                                 ; STATEMENT # 27
                         ; PROC  RENAME
           0000  210300          LXI     H,NEWFILE+1H
           0003  72              MOV     M,D
           0004  2B              DCX     H
           0005  73              MOV     M,E
           0006  2B              DCX     H
           0007  70              MOV     M,B
           0008  2B              DCX     H
           0009  71              MOV     M,C
  28   2          DECLARE (old$file, new$file) ADDRESS;
  29   2          DECLARE i BYTE;         /* no longer used but needed to align with isis.bin */
  30   2          DECLARE already$exists BOOLEAN;
                  
        
  31   2          call xpath(old$file, .pn2);
                                                 ; STATEMENT # 31
           000A  2A0000          LHLD    OLDFILE
           000D  44              MOV     B,H
           000E  4D              MOV     C,L
           000F  110000          LXI     D,PN2
           0012  CD0000          CALL    XPATH
  32   2          call chk$pn$disk$file(new$file);
                                                 ; STATEMENT # 32
           0015  2A0200          LHLD    NEWFILE
           0018  44              MOV     B,H
           0019  4D              MOV     C,L
           001A  CD0000          CALL    CKPNDF
  33   2          if pn(0) <> pn2(0) then
                                                 ; STATEMENT # 33
           001D  210000          LXI     H,PN2
PL/M-80 COMPILER                                                                                                PAGE   2


           0020  3A0000          LDA     PN
           0023  BE              CMP     M
           0024  CA2C00          JZ      @1
  34   2              call warn(DIFFERENT$DISK);
                                                 ; STATEMENT # 34
           0027  0E0A            MVI     C,0AH
           0029  CD0000          CALL    WARN
                         @1:
  35   2          already$exists = dlook(.pn);
                                                 ; STATEMENT # 35
           002C  010000          LXI     B,PN
           002F  CD0000          CALL    DLOOK
           0032  320500          STA     ALREADYEXISTS
  36   2          if NOT dlook(.pn2) then
                                                 ; STATEMENT # 36
           0035  010000          LXI     B,PN2
           0038  CD0000          CALL    DLOOK
           003B  1F              RAR
           003C  DA4400          JC      @2
  37   2              call warn(NO$SUCH$FILE);
                                                 ; STATEMENT # 37
           003F  0E0D            MVI     C,0DH
           0041  CD0000          CALL    WARN
                         @2:
  38   2          call chk$write$protect;
                                                 ; STATEMENT # 38
           0044  CD0000          CALL    CKWRIP
  39   2          if already$exists then
                                                 ; STATEMENT # 39
           0047  3A0500          LDA     ALREADYEXISTS
           004A  1F              RAR
           004B  D25300          JNC     @3
  40   2              call warn(MULTIDEFINED);
                                                 ; STATEMENT # 40
           004E  0E0B            MVI     C,0BH
           0050  CD0000          CALL    WARN
                         @3:
  41   2          call write$dir$entry;
                                                 ; STATEMENT # 41
           0053  CD0000          CALL    WDIREN
  42   2      end;
                                                 ; STATEMENT # 42
           0056  C9              RET
  43   1      end;
              eof



MODULE INFORMATION:

     CODE AREA SIZE     = 0057H     87D
     VARIABLE AREA SIZE = 0006H      6D
     MAXIMUM STACK SIZE = 0002H      2D
     39 LINES READ
     0 PROGRAM ERRORS

END OF PL/M-80 COMPILATION
