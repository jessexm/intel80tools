/* assembler routines & linkage */
ISIS            P(B b,A w)
pckTkn          P
EDATA		B

packToken       'pckTkn'
tokenSize       'toksiz'
tokStart        'tokst'


lit             'literally'
TRUE            '0FFh'
FALSE           '0'
CR              '0Dh'
LF              '0Ah'
TAB             '9'

/* character classes */
CC$BAD          '0'
CC$WS           '1'
CC$SEMI         '2'
CC$COLON        '3'
CC$CR           '4'
CC$PUNCT        '5'
CC$DOLLAR       '6'
CC$QUOTE        '7'
CC$DIGIT        '8'
CC$LET          '9'
CC$ESC          '11'

TT$ID           '0'
TT$NUM          '2'
TT$STR          '4'

/* ISIS syscall ids */
IOPEN           '0'
ICLOSE          '1'
IDELETE         '2'
IREAD           '3'
IWRITE          '4'
ISEEK           '5'
ILOAD           '6'
IEXIT           '9'
IRESCAN         '11'
IERROR          '12'

/* user defined types */
TOKENSYM$T      'structure(w0 address, w2 address, w4 address, type byte, flags byte)'
FILE$T          'structure(name(15) byte, blk address, byt address, b19 byte)'
MACRO$T1	'macroCondSP byte, ifDepth byte, mtype byte, b3 byte,w4 address'
MACRO$T2        'buf$p address, blk address, w10 address, w12 address, w14 address'
MACRO$T         'structure(MACRO$T1,MACRO$T2)'
CONTENT$T       'structure(type byte, len address, segid byte, offset address, dta(122) byte, crc byte)'
EOF$T           'structure(type byte, len address, crc byte)'
EXTNAMES$T	'structure(type byte, len address, dta(125) byte)'
EXTREF$T        'structure(type byte, len address, hilo byte, dta(30) address, crc byte)'
INTERSEG$T      'structure(type byte, len address, segid byte, hilo byte, dta(29) address, crc byte)'
MODEND$T        'structure(type byte, len address, modtyp byte, segid byte, offset address, crc byte)'
MODHDR$T	'structure(type byte, len address, dta(26) byte)'
PUBLICS$T       'structure(type byte, len address, segid byte, dta(124) byte, crc byte)'
RELOC$T         'structure(type byte, len address, hilo byte, dta(62) address)'
SYMENTRY$T	'structure(tok(2) address, b4 byte, delta byte, type byte, flags byte)'

/* common based variables */
curTokenSym     "TOKENSYM$T"..curTokenSym$p

$file(asm41.plm)
b$3782          B
b$3783          B
w$3780          A

$file(asm41.plm,asm51.plm)
aBadSyntax      BS
aCo             BS
aCommand        BS
aEof            BS
aError          BS
aError$0        BS
aFile           BS
aIsisIi80808085 BS
aMemory         BS
aModulePage     BS
ascCRLF         BS
aStack          BS
aTable          BS
bTRUE           B
bZERO           B
errStrs         AS
errStrsLen      BS
spaces24        BS

$file(asm42.plm)
isGT            PB
isLT            PB
sub$3D34        P(B arg1b)
sub$3D55        P(B arg1b)

$file(asm42.plm,asm52.plm)
-ovlFile

$file(asm42.plm,asm52.plm,asm801.plm)
blankAsmErrCode PB
blankMorPAsmErrCode PB
chkGenObj       PB
closeF          P(A arg1w)
flushout        P
getNibble       P(A bp,B idx)B
initialControls P
inOpen          P(A path$p,A access)A
ioErrChk        P
ioError         P(A arg1w)
isComma         PB
isCR            PB
isPhase1        PB
isPhase2Print   PB
isRParen        PB
isSpace         PB
isTab           PB
isWhite         PB
nibble2Ascii    P(B n)B
nxtCmdCh        PB
outch           P(B c)
outStrN         P(A s,B n)
physmem         PA
preStatementControls P
put2Hex         P(A arg1w,B arg2b)
runtimeError    P(B arg1b)
skip2EOL        P
sourceError     P(B arg1b)
sub3DCE$3DFB        P
wrConsole       P(A buf$p,A count)


$file(asm43.pl3)
readM           P(A arg1w)
sub$3FA9        PB
sub$40B9        P
writeM          P

$file(asm43.pl3,asm82.pl3)
skip2NextLine   P
skipWhite       P
skipWhite$2     P
sub$3F19        P

$file(asm44.plm)

$file(asm44.plm,asm83.plm)
b4181           BS
getPrec         P(B arg1b)B
sub$425B        P(B arg1b)B
sub$4274        P
sub$4291        P
sub$43D2        P
sub$43DD        PA
sub$450F        P(B arg1b)
sub$4646        PB
sub$465B        PB
sub$467F        P(B arg1b,A arg2w)
swapAccBytes    P
testBit         P(B arg1b,A arg2w)B

$file(asm45.plm)
pad9B73         A

$file(asm45.plm,asm55.plm,asm851.plm)
isSkipping      PB
strUCequ        P(A arg1w,A arg2w)B
sub4C1E$54FD    P
sub$546F        P

$file(asm46.pl3)
b6C21           B
b6C22           B
b6C23           B
b6C27           B
b6C30           B
fileIdx         B
files           "FILE$T"S
includefd       A
off6C25         A
off6C2C         A
off6C2E         A
rootfd          A
closeI          P
readF           P(B arg1b,A arg2w,A arg3w)
readI           P(A arg1w)
seekI           P(B arg1b)
sub$4879        PB
sub$4904        P

/* $file(asm46.pl3) */

/* $file(asm47.pl3) */

$file(asm47.pl3,asm85.pl3)
cond2Acc        P(B arg1b)
sub$4AAA        P(B arg1b)
sub$4B57        P(B arg1b)
sub$540D        P

$file(asm48.pl3)
b$9C3A          B
sub$5CAD        P(A arg1w,B arg2b)
sub$5CE8        P(A arg1w,B arg2b)
sub$65D9        P

$file(asm48.pl3,asm86.pl3)
getCh           PB
getChClass      PB
lookup          P(B arg1b)B
unpackToken     P(A src,A dst)

$file(asm49.pl3)
collectByte     P(B arg1b)
nestIFX         P(B arg1b)
sub$676D        P(B arg1b)

$file(asm49.pl3,asm861.plm)
balanceError    P
commandError    P
doubleDefError  P
expressionError P
fileError       P
getId           P(B arg1b)
getNum          P
getStr          P
haveTokens      PB
illegalCharError P
locationError   P
multipleDefError P
nameError       P
nestingError    P
OpcodeOperandError P
operandError    P
phaseError      P
popToken        P
pushToken       P(B arg1b)
stackError      P
syntaxError     P
undefinedSymbolError P
valueError      P

$file(asm4A.pl3)
sub$70D7        P

$file(asm4B.pl3)
b$9C77          B
sub$72A4        P(B arg1b)
sub$7327        P
sub$73AD        P
sub$7517        P
sub$753E        P
sub$75FF        P
sub$76CE        P
sub$770B        P
sub$7844        P
sub$787A        P
sub$78CE        P

$file(asm4C.pl3)
symb            BS..curTokenSym$p

$file(asm4C.pl3,asmov2.pl3)
ovl11           P
ovl8            P
sub$6E32        P
writeExtName    P
writeModend     P
writeModhdr     P
writeRec        P(A rec$p)

$file(asm4D.pl3)
outStr          P(A arg1w)
sub$8447        P
sub$872E        P
sub$8915        P

$file(asm4D.pl3,asmov1.pl3)
asmComplete     P
newPage         P
newPageHeader   P
ovl9            P
printCmdLine    P
printDecimal    P(A arg1w)
skipToEOP       P
sub$6F4D        P
sub$721E        PB
sub$7229        P
sub$72D8        P

/* $file(asm4E.plm) */

$file(asm4E.plm,asm5D.plm)
getAsmFile      P

$file(asm4E.plm,asm5D.plm,asmov3.plm)
aDebug          BS
aExtents        BS
addExtents      P
cmdSkipWhite    P
getDrive        PB
resetData       P
sub$70EE        P



/* $file(asm51.plm) */

$file(asm51.plm,asm801.plm)
signonMsg       BS

/* $file(asm52.plm) */
$file(asm52.plm,asm801.plm)
/* hide variables managed by $IF */
-argNestCnt
-b$8FD5
-b$9058
-b$9059
-b$905B
-b$905E
-b$9060
-off$9056
-w$906A
-w$919D



/* $file(asm55.plm) */

/* $file(asm57.pl3) */
$file(asm57.pl3,asm85.pl3)
sub$4B72        P
sub$518F        P

/* $file(asm5D.plm) */

$file(asm801.plm)
ovlFile         BS
ovlMgr          P(B ovl)

/* $file(asm82.pl3) */
$file(asm83.plm)
-b$905B			/* special case due to $IF processing */
/* $file(asm85.pl3) */
/* $file(asm851.plm) */

$file(asm86.pl3)
b6CE4           B
chkLF           P
insertSym       P
sub$5819        P(A arg1w,B arg2b)

$file(asm861.plm)
addByte2Tok     P(B arg1b)
nestIF          P(B arg1b)
unnestIF        P(B arg1b)

$file(asmov0.pl3)
parseControls   P

$file(asmov1.pl3)
ovl10           P
ovl3            P
sub$7041        P

/* $file(asmov2.pl3) */

$file(asmov3.plm)
getAsmFileX     P

$file(close.plm)
close           P(A conn,A status$p)

$file(delete.plm)
delete          P(A path$p,A status$p)

$file(error.plm)
error           P(A error$num)

$file(exit.plm)
exit            P

/* these share a common file with build controlled by $IF statements */
$file(glb.plm,glb4.plm,glb5.plm)
accum1          A
accum1$hb       B
accum1$lb       B
accum2          A
accum2$hb       B
accum2$lb       B
activeSeg       B
actRead         A
aF0Asmac$tmp    BS
aF0Asxref       BS
aF0Asxref$tmp   BS
alignTypes      BS
argNestCnt      B		/* glb4 */
asciiLineNo     BS
asmErrCode      B
azero           A
b6521           B
b6524           B
b6525           B
b6526           BS
b652B           BS
b652F           B
b6742           B
b6743           B
b6744           B
b6748           B
b6749           B
b674A           BS
b6754           B
b6855           B
b6856           B
b6857           B
b6858           B
b6859           B
b6872           B
b6873           BS
b6879           BS
b687F           B
b6880           B
b6881           B
b6882           B
b6883           B
b6884           B
b6885           B
b6897           B
b689A           B
b689B           B
b689C           B
b68AB           B
b68AD           B
b68AE           BS
b68B8           BS
b6A00           B
b6A56           B
b6A57           BS
b6A6F           B
b6A71           B
b6B20$9A77      B		
b6B23           B
b6B24           B
b6B25           B
b6B28           B
b6B29           B
b6B2B           B
b6B2C           B
b6B2D           B
b6B2F           B
b6B30           B
b6B31           B
b6B32           B
b6B33           B
b6B34           B
b6B35           B
b6B36           B
b6BD9           B
b6BDA           B
b6BDC           B
b$8FD5          BS		/* glb4 */
b$9058          B		/* glb4 */
b$9059          B		/* glb4 */
b$905A          B		/* glb4 */
b$905B          B		/* glb4 */
b$905C          B		/* glb4 */
b$905D          B		/* glb4 */
b$905E          B		/* glb4 */
b$9060          B		/* glb4 */
b$9061          B		/* glb4 */
b$9062          B		/* glb4 */
b$9063          B		/* glb4 */
b$9064          B		/* glb4 */
b$9065          B		/* glb4 */
b$9066          B		/* glb4 */
b$91A1          B		/* glb4 */
b$91A2          B		/* glb4 */
b$91A3          B		/* glb4 */
b$91A4          BS		/* glb4 */
bp6A4E          BS
bp6BE0          BS
cmdch$p         A
cmdLineBuf      BS
controlId       B
controls        BS
controlSeen     BS
controls$p      A
ctlCOND         B
ctlDEBUG        B
ctlEJECT        B
ctlGEN          B
ctlLIST         B
ctlMACRODEBUG   B
ctlMACROFILE    B
ctlMOD85        B
ctlOBJECT       B
ctlPAGELENGTH   B
ctlPAGEWIDTH    B
ctlPAGING       B
ctlPRINT        B
ctlSYMBOLS      B
ctlTITLE        B
ctlTITLESTR     BS
ctlTTY          B
ctlXREF         B
curChar         B
curCol          B
curFileName$p   A
curMacroBlk     A		/* glb4 */
curTokenSym$p   A
curTokStart     A
endLineBuf      A
endOutBuf       A
errCnt          A
extNamIdx       B
finished        B
fix20Idx        B
fix22Idx        B
fix24Idx        B
fix6Idx         B
has16bitOperand B
ifDepth         B
ii              B
inElse          BS
infd            A
jj              B
lineBuf         BS
lineCnt         A
lookAhead       B
lstFile         BS
macroBuf        BS		/* glb4 */
macroCondSP     B		/* glb4 */
macroCondStk    BS		/* glb4 */
MacroDebugOrGen B		/* glb & glb5 */
macrofd         A
macroStk        "MACRO$T"S	/* glb4 */
maxMacroBlk     A		/* glb4 */
mem             BS		/* glb4 */
moduleNameLen   B
nxtMacroBlk     A		/* glb4 */
objfd           A
objFile         BS
off$9056        A		/* glb4 */
openStatus      A
opSP            B
opStack         BS
opType          B
outbuf          BS
outfd           A
out$p           A
pageCnt         A
phase           B
primaryValid    B
r$content       "CONTENT$T"
reget           B
r$eof           "EOF$T"
r$extnames1     "EXTNAMES$T"
r$extnames2     "EXTNAMES$T"
r$extref        "EXTREF$T"
r$interseg      "INTERSEG$T"
r$modend        "MODEND$T"
r$publics       "PUBLICS$T"
r$reloc         "RELOC$T"
saveIdx         B
saveStack       BS
scanCmdLine     B
segSize         AS
skipping        BS
startDefined    B
startOffset     A
startSeg        B
statusIO        A
symTab          AS
titleLen        B
tmac$b3         B		/* glb4 */
tmac$blk        A		/* glb4 */
tmac$buf$p      A		/* glb4 */
tmac$ifDepth    B		/* glb4 */
tmac$macroCondSP B		/* glb4 */
tmac$mtype      B		/* glb4 */
tmac$w10        A		/* glb4 */
tmac$w12        A		/* glb4 */
tmac$w14        A		/* glb4 */
tmac$w4         A		/* glb4 */
tokBuf          BS
tokBufIdx       B
tokBufLen       B
tokenAttr       BS
tokenSP         B
tokenSym        AS
tokenSymId      AS
tokenType       BS
toksiz          BS
tokst           AS
tokType         B
w651F           A
w6522           A
w6750           A
w6752           A
w685A           A
w685C           A
w6866           A
w6868           AS
w686E           A
w6870           A
w68A0           A
w68A2           A
w68A6           A
w68B6           A
w6A4E           A
w6B1E           A
w6B41           AS
w6BCE           A
w6BE0           A
w6BE2           A
w$9054          A		/* glb4 */
w$9068          A		/* glb4 */
w$906A          A		/* glb4 */
w$9114          A		/* glb4 */
w$9197          A		/* glb4 */
w$9199          A		/* glb4 */
w$919B          A		/* glb4 */
w$919D          A		/* glb4 */
w$919F          A		/* glb4 */
wZERO           A
xreffd          A

$file(key4.plm)
extKeywords     AS

$file(keywrd.plm)
stdKeywords     AS

$file(load.plm)
load            P(A path$p,A load$offset,A switch,A entry$p,A status$p)

$file(open.plm)
open            P(A conn$p,A path$p,A access,A echo,A status$p)

$file(read.plm)
read            P(A conn,A buff$p,A count,A actual$p,A status$p)

$file(rescan.plm)
rescan          P(A conn,A status$p)

$file(seek.plm)
seek            P(A conn,A mode,A block$p,A byte$p,A status$p)

$file(write.plm)
write           P(A conn,A buff$p,A count,A status$p)

