asm80$4: do;

$include(asm84.ipx)

declare	b6C21 byte public initial(0),
	b6C22 byte public initial(0),
	b6C23 byte public,
	fileIdx byte public initial(0),
	off6C25 address public initial(.b68B8),
	b6C27 byte public initial(0),
	includefd address public,
	rootfd address public,
	off6C2C address public initial(.b68B8 - 1),
	off6C2E address public initial(.b68B8),
	b6C30 byte public initial(0), 
	files(6) FILE$T public,
	seekIBlk address,
	seekIByte address,
	pad6CAD byte,  
	w6CAE address,
	w6CB0 address,
	pad6CB2(4) address,
	readFActual address,
	pad6CBC address;



readF: procedure(arg1b, arg2w, arg3w) public;
	declare arg1b byte, (arg2w, arg3w) address;
	call read(arg1b, arg2w, arg3w, .readFActual, .statusIO);
	call ioErrChk;
end;

seekI: procedure(arg1b) public;
	declare arg1b byte;
	call seek(includefd, arg1b, .seekIBlk, .seekIByte, .statusIO);
	call ioErrChk;
end;


readI: procedure(arg1w) public;
	declare arg1w address;
	declare pad byte;

	call readF(includefd, arg1w, .b68B8(w68B6) - arg1w);
	off6C25 = arg1w + readFActual;
end;



closeI: procedure public;
	call close(includefd, .statusIO);
	call ioErrChk;
	if fileIdx = 0 then
	do;
		b6C27 = 0FFh;
		call ioError(.files(0).name);
		return;
	end;
	fileIdx = fileIdx - 1;
	if fileIdx = 0 then
		includefd = rootfd;
	else
		includefd = inOpen(.files(fileIdx).name, 1);

	seekIByte = files(fileIdx).byt;
	seekIBlk = files(fileIdx).blk;
	call seekI(2);	/* SEEKABS */
	off6C25 = .b68B8;
	off6C2C = .b68B8 - 1;
end;


sub$4879: procedure byte public;
	declare ch based off6C2C byte;
	declare w6CC7 address;
    loop:
	off6C2C = off6C2C + 1;
	if off6C2C = off6C25 then
	do;
		w6CAE = off6C2E;
		w6CB0 = off6C25;
		if w6CB0 - w6CAE > 0 then
			call move(w6CB0 - w6CAE, off6C2E, .b68B8);
		off6C2E = .b68B8;
		call readI(w6CC7 := off6C2E + (w6CB0 - w6CAE));
		off6C2C = w6CC7;
	end;

	if readFActual = 0 then
	do;
		call closeI;
		goto loop;
	end;

	b6C30 = b6C30 + 1;
	return ch and 7Fh;
end;


sub$4904: procedure public;
	declare b6CC9 byte, w6CCA address;

	b6C21 = 0;
	call seekI(0);	/* SEEKTELL */
	if seekIByte = 128 then
	do;
		seekIBlk = seekIBlk + 1;
		seekIByte = 0;
	end;

	w6CCA = off6C25 - off6C2E;
x:						/* forces code alignment */
	if (b6CC9 := w6CCA mod 128) > seekIByte then
	do;
		seekIByte = seekIByte + 128;
		seekIBlk = seekIBlk - 1;
	end;

	files(fileIdx - 1).byt = seekIByte - b6CC9;
	files(fileIdx - 1).blk = seekIBlk - w6CCA / 128;
	if includefd <> rootfd then
	do;
		call close(includefd, .statusIO);
		call ioErrChk;
	end;

	off6C25 = .b68B8;
	off6C2C = off6C25 - 1;
	off6C2E = .b68B8;
	files(fileIdx).blk = 0;	
	files(fileIdx).byt = 0;	
	includefd = inOpen(.files(fileIdx).name, 1);
end;
end;
