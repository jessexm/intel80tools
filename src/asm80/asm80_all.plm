asm80.pex
/* assembler routines & linkage */
ISIS            P(B b,A w)
pckTkn          P
EDATA		B

packToken       'pckTkn'
tokenSize       'toksiz'
tokStart        'tokst'


lit             'literally'
TRUE            '0FFh'
FALSE           '0'
CR              '0Dh'
FF              '0Ch'
LF              '0Ah'
TAB             '9'

# primiative types
bool             'byte'
word             'address'
pointer          'address'

/* character classes */
CC$BAD          '0'
CC$WS           '1'
CC$SEMI         '2'
CC$COLON        '3'
CC$CR           '4'
CC$PUNCT        '5'
CC$DOLLAR       '6'
CC$QUOTE        '7'
CC$DIGIT        '8'
CC$LET          '9'
CC$ESC          '11'

TT$ID           '0'
TT$NUM          '2'
TT$STR          '4'

/* ISIS syscall ids */
IOPEN           '0'
ICLOSE          '1'
IDELETE         '2'
IREAD           '3'
IWRITE          '4'
ISEEK           '5'
ILOAD           '6'
IEXIT           '9'
IRESCAN         '11'
IERROR          '12'
/* seek operations */
SEEKTELL        '0'
SEEKBACK        '1'
SEEKABS         '2'
SEEKFWD         '3'
SEEKEND         '4'
/* segments */
SEG$ABS         '0'
SEG$CODE        '1'
SEG$DATA        '2'
SEG$STACK       '3'
SEG$MEMORY      '4'

/* relocatable record types */
OMF$MODHDR      '2'
OMF$MODEND      '4'
OMF$CONTENT     '6'
OMF$LINENO      '8'
OMF$EOF	        '0EH'
OMF$ANCESTOR    '10H'
OMF$LOCALS      '12H'
OMF$PUBLICS     '16H'
OMF$EXTNAMES    '18H'
OMF$EXTREF      '20H'
OMF$RELOC       '22H'
OMF$INTERSEG    '24H'
OMF$LIBLOCS     '26H'
OMF$LIBNAMES    '28H'
OMF$LIBDICT     '2AH'
OMF$LIBHDR      '2CH'
OMF$COMDEF      '2EH'

/* user defined types */
TOKENSYM$T      'structure(tok(2) address, val address, type byte, flags byte)'
FILE$T          'structure(name(15) byte, blk address, byt address, b19 byte)'
MACRO$T1	'macroCondSP byte, ifDepth byte, mtype byte, b3 byte,w4 address'
MACRO$T2        'buf$p address, blk address, w10 address, w12 address, w14 address'
MACRO$T         'structure(MACRO$T1,MACRO$T2)'
CONTENT$T       'structure(type byte, len address, segid byte, offset address, dta(122) byte, crc byte)'
EOF$T           'structure(type byte, len address, crc byte)'
EXTNAMES$T	'structure(type byte, len address, dta(125) byte)'
EXTREF$T        'structure(type byte, len address, hilo byte, dta(30) address, crc byte)'
INTERSEG$T      'structure(type byte, len address, segid byte, hilo byte, dta(29) address, crc byte)'
MODEND$T        'structure(type byte, len address, modtyp byte, segid byte, offset address, crc byte)'
MODHDR$T	'structure(type byte, len address, dta(26) byte)'
PUBLICS$T       'structure(type byte, len address, segid byte, dta(124) byte, crc byte)'
RELOC$T         'structure(type byte, len address, hilo byte, dta(62) address)'
SYMENTRY$T	'structure(tok(2) address, b4 byte, delta byte, type byte, flags byte)'

/* common based variables */
curTokenSym     "TOKENSYM$T"..curTokenSym$p

$file(asm41.plm)
b$3782          B
b$3783          B
w$3780          A
isGT            PB
isLT            PB
sub$3D34        P(B arg1b)
sub$3D55        P(B arg1b)

$file(asm41.plm,asm51.plm,asm801.plm)
aBadSyntax      BS
aCo             BS
aCommand        BS
aEof            BS
aError          BS
aError$0        BS
aFile           BS
asmHeader BS
aMemory         BS
aModulePage     BS
ascCRLF         BS
aStack          BS
aTable          BS
bTRUE           B
bZERO           B
errStrs         AS
errStrsLen      BS
signonMsg       BS
spaces15        BS
spaces2         BS
spaces24        BS
spaces4         BS
spaces5         BS
spaces6         BS
blankAsmErrCode PB
blankMorPAsmErrCode PB
chkGenObj       PB
closeF          P(A arg1w)
flushout        P
getNibble       P(A bp,B idx)B
initialControls P
inOpen          P(A path$p,A access)A
ioErrChk        P
ioError         P(A arg1w)
isComma         PB
isCR            PB
isPhase1        PB
isPhase2Print   PB
isRParen        PB
isSpace         PB
isTab           PB
isWhite         PB
nibble2Ascii    P(B n)B
getCmdCh        PB
outch           P(B c)
outStrN         P(A s,B n)
physmem         PA
preStatementControls P
put2Hex         P(A arg1w,B arg2b)
runtimeError    P(B arg1b)
skip2EOL        P
sourceError     P(B arg1b)
initLine        P
wrConsole       P(A buf$p,A count)


$file(asm43.pl3)
readM           P(A arg1w)
sub$3FA9        PB
sub$40B9        P
writeM          P

$file(asm43.pl3,asm82.pl3)
skip2NextLine   P
skipWhite       P
skipWhite$2     P
sub$3F19        P

/* $file(asm44.plm) */

$file(asm44.plm,asm83.plm)
b4181           BS
getPrec         P(B arg1b)B
sub$425B        P(B arg1b)B
sub$4274        P
sub$4291        P
sub$43D2        P
sub$43DD        PA
sub$450F        P(B arg1b)
sub$4646        PB
sub$465B        PB
sub$467F        P(B arg1b,A arg2w)
swapAccBytes    P
testBit         P(B arg1b,A arg2w)B

/* $file(asm45.plm) */

$file(asm45.plm,asm55.plm,asm851.plm)
isSkipping      PB
strUCequ        P(A arg1w,A arg2w)B
sub4C1E$54FD    P
sub$546F        P

$file(asm46.pl3)
needToOpenFile           B
b6C22           B
b6C23           B
missingEnd      "bool"
lineChCnt           B
fileIdx         B
files           "FILE$T"S
srcfd       A
endInBuf$p         A
inCh$p         A
startLine$p         A
rootfd          A
closeSrc          P
readF           P(B arg1b,A arg2w,A arg3w)
readSrc           P(A arg1w)
seekI           P(B arg1b)
getSrcCh        PB
openSrc        P

/* $file(asm47.pl3) */

$file(asm47.pl3,asm85.pl3)
cond2Acc        P(B arg1b)
sub$4AAA        P(B arg1b)
sub$4B57        P(B arg1b)
sub$540D        P

$file(asm48.pl3)
sub$5CAD        P(A arg1w,B type)
sub$65D9        P

$file(asm48.pl3,asm86.pl3)
b6EC4$9C3A          B
getCh           PB
getChClass      PB
lookup          P(B tableId)B
sub5819$5CE8        P(A arg1w,B arg2b)
unpackToken     P(A src,A dst)

/* $file(asm49.pl3) */

$file(asm49.pl3,asm861.plm)
balanceError    P
collectByte     P(B arg1b)
commandError    P
doubleDefError  P
expressionError P
fileError       P
getId           P(B arg1b)
getNum          P
getStr          P
haveTokens      PB
illegalCharError P
locationError   P
multipleDefError P
nameError       P
nestIF         P(B arg1b)
nestingError    P
OpcodeOperandError P
operandError    P
phaseError      P
popToken        P
pushToken       P(B arg1b)
stackError      P
syntaxError     P
undefinedSymbolError P
unnestIF        P(B arg1b)
valueError      P

/* $file(asm4A.pl3) */
$file(asm4A.pl3,asmov0.pl3)
parseControls   P

$file(asm4B.pl3)
b9C77          B
sub$72A4        P(B arg1b)
sub$7327        P
sub$73AD        P
sub$7517        P
sub$753E        P
sub$75FF        P
sub$76CE        P
sub$770B        P
sub$7844        P
sub$787A        P
sub$78CE        P

/* $file(asm4C.pl3) */

$file(asm4C.pl3,asmov2.pl3)
ovl11           P
ovl8            P
reinitFixupRecs        P
writeExtName    P
writeModend     P
writeModhdr     P
writeRec        P(A rec$p)

/* $file(asm4D.pl3) */

$file(asm4D.pl3,asmov1.pl3)
asmComplete     P
newPage         P
newPageHeader   P
outStr          P(A arg1w)
ovl3            P
ovl9            P
ovl10           P
printCmdLine    P
printDecimal    P(A arg1w)
skipToEOP       P
sub$6F4D        P
sub7041$8447    P
sub$721E        PB
sub$7229        P
sub$72D8        P

/* $file(asm4E.plm) */

$file(asm4E.plm,asm5D.plm,asmov3.plm)
aDebug          BS
aExtents        BS
addExtents      P
cmdSkipWhite    P
getAsmFile      P
getDrive        PB
resetData       P
initRecTypes        P



/* $file(asm51.plm) */

/* $file(asm52.plm) */

/* $file(asm55.plm) */

/* $file(asm57.pl3) */
$file(asm57.pl3,asm85.pl3)
handleOp        P
sub$518F        P

/* $file(asm5D.plm) */


$file(asm801.plm)
ovlFile         BS
ovlMgr          P(B ovl)

/* $file(asm82.pl3) */
/* $file(asm83.plm) */
/* $file(asm85.pl3) */
/* $file(asm851.plm) */

$file(asm86.pl3)
chkLF           P
insertSym       P

/* $file(asm861.plm) */

/* $file(asmov0.pl3) */

/* $file(asmov1.pl3) */

/* $file(asmov2.pl3) */

/* $file(asmov3.plm) */

$file(close.plm)
close           P(A conn,A status$p)

$file(delete.plm)
delete          P(A path$p,A status$p)

$file(error.plm)
error           P(A error$num)

$file(exit.plm)
exit            P

/* these share a common file with build controlled by $IF statements */
$file(glb.plm,glb4.plm,glb5.plm)
accum1          A
accum1$hb       B
accum1$lb       B
accum2          A
accum2$hb       B
accum2$lb       B
activeSeg       B
actRead         A
asmax$ref    BS
asxref       BS
asxref$tmp   BS
alignTypes      BS
argNestCnt      B		/* glb4 */
asciiLineNo     BS
asmErrCode      B
azero           A
fixupSeg        B
curFixupHiLoSegId B
curFixupType    B
fixIdxs         BS
initFixupReq    "bool"S
firstContent           "bool"
b6742           B
b6743           B
nameLen         B
b6748           B
b6749           B
b674A           BS
b6754           B
b6855           B
b6856           B
b6857           B
b6858           B
b6859           B
b6872           B
extName         BS
b6879           BS
b687F           B
haveUserSymbol  "bool"
b6881           B
b6882           B
b6883           B
b6884           B
b6885           B
b6897           B
b689A           B
b689B           B
b689C           B
b68AB           B
b68AD           B
b68AE           B
inBuf           BS
b6A00           B
spIdx           B
b6A57           BS
b6A6F           B
b6A71           B
b6B20$9A77      B		
inDB           B
inDW           B
b6B25           B
b6B28           B
b6B29           B
op              B
b6B2C           B
b6B2D           B
b6B2F           B
b6B30           B
b6B31           B
b6B32           B
b6B33           B
b6B34           B
b6B35           B
b6B36           B
b6BD9           B
b6BDA           B
b6BDC           B
macroLine          BS		/* glb4 */
b9058          "bool"		/* glb4 */
b9059          B		/* glb4 */
b905A          B		/* glb4 */
expandingMacro          B		/* glb4 */
b905C          B		/* glb4 */
b905D          "bool"		/* glb4 */
b905E          B		/* glb4 */
b9060          B		/* glb4 */
b9061          B		/* glb4 */
b9062          B		/* glb4 */
b9063          B		/* glb4 */
b9064          B		/* glb4 */
b9065          B		/* glb4 */
b9066          B		/* glb4 */
b91A1          B		/* glb4 */
b91A2          B		/* glb4 */
b91A3          B		/* glb4 */
b91A4          BS		/* glb4 */
bp6A4E          BS
bp6BE0          BS
cmdch$p         A
cmdLineBuf      BS
controlId       B
controls        BS
controlSeen     "bool"S
controls$p      A
ctlCOND         "bool"
ctlDEBUG        "bool"
ctlEJECT        "bool"
ctlGEN          "bool"
ctlLIST         "bool"
ctlMACRODEBUG   "bool"
ctlMACROFILE    "bool"
ctlMOD85        "bool"
ctlOBJECT       "bool"
ctlPAGELENGTH   B
ctlPAGEWIDTH    B
ctlPAGING       "bool"
ctlPRINT        "bool"
ctlSYMBOLS      "bool"
ctlTITLE        "bool"
ctlTITLESTR     BS
ctlTTY          "bool"
ctlXREF         "bool"
curChar         B
curCol          B
curFileName$p   A
curMacroBlk     A		/* glb4 */
curTokenSym$p   A
curTokStart     A
endLineBuf      A
endOutBuf       A
endSymTab       AS
errCnt          A
extNamIdx       B
finished        B
fix20Idx        B
fix22Idx        B
fix24Idx        B
fix6Idx         B
has16bitOperand B
ifDepth         B
ii              B
inElse          BS
infd            A
jj              B
lineBuf         BS
pageLineCnt         A
lookAhead       B
lstFile         BS
macroBuf        BS		/* glb4 */
macroCondSP     B		/* glb4 */
macroCondStk    BS		/* glb4 */
MacroDebugOrGen B		/* glb & glb5 */
macrofd         A
macroStk        "MACRO$T"S	/* glb4 */
maxMacroBlk     A		/* glb4 */
maxSegSize      AS
mem             BS		/* glb4 */
moduleNameLen   B
nxtMacroBlk     A		/* glb4 */
objfd           A
objFile         BS
macro$p        A		/* glb4 */
openStatus      A
opSP            B
opStack         BS
opType          B
outbuf          BS
outfd           A
out$p           A
pageCnt         A
phase           B
primaryValid    B
r$content       "CONTENT$T"
reget           B
r$eof           "EOF$T"
r$extnames1     "EXTNAMES$T"
r$extnames2     "EXTNAMES$T"
r$extref        "EXTREF$T"
r$interseg      "INTERSEG$T"
r$modend        "MODEND$T"
r$publics       "PUBLICS$T"
r$reloc         "RELOC$T"
saveIdx         B
saveStack       BS
scanCmdLine     B
segSize         AS
skipping        BS
startDefined    B
startOffset     A
startSeg        B
statusIO        A
symTab          AS
titleLen        B
tmac$b3         B		/* glb4 */
tmac$blk        A		/* glb4 */
tmac$buf$p      A		/* glb4 */
tmac$ifDepth    B		/* glb4 */
tmac$macroCondSP B		/* glb4 */
tmac$mtype      B		/* glb4 */
tmac$w10        A		/* glb4 */
tmac$w12        A		/* glb4 */
tmac$w14        A		/* glb4 */
tmac$w4         A		/* glb4 */
tokBuf          BS
tokBufIdx       B
tokBufLen       B
tokenAttr       BS
tokenSP         B
tokStr          BS
tokenSym        AS
tokenSymId      AS
tokenType       BS
toksiz          BS
tokst           AS
tokType         B
contentBytePtr           A
fixOffset           A
externId           A
w6752           A
w685A           A
w685C           A
symHighMark           A
w6870           A
w68A0           A
w68A2           A
w68A6           A
sizeInBuf           A
srcLineCnt           A
w6B1E           A
w6BCE           A
w6BE0           A
w6BE2           A
endMacroLine   BS		/* glb4 */
w9068          A		/* glb4 */
w906A          A		/* glb4 */
w9114          A		/* glb4 */
w9197          A		/* glb4 */
w9199          A		/* glb4 */
w919B          A		/* glb4 */
w919D          A		/* glb4 */
w919F          A		/* glb4 */
wZERO           A
xreffd          A

$file(key4.plm)
extKeywords     AS

$file(keywrd.plm)
stdKeywords     AS

$file(load.plm)
load            P(A path$p,A load$offset,A switch,A entry$p,A status$p)

$file(open.plm)
open            P(A conn$p,A path$p,A access,A echo,A status$p)

$file(read.plm)
read            P(A conn,A buff$p,A count,A actual$p,A status$p)

$file(rescan.plm)
rescan          P(A conn,A status$p)

$file(seek.plm)
seek            P(A conn,A mode,A block$p,A byte$p,A status$p)

$file(write.plm)
write           P(A conn,A buff$p,A count,A status$p)

notes.txt
symbol table format
tok(2) address - packed symbol 3 chars per address field
val address - keywords - high byte is link to next entry
	      user - offset of symbol
	      macro - 
type byte
flags byte keywords xxxxxxrx	r = rim/sim
	   user - xexxxsss	e = external sss = seg
	   macro table


global.pls
global: do;
$IF BASE
$include(glb.ipx)
$ELSEIF OVL4
$include(glb4.ipx)
$ELSE
$include(glb5.ipx)
$ENDIF

$IF OVL4
declare	IN$BUF$SIZE lit '512',
	OUT$BUF$SIZE lit '512';
$ELSEIF OVL5
declare	IN$BUF$SIZE lit '2048',
	OUT$BUF$SIZE lit '2048';
$ELSE
declare	IN$BUF$SIZE lit '200',
	OUT$BUF$SIZE lit '128';
$ENDIF

$IF OVL4
declare	mem(1) byte public at(0),
	macroLine(127) byte public,
	endMacroLine(2) byte public,			/* space for 0 and a guard byte */
	macro$p address public initial(.macroLine),
	b9058 bool public initial(FALSE),
	b9059 byte public,
	b905A byte public,
	expandingMacro byte public,
	b905C byte public,
	b905D bool public initial(FALSE),
	b905E byte public,
	b905F byte,
	b9060 byte public,
	b9061 byte public,
	b9062 byte public,
	b9063 byte public,
	b9064 byte public,
	b9065 byte public,
	b9066 byte public,
	argNestCnt byte public initial(0),
	w9068 address public,
	w906A address public,
	/*
		mtype has the following values
		1 -> IRP
		2 -> IRPC
		3 -> REPT
		4 -> ???
		5 -> ???
	*/
		
	macroStk(10) MACRO$T public,
	(tmac$macroCondSP, tmac$ifDepth,  tmac$mtype, tmac$b3) byte public at (.macroStk(0)),
	(tmac$w4, tmac$buf$p) address public at (.macroStk(0).w4),
	tmac$blk address public  at (.macroStk(0).blk) initial(0FFFFh),
	(tmac$w10, tmac$w12, tmac$w14) address public at (.macroStk(0).w10),
	w910C address,
	curMacroBlk address public initial(0FFFFh),
	nxtMacroBlk address public initial(0),
	maxMacroBlk address public initial(0),
	w9114 address public,
	macroBuf(129) byte public,
	w9197 address public,
	w9199 address public,
	w919B address public,
	w919D address public,
	w919F address public,
	b91A1 byte public initial(0),
	b91A2 byte public initial(0),

	b91A3 byte public initial(81h),
	b91A4(*) byte public initial(3Fh, 3Fh, 0, 0, 0, 0, 80h);
$ENDIF
/* ov4 compat 2C8C */
declare	contentBytePtr address public,
	fixupSeg byte public,
	fixOffset address public,
	curFixupHiLoSegId byte public,
	curFixupType byte public,
	fixIdxs(4) byte public initial(0, 0, 0, 0),
	(fix22Idx, fix24Idx, fix20Idx, fix6Idx) byte public at (.fixIdxs),
	extNamIdx byte public initial(0),
	initFixupReq(4) bool public initial(TRUE, TRUE, TRUE, TRUE),
	firstContent byte public initial(TRUE),
	r$eof EOF$T public initial(0Eh, 0),
	r$extnames1 EXTNAMES$T public initial(18h, 0, 0),
	moduleNameLen byte public initial(6),
	r$extnames2 EXTNAMES$T public initial(18h, 0, 0),
	r$content CONTENT$T public at(.r$extnames2),
	r$publics PUBLICS$T public initial (16h, 1, 0, 0, 0),
	r$reloc RELOC$T public at(.r$publics),
	r$interseg INTERSEG$T public,
	r$extref EXTREF$T public,
	r$modend MODEND$T public initial( 4, 4, 0),
	wZERO address public initial(0),
	pad6741 byte initial(0ah),
	b6742 byte public initial(0),
	b6743 byte public initial(0),
	nameLen byte public,
	startSeg byte public initial(1),
	padb6746 byte,
	activeSeg byte public,
	b6748 byte public initial(0),
	b6749 byte public initial(0),
	b674A(2) byte public,
	alignTypes(4) byte public initial(3, 3, 3, 3),
	externId address public,
	w6752 address public,
	b6754 byte public initial(0),
	startDefined byte public initial(0),
	startOffset address public initial(0),
	tokenSP byte public initial(0),
	lineBuf(128) byte public,
	tokStart(9) address public initial(.lineBuf),
	curTokStart address public at(.tokStart),
	tokenSym(9) address public initial(0),
	curTokenSym$p address public at(.tokenSym(0)),
	curTokenSym based curTokenSym$p TOKENSYM$T,
	tokenType(9) byte public,
	tokenSize(9) byte public initial(0),
	tokenAttr(9) byte public,
	tokenSymId(9) address public,
/* end */
	endLineBuf address public initial(.tokStart),
	ifDepth byte public initial(0),
	skipping(9) byte public,
	inElse(9) byte public;
$IF OVL4
declare	macroCondSP byte public initial(0),
	macroCondStk(17) byte public,
	b94DD(2) byte;
$ENDIF
declare	opSP byte public,
	opStack(17) byte public,
/* ov4 compat 2CA0 */
	(accum1, accum2) address public,
	(accum1$lb, accum1$hb, accum2$lb, accum2$hb) byte public at(.accum1),
	b6855 byte public,
	b6856 byte public,
	b6857 byte public,
	b6858 byte public,
	b6859 byte public,
	w685A address public,
	w685C address public,
	curChar byte public initial(0),
	reget byte public initial(0),
	lookAhead byte public,
	pad6861 byte initial(0),
	symTab(3) address public,
	endSymTab(3) address public,
	symHighMark address public,
	w6870 address public,
	b6872 byte public initial(0),
	extName(6) byte public,
	b6879(6) byte public,
	b687F byte public,
	haveUserSymbol bool public,
	b6881 byte public initial(0),
	b6882 byte public initial(0),
	b6883 byte public initial(0),
	b6884 byte public initial(0),
	b6885 byte public initial(0),
	objfd address public,
	xreffd address public,
	infd address public,
	outfd address public,
	macrofd address public,
	statusIO address public,
	openStatus address public,
	pad6894 address initial(0FFFFh),
	asmErrCode byte public initial(' '),	
	b6897 byte public initial(0),
	primaryValid byte public initial(TRUE);
/* end */
$IF BASE
declare	pad6899 byte initial(0);
$ENDIF
/* ov4 compat 2C9F */
declare	b689A byte public,
	b689B byte public,
	b689C byte public,
	pad689D(2) byte,
	curCol byte public initial(1),
	w68A0 address public,
	w68A2 address public,
	pageLineCnt address public,
	w68A6 address public,
	pageCnt address public,
	pad68AA byte,
	b68AB byte public,
	pad68AC byte,
	b68AD byte public initial(0),
	b68AE byte public initial(FALSE),
	tokStr(7) byte public initial(0, 0, 0, 0, 0, 0, 0),
	sizeInBuf address public initial(IN$BUF$SIZE),
	inBuf(IN$BUF$SIZE) byte public,
	outbuf(OUT$BUF$SIZE) byte public,
/* end */
	b6A00 byte public,
/* ov4 compat 2F57 */
	out$p address public initial(.outbuf),
	endOutBuf address public,
	pad6A05 address initial(.outbuf),
	pad6A07 byte initial(0),
	objFile(15) byte public initial('               '), /* 15 spaces */
	lstFile(15) byte public initial('               '), /* 15 spaces */
	asxref$tmp(*) byte public initial(':F0:ASXREF.TMP '),
	asxref(*) byte public initial(':F0:ASXREF '),
	asmax$ref(*) byte public initial(':F0:ASMAC.TMP '),
	srcLineCnt address public initial(1),
	bp6A4E(2) byte public at(.srcLineCnt),
	pad6A50(2) byte initial('  '),		/* protects for very big files */
	asciiLineNo(4) byte public initial('   0'),
	spIdx byte public,
	b6A57(4) bool public initial('   0'),
	ctlDEBUG bool public initial(0),	/* DEBUG */
	controls(1) byte public at(.ctlDEBUG),
	ctlMACRODEBUG bool public initial(FALSE),	/* MACRODEBUG */
	ctlXREF bool public initial(FALSE),	/* XREF */
	ctlSYMBOLS bool public initial(TRUE),	/* SYMBOLS */
	ctlPAGING bool public initial(TRUE),	/* PAGING */
	ctlTTY bool public initial(FALSE),	/* TTY */
	ctlMOD85 bool public initial(FALSE),	/* MOD85 */
	ctlPRINT bool public initial(TRUE),	/* PRINT */
	ctlOBJECT bool public initial(TRUE),	/* OBJECT */
	ctlMACROFILE bool public initial(FALSE),	/* MACROFILE */
	ctlPAGEWIDTH byte public initial(120),	/* PAGEWIDTH */
	ctlPAGELENGTH byte public initial(66),	/* PAGELENGTH */
	ctlINLCUDE byte initial(0),		/* INCLUDE */
	ctlTITLE bool public initial(0),	/* TITLE */
	ctlSAVE byte,				/* SAVE */
	ctlRESTORE byte,			/* RESTORE */
	ctlEJECT bool public initial(FALSE),	/* EJECT */
	ctlLIST bool public initial(TRUE),	/* LIST */	/* SAVE/RESTORE act on next 3 opts */
	ctlGEN bool public initial(TRUE),	/* GEN */
	ctlCOND bool public initial(TRUE),	/* COND */
	b6A6F byte public initial(TRUE),
	titleLen byte public initial(0),
	b6A71 byte public,
	pad6A72(3) byte initial(120, TRUE),
	controlSeen(12) bool public initial(0,0,0,0,0,0,0,0,0,0,0,0),
	saveStack(24) byte public,
	saveIdx byte public initial(0),
	ctlTITLESTR(64) byte public,
	tokBufLen byte public,
	tokType byte public,
	controlId byte public,
	tokBuf(64) byte public,
	tokBufIdx byte public initial(0),
	w6B1E address public,
/* end */
	b6B20$9A77 byte public initial(FALSE);
$IF NOT OVL4
declare	MacroDebugOrGen byte public initial(0);
$ENDIF
/* ov4 compat 2F56 */
declare	scanCmdLine byte public,
	inDB byte public,
	inDW byte public,
	b6B25 byte public,
	has16bitOperand byte public,
	phase byte public,
	b6B28 byte public,
	b6B29 byte public,
	opType byte public,
	op byte public,
	b6B2C byte public,
	b6B2D byte public,
	finished byte public,
	b6B2F byte public,
	b6B30 byte public,
	b6B31 byte public,
	b6B32 byte public,
	b6B33 byte public,
	b6B34 byte public initial(TRUE),
	b6B35 byte public initial(TRUE),
	b6B36 byte public initial(FALSE),
	segSize(5) address public initial(0, 0, 0, 0, 0),	/* note treated as array */
	maxSegSize(3) address public initial(0, 0, 0),
	cmdLineBuf(129) byte public,
	actRead address public,
	errCnt address public,
	padw6BCB(2) byte,
	w6BCE address public,
	pad6BD0(3) byte initial(0),
	azero address public initial(0),
	cmdch$p address public initial(.cmdLineBuf),
	controls$p address public,
	b6BD9 byte public initial(FALSE),
	b6BDA byte public,
	ii byte public,
	b6BDC byte public,
	jj byte public;
/* end */
$IF OVL4
declare	b9B34 byte initial(0);
$ENDIF
/* ov4 compat 2F57 */
declare	curFileName$p address public,
	w6BE0 address public,
	bp6BE0(2) byte public at(.w6BE0),
	w6BE2 address public;
/* end */
end;
asm475785.pls
asm80$47$57$85: do;
$IF OVL4
$include(asm47.ipx)
$ELSEIF OVL5
$include(asm57.ipx)
$ELSE
$include(asm85.ipx)
$ENDIF

$IF BASE
declare	CHKOVL$2 lit	'call ovlMgr(2)';
$ELSE
declare	CHKOVL$2 lit	' ';
$ENDIF

declare b4A26(*) byte data(0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh,
			   0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh,
			   0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0,
			   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh,
			   0FFh, 0FFh, 0FFh, 0FFh, 0, 0FFh, 0FFh, 0FFh),
	b4A68(*) byte data(0, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0,
			   0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh,
			   0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0,
			   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh);

declare pad byte;

declare	accum(4) byte at(.accum1);


sub$4AAA: procedure(arg1b) public;
	declare arg1b byte;

	if b674A(arg1b) then
	do;
		if haveTokens then
		do;
			accum1 = sub$43DD;
			if alignTypes(arg1b) <> accum1$lb then
				call expressionError;
		end;
		else if alignTypes(arg1b) <> 3 then
			call expressionError;
	end;
	else
	do;
		b674A(arg1b) = TRUE;
		if haveTokens then
		do;
			accum1 = sub$43DD;
			if accum1 = 1 or accum1 = 2 then
				alignTypes(arg1b) = low(accum1);
			else
				call expressionError;
		end;
	end;
end;


cond2Acc: procedure(cond) public;	/* convert conditional result to accum1 */
	declare cond byte;		/* 0 or 0ffffh */

	accum1 = cond;
	if accum1 then
		accum1 = 0FFFFh;
end;

sub$4B57: procedure(arg1b) public;
	declare arg1b byte;

	if (b6855 and 47h) <> 0 then
		b6855 = b6855 and 0E7h or arg1b;
end;

handleOp: procedure public;
	do case op;
/* 0 */		;
/* 1 */		call sub4C1E$54FD;		/* white space ? */
/* 2 */		goto case3;			/* ( */
/* 3 */ case3:	do;				/* : or ) */
			if not (op = 2 and opType = 3) then
				call balanceError;

			if tokenType(0) = 11 then
			do;
				tokenSize(0) = 1;
				tokenAttr(0) = 0;
				b6B36 = 0FFh;
			end;

			b6B35 = b6B2F;
			if opType = 3 then
				b6B2C = 0FFh;
		end;
/* 4 */		accum1 = accum1 * accum2;	/* * */
/* 5 */		accum1 = accum1 + accum2;	/* + */
/* 6 */		do;				/* , */
			call syntaxError;
			call popToken;
		end;
/* 7 */		accum1 = accum1 - accum2;	/* - */
/* 8 */		;				/* unary + */
/* 9 */		do;				/* / */
			if accum2 = 0 then
				call valueError;

			accum1 = accum1 / accum2;
		end;
/* 10 */	accum1 = -accum1;			/* unary - */
/* 11 */	call cond2Acc(accum1 = accum2);		/* EQ */
/* 12 */	call cond2Acc(accum1 < accum2);		/* LT */
/* 13 */	call cond2Acc(accum1 <= accum2);	/* LE */
/* 14 */	call cond2Acc(accum1 > accum2);		/* GT */
/* 15 */	call cond2Acc(accum1 >= accum2);	/* GE */
/* 16 */	call cond2Acc(accum1 <> accum2);	/* NE */
/* 17 */	accum1 = not accum1;			/* NOT */
/* 18 */	accum1 = accum1 and accum2;		/* AND */
/* 19 */	accum1 = accum1 or accum2;		/* OR */
/* 20 */	accum1 = accum1 xor accum2;		/* XOR */
/* 21 */	do;					/* MOD */
			if accum2 = 0 then
				call valueError;
			accum1 = accum1 mod accum2;
		end;
/* 22 */	do;					/* SHL */
			if accum2$lb <> 0 then
				accum1 = shl(accum1, accum2);
		end;
/* 23 */	do;					/* SHR */
			if accum2$lb <> 0 then
				accum1 = shr(accum1, accum2);
		end;
/* 24 */	do;					/* HIGH */
			accum1 = high(accum1);
			call sub$4B57(10h);
		end;
/* 25 */	do;					/* LOW */
			accum1 = low(accum1);
			call sub$4B57(8);
		end;
/* 26 */	do;					/* DB ? */
			if tokenType(0) <> 10 then
			do;
				accum1 = sub$43DD;
				if accum1$hb - 1 < 0FEh then
					call valueError;
				b6B28 = 22h;
				if (b6855 and 18h) = 18h then
				do;
					call valueError;
					b6855 = b6855 and 0E7h or 8;
				end;
			end;
			else
			do;
				b6855 = 0;
				tokenType(0) = 0Bh;
			end;

			if sub$425B(b6858) then
				call operandError;
			b6B2D = 0Bh;
			inDB = TRUE;
		end;
/* 27 */	do;					/* DW ? */
			b6B2D = 0Bh;
			inDW = TRUE;
		end;
/* 28 */	do;					/* DS ? */
			segSize(activeSeg) = segSize(activeSeg) + accum1;
			b68AB = 0FFh;
		end;
/* 29 */ case29:					/* EQU ? */
		do;
			b68AB = 0FFh;
			if (b6855 and 40h) = 40h then
			do;
				call expressionError;
				b6855 = 0;
			end;
			b6EC4$9C3A = 1;
			call sub5819$5CE8(accum1, 34 - op);	/* 4 for set, 5 for equ */
			b6B30 = 0;
		end;
/* 30 */	goto case29;				/* SET ? */
/* 31 */	do;					/* ORG ? */
			b68AB = 0FFh;
			if (b6855 and 40h) <> 40h then
			do;
				if (b6855 and 18h) <> 0 then
					if (b6855 and 7) <> activeSeg or (b6855 and 18h) <> 18h then
						call expressionError;
			end;
			else
				call expressionError;

			if ctlOBJECT then
				if segSize(activeSeg) > maxSegSize(activeSeg) then
					maxSegSize(activeSeg) = segSize(activeSeg);
			segSize(activeSeg) = accum1;
		end;
/* 32 */	do;					/* END ? */
			if tokenSP > 0 then
			do;
				startOffset = sub$43DD;
				startDefined = 1;
				startSeg = b6855 and 7;
				if (b6855 and 40h) = 40h then
					call expressionError;
				if sub$425B(b6858) then
					call operandError;

				b68AB = 0FFh;
			end;
$IF OVL4
			jj = b905E;
			b905E = 0;

			if macroCondSP > 0 or jj then
$ELSE
			if ifDepth > 0 then
$ENDIF
				call nestingError;
			if opType <> 1 then
				call syntaxError;
			if b6B35 then
				b6B33 = 0FFh;
			else
				call syntaxError;

		end;
/* 33 */	do;					/* IF ? */
			if b6B35 then
			do;
				b6B32 = 0FFh;
				call nestIF(2);
				b6881 = 0FFh;
				if skipping(0) = 0 then
					skipping(0) = not ((low(accum1) and 1) = 1);
				inElse(0) = 0;
			end;
		end;
/* 34 */	do;					/* ELSE ? */
			b6B32 = 0FFh;
$IF OVL4
			if macroCondStk(0) <> 2 then
$ELSE
			if ifDepth = 0 then
$ENDIF
				call nestingError;
			else if not inElse(0) then
			do;
				if not skipping(0) then
					skipping(0) = 0FFh;
				else
					skipping(0) = skipping(ifDepth);
				inElse(0) = 0FFh;
			end;
			else
				call nestingError;
		end;
/* 35 */	do;					/* ENDIF ? */
			if b6B35 then
			do;
				b6B32 = 0FFh;
				call unnestIF(2);
			end;
		end;
/* 36 */	do;					/* LXI ? */
			if nameLen = 1 then
				if extName(0) = 4Dh then
					call syntaxError;
			call sub$450F(85h);
		end;
/* 37 */	do;				/* POP DAD PUSH INX DCX ? */
			if nameLen = 1 then
				if extName(0) = 4Dh then
					call syntaxError;
			call sub$450F(5);
		end;
/* 38 */	call sub$450F(7);		/* LDAX STAX ? */
/* 39 */	call sub$450F(2);		/* ADC ADD SUB ORA SBB XRA ANA CMP ? */
/* 40 */	call sub$450F(8);		/* ADI OUT SBI ORI IN CPI SUI XRI ANI ACI ? */
/* 41 */	call sub$450F(46h);		/* MVI ? */
/* 42 */	call sub$450F(6);		/* INR DCR ? */
/* 43 */	call sub$450F(36h);		/* MOV */
/* 44 */	call sub$450F(0);		/* CZ CNZ JZ STA JNZ JNC LHLD */
						/* CP JC SHLD CPE CPO CM LDA JP JM JPE */
						/* CALL JPO CC CNC JMP */
/* 45 */	call sub$450F(0);		/* RNZ STC DAA DI SIM SPHL RLC */
						/* RP RAL HLT RM RAR RPE RET RIM */
						/* PCHL CMA CNC RPO EI XTHL NOP */
						/* RC RNX XCHG RZ RRC */
/* 46 */	call sub$450F(6);		/* RST */
/* 47 */	activeSeg = 0;			/* ASEG ? */
/* 48 */	do;				/* CSEG ? */
			activeSeg = 1;
			call sub$4AAA(0);
		end;
/* 49 */	do;				/* DSEG ? */
			activeSeg = 2;
			call sub$4AAA(1);
		end;

/* 50 */	do;				/* PUBLIC */
			b6748 = 0FFh;
			b6EC4$9C3A = 0;
			call sub5819$5CE8(0, 6);
		end;
/* 51 */	do;				/* EXTRN ? */
			b6749 = 0FFh;
			if externId = 0 and isPhase1 and ctlOBJECT then
			do;
				CHKOVL$2;
				call writeModhdr;
			end;
			b6EC4$9C3A = 0;
			call sub5819$5CE8(externId, 2);
			if isPhase1 and ctlOBJECT and not b6754 then
			do;
				CHKOVL$2;
				call writeExtName;
			end;
			if not b6754 then
				externId = externId + 1;
			b6754 = 0;
		end;
/* 52 */	do;				/* NAME */
			if tokenSP <> 0 and b6743 then
			do;
				call move(6, .spaces6, .aModulePage);
				call move(moduleNameLen := nameLen, .extName, .aModulePage);
			end;
			else
				call sourceError('R');

			call popToken;
		end;
/* 53 */	segSize(SEG$STACK) = accum1;	/* STKLN ? */
$IF OVL4
/* 54 */	call sub$7517;			/* MACRO ? */
/* 55 */	call sub$753E;
/* 56 */	call sub$75FF;			/* ENDM */
/* 57 */	call sub$76CE;			/* EXITM */
/* 58 */	do;
			tmac$mtype = 4;
			call sub$7327;
		end;
/* 59 */	call sub$72A4(1);		/* IRP ? */
/* 60 */	call sub$72A4(2);		/* IRPC */
/* 61 */	call sub$770B;
/* 62 */	call sub$7844;			/* REPT ? */
/* 63 */	call sub$787A;			/* LOCAL */
/* 64 */	call sub$78CE;
/* 65 */	do;				/* NUL */
			call cond2Acc(tokenType(0) = 41h);
			call popToken;
			b6855 = 0;
		end;
$ENDIF
	end;

	if op <> 1 then
		b6743 = 0;
end;

sub$518F: procedure public;

	sub$53C0: procedure byte;
		if b6B29 > 3 then
			if b6B29 <> 6 then
				if b6B29 < 1Ah then
					return TRUE;
		return FALSE;
	end;

	sub$53DF: procedure(arg1b) byte;
		declare arg1b byte;
		return arg1b = 9 or arg1b = 64h;
	end;


	sub$53F8: procedure;
		if not b4A68(op) then
			b6B34 = 0;
	end;



	do while 1;
		if not (b6B29 = 1 or b6B29 >= 20h and b6B29 <= 23h) and skipping(0)
$IF OVL4
	           or (b4181(b6B29) < 128 or b9058) and b905E

$ENDIF
	        then
		do;
			b6885 = 0;
			call popToken;
			return;
		end;
		
		if phase <> 1 then
			if b6B25 then
				if sub$53C0 then
					if getPrec(b6B29) <= getPrec(opStack(opSP)) then
						call expressionError;

		if getPrec(opType := b6B29) > getPrec(op := opStack(opSP)) or opType = 2 then
		do;
			if opSP >= 10h then
			do;
				opSP = 0;
				call stackError;
			end;
			else
				opStack(opSP := opSP + 1) = opType;
			if opType = 2 then
			do;
				b6B2F = b6B35;
				b6B35 = 0FFh;
			end;
			if phase > 1 then
				b6B25 = sub$53C0;
			return;
		end;

		b6B25 = 0;
		if not b6B35 and op > 3 then
			call syntaxError;

		if op = 0 then
			op = opType;
		else
			opSP = opSP - 1;
		

		if (b6B28 := b4181(op)) then
		do;
			accum2 = sub$43DD;
			b6856 = b6855;
			w685C = w685A;
			b6859 = b6858;
		end;

		if (b6B28 := ror(b6B28, 1)) then
			accum1 = sub$43DD;

		if not b6857 then
			b6857 = sub$53DF(b6858) or sub$53DF(b6859);

		b6B2D = 0Ch;
		if op > 3 and op < 1Ah then	/* expression op */
			call sub$4291;
		else
		do;
			call sub$53F8;
			call sub$4274;
		end;

		call handleOp;
		if not b4A26(op) then
			b6B35 = 0;

		if b6B2C then
		do;
			b6B2C = 0;
			return;
		end;

		if op <> 1Ch and b68AB then		/* DS */
			w68A6 = accum1;

		if (b6B28 and 1Eh) <> 0 then
			call pushToken(b6B2D);

		do ii = 0 to 3;
			if (b6B28 := ror(b6B28, 1)) then
				call collectByte(accum(ii));
		end;

		tokenAttr(0) = b6855;
		tokenSymId(0) = w685A;
		if ror(b6B28, 1) then
			if opType = 6 then
			do;
				b6B29 = op;
				b6B35 = 0FFh;
			end;
	end;
end;



sub$540D: procedure public;
	do while finished = 0;
		call sub$3F19;
		call sub$518F;
	end;
end;

end;
asm4cov2.pls
asm4c$ov2: do;
$IF OVL4
$include(asm4c.ipx)
$ELSE
$include(asmov2.ipx)
$ENDIF

declare	fixupInitialLen(*) byte data(1, 2, 1, 3),
	fixupRecLenPtrs(*) address data(.r$publics.len, .r$interseg.len, .r$extref.len, .r$content.len),
	fixupRecLenChks(*) byte data(123, 58, 57, 124),
	b6D7E(*) byte data(10, 12h, 40h); /* 11 bits 00010010010 index left to right */


declare	r$modhdr MODHDR$T initial(2), (dta$p, recSym$p) address;



writeRec: procedure(rec$p) public;
	declare rec$p address,
		len$p address, recLen address,
		i byte, crc byte;
	declare len based len$p address;
	declare ch based len$p byte;

	len$p = rec$p + 1;
	recLen = (len := len + 1) + 3;	/* include crc byte + type + len word */
	crc = 0;			/* crc */
	len$p = len$p - 1;
	do i = 2 to recLen;
		crc = crc - ch;
		len$p = len$p + 1;
	end;
	ch = crc;			/* insert crc byte */
	call write(objfd, rec$p, recLen, .statusIO);
	call ioErrChk;
end;


getFixupType: procedure byte;
	declare attr byte;
	if ((attr := tokenAttr(spIdx)) and 5Fh) = 0 then
		return 3;
	if (attr and 40h) <> 0 then	/* external */
		return 2;
	if (fixupSeg := attr and 7) = 0 then	/* absolute */
		return 3;
	return (fixupSeg <> activeSeg) and 1;
end;


reinitFixupRecs: procedure public;
	declare i byte;
	declare wrd based dta$p address;
	do i = 0 to 3;
		ii = (i - 1) and 3;
		dta$p = fixupRecLenPtrs(ii);
		if wrd > fixupInitialLen(ii) then
			call writeRec(dta$p - 1);

		wrd = fixupInitialLen(ii);
		fixIdxs(ii) = 0;
		if curFixupType <>  ii then
			initFixupReq(ii) = TRUE;
	end;
	r$content.offset = w6752 + segSize(r$content.segid := activeSeg);
	r$publics.segid = curFixupHiLoSegId;
	r$interseg.segid = tokenAttr(spIdx) and 7;
	r$interseg.hilo, r$extref.hilo = curFixupHiLoSegId;
end;



sub$6EE1: procedure;
	declare effectiveOffset address;

	declare wrd based dta$p address;

	dta$p = fixupRecLenPtrs(curFixupType := getFixupType);
	if wrd > fixupRecLenChks(curFixupType) or r$content.len + tokenSize(spIdx) > 124 then
		call reinitFixupRecs;

	if firstContent then
	do;
		firstContent = FALSE;
		r$content.offset = segSize(r$content.segid := activeSeg) + w6752;
	end;
	else if r$content.segid <> activeSeg
	      or (effectiveOffset := r$content.offset + fix6Idx) <> segSize(activeSeg) + w6752
	      or effectiveOffset < r$content.offset then
		call reinitFixupRecs;


	do case curFixupType;
/* 0 */		do;
			if initFixupReq(0) then
			do;
				initFixupReq(0) = FALSE;
				r$publics.segid = curFixupHiLoSegId;
			end;
			else if r$publics.segid <> curFixupHiLoSegId then
				call reinitFixupRecs;
		end;
/* 1 */		do;
			if initFixupReq(1) then
			do;
				initFixupReq(1) = FALSE;
				r$interseg.segid = tokenAttr(spIdx) and 7;
				r$interseg.hilo = curFixupHiLoSegId;
			end;
			else if r$interseg.hilo <> curFixupHiLoSegId or (tokenAttr(spIdx) and 7) <> r$interseg.segid then
				call reinitFixupRecs;
		end;
/* 2 */		do;
			if initFixupReq(2) then
			do;
				initFixupReq(2) = FALSE;
				r$extref.hilo = curFixupHiLoSegId;
			end;
			else if r$extref.hilo <> curFixupHiLoSegId then
				call reinitFixupRecs;

		end;
/* 3 */		;		/* abs no fixup */
	end;
end;


recAddContentBytes: procedure;
	declare i byte;

	declare ch based contentBytePtr byte;

	do i = 1 to tokenSize(spIdx);
		r$content.dta(fix6Idx) = ch;
		fix6Idx = fix6Idx + 1;
		contentBytePtr = contentBytePtr + 1;
	end;
	r$content.len = r$content.len + tokenSize(spIdx);
end;



intraSegFix: procedure;
	r$reloc.len = r$reloc.len + 2;
	r$reloc.dta(fix22Idx) = fixOffset;
	fix22Idx = fix22Idx + 1;
end;


interSegFix: procedure;
	r$interseg.len = r$interseg.len + 2;
	r$interseg.dta(fix24Idx) = fixOffset;
	fix24Idx = fix24Idx + 1;
end;

externalFix: procedure;
	r$extref.dta(fix20Idx) = tokenSymId(spIdx);
	r$extref.dta(fix20Idx + 1) = fixOffset;
	r$extref.len = r$extref.len + 4;
	fix20Idx = fix20Idx + 2;
end;

sub$7131: procedure;
	curFixupHiLoSegId = shr(tokenAttr(spIdx) and 18h, 3);
	fixOffset = segSize(activeSeg) + w6752;
	if not (inDB or inDW) and (tokenSize(spIdx) = 2 or tokenSize(spIdx) = 3) then
		fixOffset = fixOffset + 1;
	call sub$6EE1;
	contentBytePtr = w68A2;
	call recAddContentBytes;
	do case getFixupType;
/* 0 */ 	call intraSegFix;
/* 1 */		call interSegFix;
/* 2 */		call externalFix;
/* 3 */		;			/* no fixup as absolute */
	end;
end;


writeExtName: procedure public;
	declare i byte;

	if r$extnames1.len + 9 > 125 then	/* check room for extName */
	do;
		call writeRec(.r$extnames1);	/* flush existing extNam Record */
		r$extnames1.type = OMF$EXTNAMES;
		r$extnames1.len = 0;
		extNamIdx = 0;
	end;
	r$extnames1.len = r$extnames1.len + nameLen + 2;	/* update length for this ref */
	r$extnames1.dta(extNamIdx) = nameLen;		/* write len */
	extNamIdx = extNamIdx + 1;
	do i = 0 to nameLen;			/* and name */
		r$extnames1.dta(extNamIdx + i) = extName(i);
	end;

	r$extnames1.dta(extNamIdx + nameLen) = 0;	/* and terminating 0 */
	extNamIdx = extNamIdx + nameLen + 1;	/* update where next ref writes */
end;

writeSymbols: procedure(isPublic);			/* isPublic= TRUE -> PUBLICs else LOCALs */
    declare isPublic byte;
    declare segId byte;
    declare symb based curTokenSym$p (1) byte;

    addSymbol: procedure;
        declare offsetInSeg$p address;
        declare symNam based dta$p (1) byte;
        declare len based recSym$p byte;
        declare symOffset based recSym$p address;
        declare offsetInSeg based offsetInSeg$p address;

        if (symb(1) and 40h) <> 0 then
            return;
        offsetInSeg$p = curTokenSym$p - 2;
        symOffset = offsetInSeg; 
        call unpackToken(curTokenSym$p - 6, (dta$p := (recSym$p := recSym$p + 2) + 1));
        symNam(6) = ' ';	/* trailing space to ensure end */
        len = 0;

        do while symNam(0) <> ' ';	/* find length of name */
            len = len + 1;
            dta$p = dta$p + 1;
        end;
        symNam(0) = 0;			/* terminate name with 0 */
        recSym$p = dta$p + 1;
    end;

    flushSymRec: procedure;
        if (r$publics.len := recSym$p - .r$publics.segid) > 1 then	/* something to write */
            call writeRec(.r$publics);
        r$publics.type = (isPublic and 4) or OMF$LOCALS;		/* PUBLIC or LOCAL */
        r$publics.segid = segId;
        recSym$p = .r$publics.dta;
    end;

    recSym$p = .r$publics.dta;
    do segId = 0 to 4;
        call flushSymRec;
        curTokenSym$p = symTab(1) - 2;		/* point to type byte of user symbol (-1) */

        do while (curTokenSym$p := curTokenSym$p + 8) < endSymTab(1);
        	if recSym$p > .r$publics.dta(114) then		/* make sure there is room */
        		call flushSymRec;

            if (symb(1) and 7) = segId
$IF OVL4
               and symb(0) <> 3Ah and sub$3FA9
$ENDIF
               and not testBit(symb(0), .b6D7E) and
               (not isPublic or (symb(1) and 20h) <> 0) then
       	        call addSymbol;
        end;
        call flushSymRec;
    end;
end;



writeModhdr: procedure public;
	declare w based dta$p address;
	declare b based dta$p byte;
	declare i byte;

	/* fill the module name */
	call move((r$modhdr.dta(0) := moduleNameLen), .aModulePage, .r$modhdr.dta(1));
	dta$p = .r$modhdr + moduleNameLen + 4;
	w = 0;	/* the two xx bytes */
	dta$p = dta$p + 1;	/* past first x byte */

	if segSize(SEG$CODE) < maxSegSize(SEG$CODE) then	/* code segment */
		segSize(SEG$CODE) = maxSegSize(SEG$CODE);
	if segSize(SEG$DATA) < maxSegSize(SEG$DATA) then	/* data segment */
		segSize(SEG$DATA) = maxSegSize(SEG$DATA);

	do i = 1 to 4;
		dta$p = dta$p + 1;
		b = i;		/* seg id */
		dta$p = dta$p + 1;
		w = segSize(i);	/* seg size */
		dta$p = dta$p + 2;
		b = alignTypes(i - 1);	/* aln typ */
	end;
	r$modhdr.len = moduleNameLen + 19;	/* set record length */
	call writeRec(.r$modhdr);
end;

writeModend: procedure public;
	declare lenb byte at (.r$eof.len);
	r$modend.modtyp = startDefined;
	r$modend.segid = startSeg;
	r$modend.offset = startOffset;
	call writeRec(.r$modend);
	lenb = 0;
	call writeRec(.r$eof);
end;

ovl8: procedure public;
	w6752 = 0;
	b689A = 1;
	spIdx = 1;
	if b6B33 then
		;
	else
	do while spIdx <> 0;
		spIdx = sub$4646;
		w68A0 = tokStart(spIdx) + tokenSize(spIdx);
		w68A2 = tokStart(spIdx);
		if isSkipping or not b6B34 then
			w68A0 = w68A2;
		if w68A0 > w68A2 then
		do;
			call sub$7131;
			w6752 = w6752 + tokenSize(spIdx);
		end;
		if not(inDB or inDW) then
			spIdx = 0;
	end;
end;


ovl11: procedure public;
	if externId <> 0 then
	do;
		call seek(objfd, SEEKABS, .azero, .azero, .statusIO);	/* rewind */
		call writeModhdr;
		call seek(objfd, SEEKEND, .azero, .azero, .statusIO);
	end;
	r$publics.type = OMF$PUBLICS;		  /* public declarations record */
	r$publics.len = 1;
	r$publics.segid = SEG$ABS;
	r$publics.dta(0) = 0;
	call writeSymbols(TRUE);	  /* EMIT PUBLICS */
	if ctlDEBUG then
		call writeSymbols(FALSE); /* EMIT LOCALS */
end;
end;
keywrd.plm
keywords: do;
declare copyright(*) byte data('(C) 1976,1977,1979,1980 INTEL CORP');

declare stdKeywords(*) address public initial(
/*
	4 byte packed keyword
	byte opcode base
	byte offset to next entry or 0 if end
	byte type
	byte special location
*/
	0A528h,	0,	0,	10h,	/* NE */
	63B0h,	0,	0CCh,	2Ch,	/* CZ */
	0,	0,	0,	0,	/* */
	0BFB6h,	0,	0C0h,	2Dh,	/* RNZ */
	0B354h,	0,	0C1h,	25h,	/* POP */
	6EE9h,	0,	0,	1Dh,	/* EQU */
	0AD70h,	0,	0E800h,	13h,	/* OR */
	0A1A5h,	0,	0E806h,	29h,	/* MVI */
	0C6CFh,	0,	37h,	2Dh,	/* STC */
	0C6CDh,	6158h,	0,	1B05h,	/* STACK */
	6615h,	0,	27h,	2Dh,	/* DAA */
	988Dh,	0E100h,	0Ah,	26h,	/* LDAX */
	61F6h,	0,	0C4h,	2Ch,	/* CNZ */
	53CFh,	0,	0D888h,	27h,	/* ADC */
	53D0h,	0,	80h,	27h,	/* ADD */
	6748h,	0,	0D0F3h,	2Dh,	/* DI */
	0,	0,	0,	0,	/* */
	0,	0,	0,	0,	/* */
	0,	0,	0,	0,	/* */
	53D5h,	0,	0C8C6h,	28h,	/* ADI */
	6A40h,	0,	0F003h,	7,	/* E */
	0,	0,	0,	0,	/* */
	0,	0,	0,	0,	/* */
	0,	0,	0,	0,	/* */
	0A088h,	0,	0,	15h,	/* MOD */
	0AD83h,	0,	0,	1Fh,	/* ORG */
	0,	0,	0,	0,	/* */
	8F70h,	0,	0E8CAh,	2Ch,	/* JZ */
	68E9h,	76C0h,	0,	31h,	/* DSEG */
	0C488h,	0,	0,	1Eh,	/* SET */
	0,	0,	0,	0,	/* */
	0C521h,	0,	30h,	22Dh,	/* SIM */
	0,	0,	0,	0,	/* */
	0,	0,	0,	0,	/* */
	0A4A1h,	6A40h,	0,	34h,	/* NAME */
	0C6CDh,	0,	32h,	2Ch,	/* STA */
	0AE08h,	0,	0D3h,	28h,	/* OUT */
	6630h,	0,	0,	1Ah,	/* DB */
	8DB6h,	0,	0C2h,	2Ch,	/* JNZ */
	0,	0,	0,	0,	/* */
	6618h,	0,	0C009h,	25h,	/* DAD */
	8D9Fh,	0,	0D2h,	2Ch,	/* JNC */
	0A09Ah,	0,	0C040h,	2Bh,	/* MOV */
	8610h,	0,	0C000h,	21h,	/* IF */
	6E60h,	0,	0A800h,	20h,	/* END */
	9938h,	6400h,	0B82Ah,	2Ch,	/* LHLD */
	9600h,	0,	0C005h,	7,	/* L */
	0C6F6h,	0,	90h,	27h,	/* SUB */
	0C634h,	9600h,	0F9h,	2Dh,	/* SPHL */
	0C405h,	0,	0DEh,	28h,	/* SBI */
	0B3FBh,	0,	6,	7,	/* PSW */
	0BF4Fh,	0,	7,	2Dh,	/* RLC */
	5780h,	0,	0,	7,	/* B */
	0,	0,	0,	0,	/* */
	6220h,	0,	0F0F4h,	2Ch,	/* CP */
	0,	0,	0,	0,	/* */
	0AD85h,	0,	0F6h,	28h,	/* ORI */
	0B11Bh,	6A40h,	2,	5,	/* PAGE */
	0,	0,	0,	0,	/* */
	0,	0,	0,	0,	/* */
	5629h,	76C0h,	0,	2Fh,	/* ASEG */
	8750h,	0,	0DBh,	28h,	/* IN */
	6E60h,	8610h,	0D000h,	23h,	/* ENDIF */
	0,	0,	0,	0,	/* */
	8BD8h,	0,	0F0DAh,	2Ch,	/* JC */
	0AD7Dh,	0,	0B0h,	27h,	/* ORA */
	0C3FEh,	0,	98h,	27h,	/* SBB */
	0C6D7h,	9A10h,	0,	35h,	/* STKLN */
	0BFE0h,	0,	0F0h,	2Dh,	/* RP */
	0C4F8h,	6400h,	22h,	2Ch,	/* SHLD */
	0C078h,	0,	0C7h,	2Eh,	/* RST */
	6231h,	0,	0ECh,	2Ch,	/* CPE */
	0B436h,	9957h,	0E800h,	32h,	/* PUBLIC */
	0BDA0h,	0,	0E817h,	2Dh,	/* RAL */
	80E0h,	0,	0E876h,	2Dh,	/* HLT */
	6235h,	0,	0FEh,	28h,	/* CPI */
	0BF68h,	0,	0F8h,	2Dh,	/* RM */
	0,	0,	0,	0,	/* */
	0,	0,	0,	0,	/* */
	0BDA6h,	0,	1Fh,	2Dh,	/* RAR */
	805Bh,	7D00h,	0D000h,	18h,	/* HIGH */
	623Bh,	0,	0D8E4h,	2Ch,	/* CPO */
	0B447h,	7D00h,	0E0C5h,	25h,	/* PUSH */
	0,	0,	0,	0,	/* */
	0C6FDh,	0,	0F0D6h,	28h,	/* SUI */
	61A8h,	0,	0FCh,	2Ch,	/* CM */
	0,	0,	0,	0,	/* */
	0,	0,	0,	0,	/* */
	0BFF1h,	0,	0E8h,	2Dh,	/* RPE */
	62A9h,	76C0h,	0,	30h,	/* CSEG */
	0BE48h,	0,	0C9h,	2Dh,	/* RET */
	876Eh,	0,	4,	2Ah,	/* INR */
	0BEE1h,	0,	20h,	22Dh,	/* RIM */
	0,	0,	0,	0,	/* */
	0B16Ch,	9600h,	0E9h,	2Dh,	/* PCHL */
	988Dh,	0,	3Ah,	2Ch,	/* LDA */
	7000h,	0BF90h,	0,	33h,	/* EXTRN */
	8774h,	0,	0B003h,	25h,	/* INX */
	61B5h,	0,	2Fh,	2Dh,	/* CMA */
	0,	0,	0,	0,	/* */
	61B7h,	0,	3Fh,	2Dh,	/* CNC */
	0BFFBh,	0,	0E0h,	2Dh,	/* RPO */
	0C6CDh,	0E100h,	7002h,	26h,	/* STAX */
	0E5BDh,	0,	0A8h,	27h,	/* XRA */
	9A5Bh,	0,	0,	19h,	/* LOW */
	6D88h,	0,	0FBh,	2Dh,	/* EI */
	8DE0h,	0,	0F2h,	2Ch,	/* JP */
	6676h,	0,	0D005h,	2Ah,	/* DCR */
	6400h,	0,	2,	7,	/* D */
	555Dh,	0,	0A0h,	27h,	/* ANA */
	0E5C5h,	0,	0EEh,	28h,	/* XRI */
	8D68h,	0,	0FAh,	2Ch,	/* JM */
	5560h,	0,	0,	12h,	/* AND */
	5140h,	0,	3807h,	7,	/* A */
	0E614h,	9600h,	0E3h,	2Dh,	/* XTHL */
	0,	0,	0,	0,	/* */
	876Ch,	5449h,	1,	5,	/* INPAGE */
	5565h,	0,	0E6h,	28h,	/* ANI */
	9B00h,	0,	0,	0Ch,	/* LT */
	8DF1h,	0,	0EAh,	2Ch,	/* JPE */
	61C4h,	0,	20B8h,	27h,	/* CMP */
	7BC0h,	0,	0,	0Eh,	/* GT */
	6978h,	0,	7800h,	1Bh,	/* DW */
	6EC8h,	0,	0,	0Bh,	/* EQ */
	667Ch,	0,	500Bh,	25h,	/* DCX */
	6E1Fh,	6A40h,	0A000h,	22h,	/* ELSE */
	0A6D4h,	0,	0,	2Dh,	/* NOP */
	9F01h,	0AD95h,	0,	1C05h,	/* MEMORY */
	5FE0h,	9600h,	0CDh,	2Ch,	/* CALL */
	0BDD8h,	0,	0D8h,	2Dh,	/* RC */
	53ADh,	0,	80CEh,	28h,	/* ACI */
	0BF9Fh,	0,	0D0h,	2Dh,	/* RNC */
	0E36Ch,	76C0h,	0EBh,	2Dh,	/* XCHG */
	8DFBh,	0,	0E2h,	2Ch,	/* JPO */
	68D8h,	0,	0,	1Ch,	/* DS */
	0C620h,	0,	6,	8,	/* SP */
	9C40h,	0,	6,	7,	/* M */
	98A8h,	0,	3800h,	0Dh,	/* LE */
	6018h,	0,	0DCh,	2Ch,	/* CC */
	7D00h,	0,	5004h,	7,	/* H */
	61DFh,	0,	50D4h,	2Ch,	/* CNC */
	0C4F8h,	0,	0,	16h,	/* SHL */
	5DC0h,	0,	1,	7,	/* C */
	0C170h,	0,	0C8h,	2Dh,	/* RZ */
	0E556h,	0,	0,	14h,	/* XOR */
	7968h,	0,	0,	0Fh,	/* GE */
	0A6D8h,	0,	0,	11h,	/* NOT */
	0C4FEh,	0,	0,	17h,	/* SHR */
	9BB5h,	0,	1,	24h,	/* LXI */
	8D84h,	0,	0C3h,	2Ch,	/* JMP */
	0C03Fh,	0,	0Fh,	2Dh	/* RRC */
);


end;
start.pls
start: do;
$IF BASE
$include(asm801.ipx)
$ELSEIF OVL4
$include(asm41.ipx)
$ELSE
$include(asm51.ipx)
$ENDIF

$IF BASE
declare CHKOVL$0 lit	'call ovlMgr(0)',
	CHKOVL$1 lit	'call ovlMgr(1)',
	CHKOVL$2 lit	'call ovlMgr(2)',
	CHKOVL$3 lit	'call ovlMgr(3)';
$ELSE
declare CHKOVL$0 lit	' ',
	CHKOVL$1 lit	' ',
	CHKOVL$2 lit	' ',
	CHKOVL$3 lit	' ';
$ENDIF

$IF OVL4
declare w$3780 address public data(0),
	b$3782 byte public data(80h),
	b$3783 byte public data(81h);
$ENDIF

declare	spaces24(*) byte public data('         '),
	spaces15(*) byte public data('         '),
	spaces6(*) byte public data(' '),
	spaces5(*) byte public data(' '),
	spaces4(*) byte public data('  '),
	spaces2(*) byte public data('  ', 0),
	ascCRLF(*) byte public data(CR, LF, 0),
	signonMsg(*) byte public data(CR, LF),
	asmHeader(*) byte public data('ISIS-II 8080/8085 MACRO ASSEMBLER, V4.1', TAB, TAB),
	aModulePage(*) byte public data('MODULE ', TAB, ' PAGE ', 0),
	bZERO byte public data(0),
	bTRUE byte public data(TRUE),
	copyright(*) byte data('(C) 1976,1977,1979,1980 INTEL CORP'),
	aStack(*) byte public data(CR, LF, 'STACK', 0),
	aTable(*) byte public data(CR, LF, 'TABLE', 0),
	aCommand(*) byte public data(CR, LF, 'COMMAND', 0),
	aEof(*) byte public data(CR, LF, 'EOF', 0),
	aFile(*) byte public data(CR, LF, 'FILE', 0),
	aMemory(*) byte public data(CR, LF, 'MEMORY', 0),
	aError(*) byte public data(' ERROR', CR, LF, 0),
	aError$0(*) byte public data(' ERROR, ', CR,LF, 0),
	errStrs(*) address public data(.aStack, .aTable, .aCommand, .aEof, .aFile, .aMemory),
	errStrsLen(*) byte public data(7, 7, 9, 5, 6, 8),
	aBadSyntax(*) byte public data('BAD SYNTAX', CR, LF),
	aCo(*) byte public data(':CO:', 0);

$IF BASE
declare	loadedOvl byte initial(4),
	ovlFile(*) byte public initial(':F0:ASM80.OV0 ');
$ENDIF

physmem: procedure address public;
	declare top address at(4);

	return (top - 100h) and 0FF00h;
end;


getCmdCh: procedure byte public;
	declare cmdch based cmdch$p byte;
	declare ch byte;

	ch = cmdch;
	cmdch$p = cmdch$p + 1;
	if 'a' <= ch and ch <= 'z' then
		ch = ch and 5Fh;
	return ch;
end;	


ioErrChk: procedure public;
	if statusIO = 0 then
		return;
	call error(statusIO);
	call exit;
end;


flushout: procedure public;
	call write(outfd, .outbuf, out$p - .outbuf, .statusIO);
	out$p = .outbuf;
end;

outch: procedure(c) public;
	declare c byte;
	declare outc based out$p byte;

	if out$p = endOutBuf then
		call flushout;
	outc = c;
	out$p = out$p + 1;
end;

outStrN: procedure(s, n) public;
	declare s address, n byte;
	declare ch based s byte;

	do while n > 0;
		call outch(ch);
		s = s + 1;
		n = n - 1;
	end;
end;

$IF BASE
ovlMgr: procedure(ovl) public;
	declare ovl byte;
	declare entry$p address;

	if ovl > 4 then
	do;
		statusIO = 0Dh;
		call ioErrChk;
	end;
	if ovl <> loadedOvl then
	do;
		ovlFile(12) = ovl + '0';
		call load(.ovlFile, 0, 0, .entry$p, .statusIO);
		call ioErrChk;
		loadedOvl = ovl;
	end;
end;
$ENDIF

closeF: procedure(arg1w) public;
	declare arg1w address;

	call close(arg1w, .statusIO);
end;

isSpace: procedure byte public;
	return curChar = ' ';
end;

isTab: procedure byte public;
	return curChar = TAB;
end;

isWhite: procedure byte public;
	return isSpace or isTab;
end;

isRParen: procedure byte public;
	return curChar = ')';
end;

isCR: procedure byte public;
	return curChar = CR;
end;

isComma: procedure byte public;
	return curChar = ',';
end;

$IF OVL4
isLT: procedure byte public;
	return curChar = '<';
end;


isGT: procedure byte public;
	return curChar = '>';
end;

$ENDIF

isPhase1: procedure byte public;
	return phase = 1;
end;

skip2EOL: procedure public;
	if not isCR then
		do while getCh <> 0Dh;
		end;
end;


chkGenObj: procedure byte public;
$IF BASE
	return (phase > 2) and ctlOBJECT;
$ELSE
	return (phase = 2) and ctlOBJECT;
$ENDIF
end;


isPhase2Print: procedure byte public;
	return phase = 2 and ctlPRINT;
end;


wrConsole: procedure(buf$p, count) public;
	declare (buf$p, count) address;

	call write(0, buf$p, count, .statusIO);
	call ioErrChk;
end;


runtimeError: procedure(arg1b) public;
	declare arg1b byte;

	if b6BD9 then
		return;

	if isPhase1 and arg1b = 0 then
	do;
		b6B33 = TRUE;
		return;
	end;

	w6BE0 = .aError;		/* assume " ERROR\r\n" */
	if arg1b = 4 then		/* file error */
		w6BE0 = .aError$0;	/* replace with " ERROR, " */

	call wrConsole(errStrs(arg1b), errStrsLen(arg1b));	/* write the ERROR type */
	call wrConsole(w6BE0, 8);	/* write the ERROR string */
	if isPhase2Print then		/* repeat to the print file if required */
	do;
		call outStrN(errStrs(arg1b), errStrsLen(arg1b));
		call outStrN(w6BE0, 8);
	end;

	if arg1b = 4 or arg1b = 3 then	/* file or EOF error */
	do;
		if tokBufIdx = 0 then
		do;
			call wrConsole(.aBadSyntax, 12);
			if not scanCmdLine then
			do;
				call skip2NextLine;
				outfd = 0;
				CHKOVL$1;
				call printDecimal(srcLineCnt);	/* overlay 1 */
				call outch(LF);
			end;
		end;
		else
		do;
			call wrConsole(curFileName$p, tokBufIdx);
			call wrConsole(.ascCRLF, 2);
		end;
	end;

	if arg1b = 0 then	/* stack error */
	do;
		b6BD9 = TRUE;
		return;
	end;

	call exit;
end;

ioError: procedure(arg1w) public;
	declare arg1w address;
	declare ch based arg1w byte;

	tokBufIdx = 0;
	curFileName$p = arg1w;

	do while ch <> ' ' and ch <> 0dh and ch <> 9;
		tokBufIdx = tokBufIdx + 1;
		arg1w = arg1w + 1;
	end;
	if missingEnd then
		call runtimeError(3);	/* EOF error*/
	call runtimeError(4);		/* file error */
end;

inOpen: procedure(path$p, access) address public;
	declare (path$p, access) address;
	declare open$infd address;

	call open(.open$infd, path$p, access, 0, .openStatus);
	if openStatus <> 0 then
		call ioError(path$p);
	return open$infd;
end;


nibble2Ascii: procedure(n) byte public;
	declare n byte;
	n = (n and 0Fh) + '0';
	if n > '9' then
		n = n + 7;
	return n;
end;

put2Hex: procedure(arg1w, arg2b) public;
	declare arg1w address, arg2b byte;

	call arg1w(nibble2Ascii(ror(arg2b, 4)));
	call arg1w(nibble2Ascii(arg2b));
end;

blankAsmErrCode: procedure byte public;
	return asmErrCode = ' ';
end;

blankMorPAsmErrCode: procedure byte public;
	return blankAsmErrCode or asmErrCode = 'M' or asmErrCode = 'P';
end;


getNibble: procedure(bp, idx) byte public;
	declare bp address, idx byte;
	declare b based bp byte;
	declare n byte;

	bp = bp + shr(idx, 1);	/* index into buffer the number of nibbles */
	n = b;			/* pick up the byte there */
	if not idx then		/* pick up the right nibble */
		n = ror(n, 4);
	return n and 0Fh;	/* mask to leave just the nibble */
end;

sourceError: procedure(arg1b) public;
	declare arg1b byte;

	if not isSkipping or op = 22h then	/* ELSE */
	do;
		if b6749 then
			b6754 = TRUE;
		if blankAsmErrCode then
			errCnt = errCnt + 1;

		if blankMorPAsmErrCode or arg1b = 'L' or arg1b = 'U' then	/* no error or M, P L or U */
			if asmErrCode <> 'L' then	/* override unless already location counter error */
				asmErrCode = arg1b;

	end;
end;

$IF OVL4

sub$3D34: procedure(arg1b) public;
	declare arg1b byte;
	declare ch based w906A byte;

	ch = arg1b;
	if (w906A := w906A + 1) > w6870 then
		call runtimeError(1);	/* table error */
end;


sub$3D55: procedure(arg1b) public;
	declare arg1b byte;

	call sub$3D34(arg1b);
	if arg1b = 0Dh then
		call sub$3D34(0Ah);
end;

$ENDIF


preStatementControls: procedure public;

	do while getCh = '$';
		if isSkipping then
		do;
			call skip2NextLine;
			b6B20$9A77 = 0FFh;
$IF OVL4
			if b905E = 1 then
				b6897 = 0FFh;
$ENDIF
		end;
		else
		do;
			CHKOVL$0;
			call parseControls;
		end;
		call sub4C1E$54FD;
	end;
	reget = 1;
end;


initialControls: procedure public;
	cmdch$p = controls$p;
	scanCmdLine = TRUE;
	CHKOVL$0;
	call parseControls;
	if isPhase2Print then
	do;
		CHKOVL$1;
		call printCmdLine;
	end;
	if needToOpenFile then
		call openSrc;

	needToOpenFile, b6B20$9A77, scanCmdLine = bZERO;
	call preStatementControls;
	primaryValid = 0;
	ctlDEBUG = ctlDEBUG and ctlOBJECT;
	ctlXREF = ctlXREF and ctlPRINT;
	ctlSYMBOLS = ctlSYMBOLS and ctlPRINT;
	ctlPAGING = ctlPAGING and ctlPRINT;
end;


initLine: procedure public;
	startLine$p = inCh$p + 1;	
	lineChCnt = 0;
	if needToOpenFile then
		call openSrc;

	b68AD, has16bitOperand, b6B20$9A77, b689B, b687F, b6B25, b6B30, b6881, b6872, haveUserSymbol,
	inDB, inDW, b6B32, b68AB, b6884,
$IF OVL4
	b9059, b9060, 
$ENDIF
	b6885 = bZERO;

	b689C, b6B31, b6B34, b6B35 = bTRUE;
	ctlEJECT, b6857, tokenSP,
$IF OVL4
	b9058, argNestCnt,
$ENDIF
	tokenSize(0), tokenType(0), b6858, b6859, b6742, b6855 = bZERO;

	asmErrCode = ' ';
$IF OVL4
	macro$p = .macroLine;
	w919D = w906A;
	expandingMacro = expandingMacro > 0;
$ENDIF
	b689A = 1;
	srcLineCnt = srcLineCnt + 1;
$IF OVL4
	macro$p = .macroLine;
$ENDIF
	skipping(0) = skipping(0) > 0;
end;


start:
	call getAsmFile;
	phase = 1;
	call resetData;
	call initialControls;
$IF BASE
	if ctlMACROFILE then
	do;
		if physmem < 8001h then
			call runtimeError(5);	 /* memory error */
		if srcfd <> rootfd then
			call closeF(srcfd);
		call closeF(infd);
		ovlFile(12) = '4';		/* use macro asm version */
		call load(.ovlFile, 0, 1, 0, .statusIO);
		call ioErrChk;
	end;
	if physmem > 8001h then
	do;
		if srcfd <> rootfd then
			call closeF(srcfd);
		call closeF(infd);
		ovlFile(12) = '5';		/* use big memory asm version */
		call load(.ovlFile, 0, 1, 0, .statusIO);
		call ioErrChk;
	end;

	if MacroDebugOrGen then			/* attempt to use macro features */
		call runtimeError(2);		/* command error */
$ELSEIF OVL4
	macrofd = inOpen(.asmax$ref, 3);
$ENDIF

	if ctlOBJECT then
	do;
		call delete(.objFile, .statusIO);
		objfd = inOpen(.objFile, 3);
	end;

	if ctlXREF then
	do;
		xreffd = inOpen(.asxref$tmp, 2);
		outfd = xreffd;
	end;

	call sub$540D;
	phase = 2;
	if ctlOBJECT then
	do;
		CHKOVL$2;	/* for small version load in overlay 2 for writeRec & writeModhdr */
		if r$extnames1.len > 0 then
			call writeRec(.r$extnames1);	/* in overlay 2 */

		if externId = 0 then
			call writeModhdr;		/* in overlay 2 */
$IF NOT BASE
		call initRecTypes;
$ENDIF
	end;
$IF BASE
	if not ctlOBJECT or ctlPRINT then
$ENDIF
	do;
		if ctlPRINT then
			outfd = inOpen(.lstFile, 2);
		CHKOVL$3;
		call resetData;
		call initialControls;
		call sub$540D;
	end;
	if ctlPRINT then
	do;
		CHKOVL$1;
		call asmComplete;
		call flushout;
	end;

	if ctlOBJECT then
	do;
$IF BASE
		phase = 3;
		CHKOVL3;
		call resetData;
		call initRecTypes;
		call initialControls;
		call sub$540D;
		CHKOVL2;
$ENDIF
		call ovl11;
		call writeModend;
	end;

	if not strUCequ(.aCo, .lstFile) then
	do;
		CHKOVL$1;
		call ovl9;
	end;
	CHKOVL$1;
	call ovl10;
end;

asm4382.pls
asm43$82:
do;
$IF OVL4
$include(asm43.ipx)
$ELSE
$include(asm82.ipx)
$ENDIF

declare b3E5E(*) byte data(0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
			   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			   0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
			   0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0),
	b3EA0(*) byte data(36h, 0, 0, 0, 6, 0, 0, 2),
		/* bit vector 55 -> 0 x 24 00000110 0 x 16 0000001 */
		/* 29, 30, 55 */
	b3EA8(*) byte data(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0, 0, 0FFh,
			   0, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0,
			   0FFh, 0, 0, 0);
$IF OVL4
declare	b$3F88(*) byte data(41h, 90h, 0, 0, 0, 0, 0, 0, 0, 40h);
	/* bit vector 66 -> 10010000 0 x 56 01 */

skipWhite$2: procedure public;
	do while getCh = ' ' or isTab;
	end;
end;


sub$3FA9: procedure byte public;
	declare w9B5A address,
		wrd based w9B5A address;

	w9B5A = curTokenSym$p - 6;
	return (wrd < 4679h) or ctlMACRODEBUG or (4682h < wrd);
end;



seekM: procedure(arg1w);
	declare arg1w address;

	if (w6BE0 := arg1w - nxtMacroBlk) <> 0 then
	do;
		jj = SEEKFWD;
		if arg1w < nxtMacroBlk then
		do;
			w6BE0 = - w6BE0;
			jj = SEEKBACK;
		end;

		call seek(macrofd, jj, .w6BE0, .w$3780, .statusIO);
		call ioErrChk;
	end;
	nxtMacroBlk = arg1w + 1;
end;



readM: procedure(arg1w) public;
	declare arg1w address;
	declare w9B60 address;

	if arg1w >= maxMacroBlk then
		w9B60 = 0;
	else if arg1w = curMacroBlk then
		return;
	else
	do;
		call seekM(arg1w);
		call read(macrofd, .macroBuf, 128, .w9B60, .statusIO);
		call ioErrChk;
	end;

	tmac$blk, curMacroBlk = arg1w;
	macroBuf(w9B60) = 0FEh;	/* flag end of macro buffer */
end;


writeM: procedure public;
	if phase = 1 then
	do;
		call seekM(maxMacroBlk);
		maxMacroBlk = maxMacroBlk + 1;
		call write(macrofd, symHighMark, 128, .statusIO);
		call ioErrChk;
	end;
	w9114 = w9114 + 1;
end;



sub$40B9: procedure public;
	declare w9B62 address;

	if b905E then
	do;
		do while (w9B62 := w906A - symHighMark) >= 128;
			call writeM;
			symHighMark = symHighMark + 128;
		end;
		if w9B62 <> 0 then
			call move(w9B62, symHighMark, endSymTab(2));
		w906A = (symHighMark := endSymTab(2)) + w9B62;
	end;
end;

$ENDIF

skipWhite: procedure public;
	do while isWhite;
		curChar = getCh;
	end;
end;


$IF BASE
skipWhite$2: procedure public;
	do while getCh = ' ' or isTab;
	end;
end;
$ENDIF

skip2NextLine: procedure public;
	call skip2EOL;
	call chkLF;
end;



sub$3F19: procedure public;

	sub$416B: procedure;
		if opType = 0 then
			call expressionError;
		b6B25 = 0;
		opType = 0;
	end;


    do while 1;
	if b689C then
	do;
		call preStatementControls;
		b689C = 0;
	end;

	do case getChClass;
        case0:	call illegalCharError;		/* CC$BAD */
		;				/* CC$WS */
		do;				/* CC$SEMI */
$IF OVL4
			if not b9058 then
$ENDIF
			do;
				b6742 = 0FFh;
$IF OVL4
				if getChClass = CC$SEMI and b905E then
				do;
					b9059 = 0FFh;
					w906A = w906A - 2;
				end;
$ENDIF
				call skip2NextLine;
				b6B29 = 1;
				return;
			end;
		end;
		do;				/* CC$COLON */
			if not b6872 then
			do;
				if skipping(0)
$IF OVL4
				   or b905E
$ENDIF
				then
					call popToken;
				else
				do;
					b6EC4$9C3A = 2;
					call sub5819$5CE8(segSize(activeSeg), 2);
				end;

				b6B30 = 0;
				b6872, b6B31 = bTRUE;
			end;
			else
			do;
				call syntaxError;
				call popToken;
			end;

			call sub$467F(0, .extName);
			haveUserSymbol = FALSE;
			opType = 3;
		end;
		do;				/* CC$CR */
			call chkLF;
			b6B29 = 1;
$IF OVL4
			b9058 = 0;
$ENDIF
			return;
		end;
		do;				/* CC$PUNCT */
			if curChar = '+' or curChar = '-' then
$IF OVL4
				if not testBit(opType, .b$3F88) then /* not 0, 3 or 65 */
$ELSE
				if opType <> 0 and opType <> 3 then
$ENDIF
					curChar = curChar + 3;
			b6B29 = curChar - '(' + 2;
			return;
		end;
		do;				/* CC$DOLLAR */
			call pushToken(0Ch);
			call collectByte(low(segSize(activeSeg)));
			call collectByte(high(segSize(activeSeg)));
			if activeSeg <> 0 then
				tokenAttr(0) = tokenAttr(0) or activeSeg or 18h;
			call sub$416B;
		end;
		do;				/* CC$QUOTE */
$IF OVL4
			if b6B29 = 37h then
			do;
				call illegalCharError;
				return;
			end;
			if b905E then
				b9058 = not b9058;
			else
$ENDIF
			do;
				call getStr;
				if b6B31 then
					call sub$43D2;
				call sub$416B;
			end;
		end;
		do;				/* CC$DIGIT */
			call getNum;
			if b6B31 then
				call sub$43D2;
			call sub$416B;
		end;
		do;				/* CC$LET */
$IF OVL4
			w919F = w906A - 1;
$ENDIF
			call getId(9);
			if tokenSize(0) > 6 then
				tokenSize(0) = 6;

			if ctlXREF then
			do;
				call move(6, .extName, .b6879);
				call move(6, .spaces6, .extName);
			end;

			call move(tokenSize(0), curTokStart, .extName);
			nameLen = tokenSize(0);
			call packToken;
			if haveUserSymbol then
			do;
				b687F = 0FFh;
				haveUserSymbol = FALSE;
			end;


$IF OVL4
			if lookup(2) <> 9 and b905E then
			do;
				if not b9058 or (jj := tokenType(0) = 0) and (curChar = 26h or mem(w919F-1) = 26h) then
				do;
					w906A = w919F;
					call sub$3D55(jj + 81h);
					call sub$3D34(sub$43DD);
					call sub$3D55(curChar);
					b6B29 = 9;
				end;
			end;
			else if b6B29 <> 37h and not b905E = 2 then
$ENDIF
			do;
				if lookup(0) = 9 then		/* not a key word */
				do;
					tokenType(0) = lookup(1);	/* look up in symbol space */
					haveUserSymbol = TRUE;		/* not a key word */
				end;

				b6B29 = tokenType(0);
				b6885 = b3EA8(tokenType(0));
				if not b3E5E(tokenType(0)) then
					call popToken;

				if b687F then
				do;
					call sub$467F((not testBit(b6B29, .b3EA0)) and 1, .b6879);
					b687F = 0;
				end;
			end;
$IF OVL4
			if b905E = 1 then
			do;
				if b6B29 = 3Fh then
				do;
					b905E = 2;
					if b6897 then
						call syntaxError;
					b6897 = 0;
				end;
				else
				do;
					b6897 = 0;
					b905E = 0FFh;
				end;
			end;

			if b6B29 = 41h then
				call pushToken(40h);
$ENDIF
			if b6B29 < 0Ah or b6B29 = 9 or 80h then
			do;
				call sub$416B;
				if b6B31 then
					call sub$43D2;
			end;
			else
			do;
				b6B31 = 0;
				return;
			end;
		end;
$IF OVL4
		do;				/* 10? */
			b6BDA = 0;
			call sub$73AD;
			if b6BDA then
				return;
		end;
		do;				/* CC$ESC */
			if expandingMacro then
			do;
				skipping(0) = 0;
				b6B29 = 40h;
				return;
			end;
			else
				goto case0;
		end;
$ENDIF
	end;
    end;
end;

end;
as4483.pls
as4483: do;

/* force the non standard code generation of outStrN and put2Hex */

outStrN: procedure(s, n) external; declare s address, n address; end;
$IF OVL4
put2Hex: procedure(arg1w, arg2w) external; declare arg1w address, arg2w address; end;
$include(asm44.ipx)
$ELSE
$include(asm83.ipx)
$ENDIF
declare b4181(*) byte public data(0, 80h, 0, 0, 0Fh, 0Fh, 80h, 0Fh, 0Dh, 0Fh,
			   0Dh, 0Fh, 0Fh, 0Fh, 0Fh, 0Fh, 0Fh, 0Dh, 0Fh, 0Fh,
			   0Fh, 0Fh, 0Fh, 0Fh, 0Dh, 0Dh, 40h, 4Dh, 1, 1,
			   1, 1, 80h, 1, 0, 0, 47h, 7, 7, 7,
			   17h, 47h, 7, 47h, 37h, 5, 7, 0, 0, 0,
			   40h, 40h, 0, 1
$IF OVL4
			   ,80h, 40h, 80h, 0, 40h, 80h, 80h, 40h, 81h, 0C0h, 80h, 0Dh
$ENDIF
			   ),

	b41B7(*) byte data(41h, 0, 0, 0, 19h, 40h, 0, 1Ch, 0, 0),
		/* bit vector 66 -> 0 x 24 00011001 01000000 00000000 00011100 00000000 00 */
	b41C1(*) byte data(1Ah, 5, 80h, 0, 0C0h),
		/* bit vector 27 -> 00000101 10000000 00000000 110 */
	b41C6(*) byte data(57h, 71h, 0F4h, 57h, 76h, 66h, 66h, 67h, 77h, 77h, 77h, 55h),
		/* bit vector 88 -> 01110001 11110100 01010111 01110110
                                    01100110 01100110 01100111 01110111
				    01110111 01110111 01010101 */
	b41D2(*) byte data(57h, 6, 2, 20h, 0, 0, 0, 0, 0, 0, 0, 22h),
		/* bit vector 88 -> 00000110 00000010 00100000 00000000
				    00000000 00000000 00000000 00000000
				    00000000 00000000 00100010 */ 
	b41DE(*) byte data(3Ah, 0FFh, 80h, 0, 0, 0Fh, 0FEh, 0, 20h),
		/* bit vector 59 -> 11111111 10000000 00000000 00000000
				    00001111 11111110 00000000 001 */
	precedence(*) byte data(0, 0, 0, 0, 8, 7, 1, 7, 7, 8, 7, 6, 6, 6, 6, 6, 6,
			   5, 4, 3, 3, 8, 8, 8, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1,
			   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			   1, 1, 1
$IF OVL4
	       /* extra */ ,0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0Ah
$ENDIF
			   );


testBit: procedure(bitIdx, bitVector) byte public;
	declare bitIdx byte, bitVector address;
	declare ch based bitVector byte;

	if ch < bitIdx then
		return 0;
	
	bitVector = bitVector + shr(bitIdx, 3) + 1;
	return (ch and ROR(1, (bitIdx and 7) + 1)) <> 0;
end;

sub$425B: procedure(arg1b) byte public;
	declare arg1b byte;

	return arg1b = 7 or arg1b = 8;
end;

sub$4274: procedure public;
	if testBit(op, .b41B7) then
		if sub$425B(b6858) then
			call operandError;
end;

sub$4291: procedure public;
	if sub$425B(b6858) then
		call operandError;
	if (b4181(op) and 2) = 0 then
		b6856 = 0;
	else if sub$425B(b6859) then
		call operandError;

	b6858 = 0Ch;
	bp6BE0(0) = (b6855 and 18h) <> 0;
	bp6BE0(1) = (b6856 and 18h) <> 0;
	if (b6855 and 7) <> 0 then
		if (b6856 and 7) <> 0 then
			if ((b6855 xor b6856) and 1Fh) <> 0 then
				call expressionError;
	if (ii := (b6855 and 40h) <> 0) or (b6BDC := (b6856 and 40h) <> 0) then
	do;
		if op = 5 then	/* +? (PAGE INPAGE)? */
			if not (ii or bp6BE0(0)) then
			do;
				w685A = w685C;
				b6855 = b6856;
				return;
			end;
		if b6BDC or bp6BE0(1) or not testBit(op, .b41C1) then
			goto L4394;
		else
			return;
	end;
	jj = shl(op - 4, 2) or (bp6BE0(0) and 2) or (bp6BE0(1) and 1);
	if testBit(jj, .b41C6) then
L4394:	do;
		call expressionError;
		b6855 = 0;
		return;
	end;
	if testBit(jj, .b41D2) then
	do;
		if not bp6BE0(0) then
			b6855 = b6856;
		return;
	end;
	b6855 = 0;
end;


swapAccBytes: procedure public;
	declare b6C17 byte;
	b6C17 = accum1$lb;
	accum1$lb = accum1$hb;
	accum1$hb = b6C17;
end;



sub$43D2: procedure public;
	b6B30 = 0FFh;
	b6B31 = 0;
end;



sub$43DD: procedure address public;
	declare s based curTokStart(1) byte,
		wrd$p address,
		wrd based wrd$p address;
$IF OVL4
	logError: procedure(arg1b);
		declare arg1b byte;

		if tokenType(tokenSP) <> 40h then
		do;
			call sourceError(arg1b);
			return;
		end;
		if tokenSize(0) = 0 then
			tokenType(tokenSP) = 41h;
	end;
$ENDIF

	b6855 = 0;
	accum1 = 0;
	b6858 = 9;
$IF OVL4
	if tokenType(0) = 40h then
		call pushToken(0Dh);
$ENDIF
	if tokenSP = 0 or tokenType(0) = 11 and not b6B36 then
$IF OVL4
		call logError('Q');
$ELSE
		call syntaxError;
$ENDIF
	else
	do;
		if tokenType(0) = 9 or tokenType(0) = 6 then
$IF OVL4
			call logError('U');
$ELSE
			call undefinedSymbolError;
$ENDIF
		else
		do;
			b6858 = tokenType(0);
			if testBit(b6858, .b41DE) then
			do;
				curTokStart = curTokenSym$p + 7;
				b6855 = s(0) and 0DFh;
				curTokStart, wrd$p = curTokenSym$p + 4;
				w685A = wrd;
				tokenSize(0) = 2;

			end;
			else if tokenSize(0) = 0 then
$IF OVL4
				call logError('V');
$ELSE
				call valueError;
$ENDIF
			else
			do;
				if tokenSize(0) > 2 then
$IF OVL4
					call logError('V');
$ELSE
					call valueError;
$ENDIF
				b6855 = tokenAttr(0) and 0DFh;
				w685A = tokenSymId(0);
			end;

			if tokenSize(0) > 0 then
				accum1$lb = s(0);
			if tokenSize(0) > 1 then
				accum1$hb = s(1) and tokenType(0) <> 7;
		end;	

		if has16bitOperand then
			if tokenSize(0) = 2 then
				if tokenType(0) = 10 then
					call swapAccBytes;

		if (b6855 and 40h) <> 0 then
			if tokenType(0) < 9 then
				accum1 = 0;

		call popToken;
	end;

	b6B36 = 0;
	return accum1;
end;


getPrec: procedure(arg1b) byte public;
	declare arg1b byte;
	return precedence(arg1b);
end;

sub$450F: procedure(arg1b) public;
	declare arg1b byte;

	if (arg1b and 3) <> 0 then
	do;
		if accum2$hb <> 0
		   or accum2$lb > 7
		   or arg1b and accum2$lb
		   or (arg1b and 3) = 3 and accum2$lb > 2
		   or (not sub$425B(b6859) and op <> 2Eh) then    /* RST */
			call operandError;
		else if sub$425B(b6859) and op = 2Eh then	     /* RST */
			call operandError;
		if ror(arg1b, 2) then
			accum2$lb = rol(accum2$lb, 3);
		accum1$lb = accum1$lb or accum2$lb;
	end;
	else if op <> 2Dh then		/* single byte op */
		if sub$425B(b6859) then
			call operandError;

	if shr(arg1b, 3) then
	do;
		if (b6856 and 18h) = 18h then
		do;
			call valueError;
			b6856 = b6856 and 0E7h or 8;
		end;
		if accum2$hb + 1 > 1 then
			call valueError;
	end;
	if op = 28h or op = 2Ch then	/* Imm8 or imm16 */
	do;
		b6855 = b6856;
		w685A = w685C;
	end;
	else
		b6855 = 0;

	if op <> 2Dh then		     /* single byte op */
		if accum1$lb = 76h then
			call operandError;
	if (op := shr(arg1b, 4) + 24h) = 24h then	/* LXI */
		b6B2D = 0Bh;
end;

sub$4646: procedure byte public;
	if b689A >= tokenSP then
		return 0;
	return (b689A := b689A + 1);
end;



sub$465B: procedure byte public;
	return ((not b6B20$9A77) and ctlLIST or b6A6F and b6B20$9A77)
$IF OVL4
	        and (not (expandingMacro > 1) or ctlGEN)
$ENDIF
		and (not(b6B32 or skipping(0)) or ctlCOND);
end;

sub$467F: procedure(arg1b, arg2w) public;
	declare arg1b byte, arg2w address;
	declare (b6C1F, b6C20) byte;

	if not isPhase1 or not ctlXREF or isSkipping and not b6881 then
		return;

	call outch(arg1b + '0');
	if arg1b <> 2 then
	do;
		call outStrN(arg2w, 6);
		b6881 = 0;
		b6C20 = bp6A4E(1);
		b6C1F = 0;
		do while b6C1F < 4;
			b6C1F = b6C1F + 1;
			if b6C1F then
			do;
				if b6C1F = 3 then
					b6C20 = bp6A4E(0);
				call outch(nibble2Ascii(shr(b6C20, 4)));
			end;
			else
				call outch(nibble2Ascii(b6C20));
		end;
	end;
	else
	do;
		call outStrN(.lstFile, 15);
		if ctlPAGING then
			call outch('1');
		else
			call outch('0');

		call outch(nibble2Ascii(ror(ctlPAGELENGTH, 4)));
		call outch(nibble2Ascii(ctlPAGELENGTH));
		call outch(nibble2Ascii(ror(ctlPAGEWIDTH, 4)));
		call outch(nibble2Ascii(ctlPAGEWIDTH));
		call outch('3');
		call flushout;
		call closeF(xreffd);
	end;
end;
end;
as4555851.pls
asm45$55$851:
do;
$IF OVL4
$include(asm45.ipx)
$ELSEIF OVL5
$include(asm55.ipx)
$ELSE
$include(asm851.ipx)
$ENDIF

$IF BASE
declare CHKOVL$1 lit	'call ovlMgr(1)',
	CHKOVL$2 lit	'call ovlMgr(2)';
$ELSE
declare CHKOVL$1 lit	' ',
	CHKOVL$2 lit	' ';
$ENDIF

declare pad1 address data(40h),
	pad2 address;


strUCequ: procedure(arg1w, arg2w) byte public;
	declare (arg1w, arg2w) address;
	declare ch1 based arg1w byte,
		ch2 based arg2w byte;

	do while ch1 <> 0;
		if ch1 <> ch2 and ch1 <> (ch2 and 5Fh) then
			return FALSE;
		arg1w = arg1w + 1;
		arg2w = arg2w + 1;
	end;
	return TRUE;
end;


isSkipping: procedure byte public;
	return 
$IF OVL4
	b905E or
$ENDIF
		 skipping(0);
end;

sub$546F: procedure public;
	spIdx = sub$4646;
	if b6B30 then
		call syntaxError;
	if haveTokens then
		if not(tokenType(spIdx) = 0Bh or b68AD) then
			call syntaxError;
	if inDB or inDW then
	do;
		if tokenSP = 1 and not blankAsmErrCode and tokenSize(0) <> 1 then
			tokenSize(0) = 2;
	end;
	else if not blankAsmErrCode and haveTokens then
		if tokenSize(spIdx) > 3 then
			tokenSize(spIdx) = 3;
end;


sub4C1E$54FD: procedure public;
	declare lineno$p address,
		updating byte,
		ch based lineno$p byte;

	call sub$546F;
	if isPhase2Print then
	do;
		lineno$p = .asciiLineNo(3);	/* point to last digit */
		updating = TRUE;

		do while updating;		/* adjust the line number */
			if ch = '9' then	/* if 9 then roll over to 0 */
				ch = '0';
			else
			do;
				if ch = ' ' then	/* new digit */
					ch = '1';
				else			/* just increment */
					ch = ch + 1;
				updating = FALSE;
			end;
			lineno$p = lineno$p - 1;
		end;
		if sub$465B or not blankAsmErrCode then
		do;
			CHKOVL$1;
			call ovl3;
		end;
	end;

	if b6BD9 then
	do;
		out$p = out$p + 1;
		call flushout;
		call exit;
	end;

	if not b6B20$9A77 then
	do;
		ii = 2;
		if tokenSP < 2 or inDB or inDW then
			ii = 0;

		w6BCE = tokStart(ii) + tokenSize(ii);
		if isSkipping or not b6B34 then
			w6BCE = .lineBuf;

		if chkGenObj then
		do;
			CHKOVL$2;
			call ovl8;
		end;
		b6B2C = 0FFh;
		segSize(activeSeg), w68A6 = segSize(activeSeg) + (w6BCE - .lineBuf);
	end;

	if ctlXREF and haveUserSymbol then
		if phase = 1 then
			call sub$467F(1, .extName);

$IF OVL4
	call sub$40B9;
$ENDIF

	do while tokenSP > 0;
		call popToken;
	end;

	call initLine;
	if b6B33 then
	do;
		finished = 0FFh;
		if isPhase2Print and ctlSYMBOLS then
		do;
			CHKOVL$1;
			call sub7041$8447;
		end;

		call sub$467F(2, .extName);
		if chkGenObj then
		do;
			CHKOVL$2;
			call reinitFixupRecs;
		end;
	end;
end;

end;
asm46.pl3
asm46: do;
$include(asm46.ipx)

declare	needToOpenFile byte public initial(0),
	b6C22 byte public initial(0),
	b6C23 byte public,
	fileIdx byte public initial(0),
	endInBuf$p address public initial(.inBuf),
	missingEnd bool public initial(FALSE),
	srcfd address public,
	rootfd address public,
	inCh$p address public initial(.inBuf - 1),
	startLine$p address public initial(.inBuf),
	lineChCnt byte public initial(0), 
	files(6) FILE$T public,
	seekIBlk address,
	seekIByte address,
	pad6CAD byte,  
	savInBuf$p address,
	savEndInBuf$p address,
	pad6CB2(4) address,
	readFActual address,
	pad6CBC address;


readF: procedure(conn, buff$p, count) public;
	declare conn byte, (buff$p, count) address;
	call read(conn, buff$p, count, .readFActual, .statusIO);
	call ioErrChk;
end;

seekI: procedure(seekOp) public;
	declare seekOP byte;
	call seek(srcfd, seekOp, .seekIBlk, .seekIByte, .statusIO);
	call ioErrChk;
end;


readSrc: procedure(bufLoc) public;
	declare bufLoc address;
	declare pad byte;

	call readF(srcfd, bufLoc, .inBuf(sizeInBuf) - bufLoc);
	endInBuf$p = bufLoc + readFActual;
end;



closeSrc: procedure public;
	call close(srcfd, .statusIO);
	call ioErrChk;
	if fileIdx = 0 then
	do;
		missingEnd = TRUE;
		call ioError(.files(0).name);
		return;
	end;
	fileIdx = fileIdx - 1;
	/* open the previous file */
	if fileIdx = 0 then
		srcfd = rootfd;
	else
		srcfd = inOpen(.files(fileIdx).name, 1);

	seekIByte = files(fileIdx).byt;	/* move to saved location */
	seekIBlk = files(fileIdx).blk;
	call seekI(SEEKABS);
	endInBuf$p = .inBuf;		/* force read */
	inCh$p = .inBuf - 1;
end;


getSrcCh: procedure byte public;
	declare ch based inCh$p byte;
	declare insertPt address;
    loop:
	inCh$p = inCh$p + 1;

	if inCh$p = endInBuf$p then	/* buffer all used */
	do;
		savInBuf$p = startLine$p;
		savEndInBuf$p = endInBuf$p;
		/* copy the current line down to start of buffer */
		if savEndInBuf$p - savInBuf$p > 0 then
			call move(savEndInBuf$p - savInBuf$p, startLine$p, .inBuf);
		startLine$p = .inBuf;
		/* read in  characters to rest of inBuf */
		call readSrc(insertPt := startLine$p + (savEndInBuf$p - savInBuf$p));
		inCh$p = insertPt;
	end;

	if readFActual = 0 then
	do;
		call closeSrc;
		goto loop;
	end;

	lineChCnt = lineChCnt + 1;
	return ch and 7Fh;
end;


openSrc: procedure public;
	declare curByteLoc byte, curBlkLoc address;

	needToOpenFile = 0;
	call seekI(SEEKTELL);
	if seekIByte = 128 then		/* adjust for 128 boundary */
	do;
		seekIBlk = seekIBlk + 1;
		seekIByte = 0;
	end;

	curBlkLoc = endInBuf$p - startLine$p;	/* un-used characters */
x:						/* forces code alignment */
	if (curByteLoc := curBlkLoc mod 128) > seekIByte then
	do;
		seekIByte = seekIByte + 128;	/* adjust to allow for un-used chars */
		seekIBlk = seekIBlk - 1;
	end;
	/* save the current file location */
	files(fileIdx - 1).byt = seekIByte - curByteLoc;
	files(fileIdx - 1).blk = seekIBlk - curBlkLoc / 128;
	if srcfd <> rootfd then		/* close if include file */
	do;
		call close(srcfd, .statusIO);
		call ioErrChk;
	end;

	endInBuf$p = .inBuf;			/* force read */
	inCh$p = endInBuf$p - 1;
	startLine$p = .inBuf;
	files(fileIdx).blk = 0;			/* record at start of file */
	files(fileIdx).byt = 0;	
	srcfd = inOpen(.files(fileIdx).name, 1);	/* open the file */
end;
end;
asm4886.pls
asm48$86:
do;
$IF OVL4
$include(asm48.ipx)
$ELSE
$include(asm86.ipx)
$ENDIF
declare	b5666(*) byte data(9, 2Dh, 80h), /* bit vector 10 -> 00101101 10 */
	b5669(*) byte data(3Ah, 8, 80h, 0, 0, 0, 0, 0, 20h),
		/* bit vector 59 -> 00001000 1000000 00000000 0000000
				    00000000 0000000 00000000 001 */
		       /* 0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F */
	op16(*) byte data(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1,
                          0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1),
			  /* 0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F */
	chClass(*) byte data(0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 4, 0, 0,	/* 00 */
$IF OVL4
			     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0Bh,0, 0, 0, 0,	/* 10 - ESC maps to 0Bh */
$ELSE
			     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0, 0, 0, 0,	/* 10 - ESC maps to 0Bh */
$ENDIF
			     1, 0, 0, 0, 6, 0, 0, 7, 5, 5, 5, 5, 5, 5, 0, 5,	/* 20 */
			     8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 2, 0, 0, 0, 9,	/* 30 */
			     9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,	/* 40 */
			     9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0,	/* 50 */
			     0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,	/* 60 */
			     9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0);	/* 70 */

unpackToken: procedure(src, dst) public;
	declare (src, dst) address;
	declare wrd based src address;
	declare ch based dst byte;
	declare packedword address;

	unpack1: procedure;
		ch = packedword mod 40;	
		if ch = 0 then
			ch = ' ';
		else if ch <= 10 then
			ch = ch + 2Fh;	/* digit */
		else 
			ch = ch + 34h;	/* ? @ and letters */
		packedword = packedword / 40;
		dst = dst - 1;
	end;


	src = src + 2;
	dst = dst + 5;
	packedword = wrd;
	call unpack1;
	call unpack1;
	call unpack1;
	src = src - 2;
	packedword = wrd;
	call unpack1;
	call unpack1;
	call unpack1;
end;


insertSym: procedure public;
	declare (q, p) address;
	declare ch1 based q byte;
	declare ch2 based p byte;

	/* move up the top block of the symbol tables to make room */
	symHighMark, q = (p := symHighMark) + 8;
	if w6870 < q then
		call runtimeError(1);	/* table error */

	do while p > curTokenSym$p;	/* byte copy */
		q = q - 1;
		p = p - 1;
		ch1 = ch2;
	end;
	/* insert the new symbol name */
	call move(4, curTokStart, curTokenSym$p);
$IF OVL4
	endSymTab(2) = endSymTab(2) + 8;	/* mark new top of macro table */
$ENDIF
	curTokenSym.type = 0;			/* clear the type */
end;

$IF OVL4
sub$5C73: procedure(arg1b) byte;
	declare arg1b byte;

	if endSymTab(arg1b) >= curTokenSym$p and curTokenSym$p >= symTab(arg1b) then
		return 0;

	call syntaxError;
	return 0FFh;
end;


sub$5CAD: procedure(arg1w, type) public;
	declare arg1w address, type byte;

	if sub$5C73(2) then
		return;
	call insertSym;
	curTokenSym.val = arg1w;		/* fill in the rest of the new entry */
	curTokenSym.type = type;
	curTokenSym.flags = 0;
	call popToken;
end;
$ENDIF

declare b6EC4$9C3A byte public;

sub5819$5CE8: procedure(arg1w, arg2b) public;
	declare arg1w address, arg2b byte;
	declare (b6CE8, b6CE9, b6CEA, b6CEB, b6CEC) byte;

	sub$5B9A: procedure;
		tokenType(0) = arg2b;
		if (b6858 = 7 or b6858 = 8) and b6CEB then
			tokenType(0) = 12 - arg2b;
	end;

	b6CEC = tokenType(0);
	b6CEB = arg2b = 5 or arg2b = 4;
	b6CE9 = 0;
	b6CE8 = curTokenSym.flags;
	b6CEA = 0;
$IF OVL4
	if sub$5C73(1) then
	do;
$ELSE
	if curTokenSym$p > endSymTab(1) or curTokenSym$p < symTab(1) then
	do;
		call syntaxError;
$ENDIF
		return;
	end;

	if tokenSP > 1 then
		call syntaxError;

	if isPhase1 then
		if tokenType(0) = 9 then
		do;
			if b6883 then
			do;
				if curTokenSym.type >= 80h
$IF OVL4
					 or arg2b = 3Ah and curTokenSym.val <> srcLineCnt
$ENDIF
				then
				do;
					call locationError;
					b6CE9 = 80h;
				end;
			end;
			else
			do;
				call insertSym;
$IF OVL4
				symTab(2) = symTab(2) + 8;		/* adjust the base of the macro table */
$ENDIF
				endSymTab(1) = endSymTab(1) + 8;	/* adjust the end of the user symbol table */
				b6CE8 = 0;
			end;

			b6CE8 = (activeSeg <> 0 and 18h) or (b6748 and 20h) or (b6749 and 58h);
			if b6EC4$9C3A = 1 then
				b6CE8 = b6855;

			if b6EC4$9C3A = 2 then
				b6CE8 = b6CE8 or activeSeg;

			if b6857 and b6CEB then
				tokenType(0) = 64h;
			else
				call sub$5B9A;

			goto L5A9B$5F82;
		end;

	if b6882 = 2 then
		if tokenType(0) = 9 then
			if b6858 <> 9 then
				if b6CEB then
				do;
					call sub$5B9A;
					if curTokenSym.type < 128 then
					do;
						curTokenSym.type = tokenType(0);
						curTokenSym.val = arg1w;
						b6CE8 = b6855;
						b6CEA = 0FFh;
					end;
					goto L5A9B$5F82;
				end;

	if isPhase1 then
		if tokenType(0) = 6 then
			if testBit(arg2b, .b5666) then
			do;
				if b6749 then
					tokenType(0) = 3;
				else
				do;
					tokenType(0) = arg2b;
					b6CE8 = b6CE8 and 0E0h;
					if b6EC4$9C3A = 1 then
						b6CE8 = b6855 or 20h;

					if b6EC4$9C3A = 2 then
						if activeSeg <> 0 then
							b6CE8 = b6CE8 or activeSeg or 38h;
				end;
				goto L5A9B$5F82;
			end;

	if isPhase1 then
		if arg2b = 6 then
			if testBit(tokenType(0), .b5666) then
			do;
				if (b6CE8 and 60h) <> 0 then
					tokenType(0) = 3;
				else
					b6CE8 = b6CE8 or 20h;
				goto L5A9B$5F82;
			end;

	if isPhase1 then
		if tokenType(0) <> arg2b and tokenType(0) <> 8 or arg2b = 5 then
			tokenType(0) = 3;

	if not b6748 and testBit(tokenType(0), .b5669) then
		b6CE8 = (b6CE8 and 20h) and tokenType(0) <> 3Ah or b6855;
	else
	do;
		if isPhase1 then
			tokenType(0) = 3;

		if not (b6748 or b6749) then
			if curTokenSym.val <> arg1w then
				call phaseError;
	end;

L5A9B$5F82:
	b6CE9 = b6CE9 or (curTokenSym.type and 80h);

	if isPhase1 and (arg2b = 9 or arg2b = 6 or b6CEC <> tokenType(0)) then
		curTokenSym.type = tokenType(0) or b6CE9;

	jj = curTokenSym.type;
	if tokenType(0) = 3 or jj = 3 then
		call multipleDefError;

	if jj >= 80h then
		call locationError;

	if isPhase1 and (tokenType(0) = arg2b or arg2b = 5 and tokenType(0) = 7)
	   or arg2b = 4 and blankAsmErrCode or b6CEA
$IF OVL4
	   or arg2b = 3Ah
$ENDIF
	then
		curTokenSym.val = arg1w;

	curTokenSym.flags = b6CE8;
	b6748 = 0;
	b6749 = 0;
	if curTokenSym.type = 6 then
		call undefinedSymbolError;

	b6857 = 0;
	if b6883 then
		call popToken;

end;



lookup: procedure(tableId) byte public;
	declare tableId byte;
	declare (lowOffset, highOffset, midOffset, deltaToNext, entryOffset, packedTok$p) address,
		(i, gt) byte;
	declare symEntry based entryOffset SYMENTRY$T,
		packedTok based packedTok$p (2) address;
	declare addr based w6BE0 address;

	packedTok$p = curTokStart;
	if tableId = 0 then		/* hash chain look up key word */
	do;
		entryOffset = 0;	/* offset to current symbol to compare */
					/* offset of first to use - hashes packed symbol name */
		deltaToNext = symTab(0) + ((packedTok(0) + packedTok(1)) mod 151) * 8;

		do while deltaToNext <> 0;	/* while not end of chain */
			entryOffset = entryOffset + deltaToNext;	/* point to the next in chain */
			if symEntry.tok(0) = packedTok(0) then		/* check for exact match */
				if symEntry.tok(1) = packedTok(1) then
				do;
					curTokenSym$p = entryOffset;
					tokenType(0) = curTokenSym.type;
					if tokenType(0) < 2Dh then	/* not pseudo op */
						if op16(tokenType(0)) then
							has16bitOperand = TRUE;

					if curTokenSym.flags = 2 and not ctlMOD85 then	/* RIM/SIM only valid on 8085 */
						call sourceError('O');

					if tokenType(0) = 8 then		/* SP */
					do;
						if not(opType = 24h or opType = 25h) then /* lxi or push/pop/dad/inx/dcx */
							call sourceError('X');
						tokenType(0) = 7;		/* reg */
					end;
					return tokenType(0) and 7Fh;
				end;
			deltaToNext = symEntry.delta;
		end;
		return 9;
	end;

	lowOffset = symTab(tableId);
	highOffset, entryOffset = endSymTab(tableId);

	/* binary chop search for id */

	do while (midOffset := lowOffset + shr((highOffset - lowOffset) and 0FFF0h, 1)) <> entryOffset;
		entryOffset = midOffset;
		if packedTok(0) = symEntry.tok(0) then
		do;
			if packedTok(1) = symEntry.tok(1) then
			do;
				curTokenSym$p = entryOffset;
				tokenType(0) = curTokenSym.type;
				if tokenType(0) = 64h then
					tokenType(0) = 9;

				if (b6884 := (jj := (tokenType(0) and 7Fh)) = 9) then
					if b6885 then
						curTokenSym.type = 89h;
				return jj;
			end;
			else
				gt = symEntry.tok(1) > packedTok(1);
		end;
		else
			gt = symEntry.tok(0) > packedTok(0);

		entryOffset = midOffset;
		if gt then
			highOffset = entryOffset;
		else
			lowOffset = entryOffset;
	end;

	curTokenSym$p = highOffset;
	if tableId = 1 and not isSkipping then
	do;
		b6883 = 0;
		b6EC4$9C3A = 0;
		call sub5819$5CE8(srcLineCnt, (b6885 and 80h) or 9);
		w6BE0 = .tokenSym;
		do i = 1 to tokenSP;
			w6BE0 = w6BE0 + 2;
			if addr >= curTokenSym$p then
				addr = addr + 8;
		end;

		b6883 = 0FFh;
	end;
	return 9;
end;



getCh: procedure byte public;
	declare (curCH, prevCH) byte;
$IF OVL4
	declare ch based tmac$buf$p byte;
	declare ch1 based macro$p byte;
$ENDIF

L6339:
	if not reget then
	do;
		prevCH = curCH;

	L6347:
		curCH = lookAhead;
$IF OVL4
		if expandingMacro then
		do;
			do while (lookAhead := ch) = 0FEh;
				call readM(curMacroBlk + 1);
				tmac$buf$p = .macroBuf;
			end;

			tmac$buf$p = tmac$buf$p + 1;
		end;
		else
$ENDIF
	        if scanCmdLine then
			lookAhead = getCmdCh;
		else
			lookAhead = getSrcCh;

		if chClass(curCH) = CC$BAD then
			if curCH = 0 or curCH = 7Fh or curCH = FF then
				goto L6347;
$IF OVL4
		if expandingMacro then
		do;
			if curCH = 1Bh then
			do;
				goto L65B2;
			end;
			else if curCH = '&' then
			do;
				if not prevCH < 80h or lookAhead = 80h then
					goto L6339;
			end;
			else if curCH = '!' and prevCH <> 0 then
			do;
				if not (b905D or b905E) and b905C then
				do;
					curCH = 0;
					goto L6339;
				end;
			end;
			else if curCH >= 128 then
			do;
				if not (b905C := not b905C) then
					tmac$buf$p = w9197;
				else
				do;
					w9197 = tmac$buf$p;
					if curCH = 80h then
					do;
						tmac$buf$p = tmac$w12;
						if b9062 = 2 then
						do;
							b91A2 = ch;
							tmac$buf$p = .b91A2;
							if ch = '!' then
							do;
								b91A1 = 21h;
								b91A2 = mem(tmac$w12 + 1);
								tmac$buf$p = tmac$buf$p - 1;
							end;
						end;
						else
						do;
							do while (lookAhead := lookAhead - 1) <> 0FFh;
								tmac$buf$p = tmac$buf$p - (ch and 7Fh);
							end;

							tmac$buf$p = tmac$buf$p + 1;
						end;
					end;
					else
					do;
						tmac$buf$p = .b91A4;
						w6BE0 = lookAhead + tmac$w4;
						do ii = 1 to 4;
							b91A4(6 - ii) = w6BE0 mod 10 + '0';
							w6BE0 = w6BE0 / 10;
						end;
					end;
				end;

				lookAhead = 0;
				goto L6339;
			end;
		end;

		if expandingMacro > 1 then
			if isPhase2Print then
				if macro$p < .endMacroLine then	/* append character */
				do;
					ch1 = curCH;	
					macro$p = macro$p + 1;
				end;

		if b905E then
			if w919D <> w906A and curCH = 0Dh or not b9059 then
			call sub$3D55(curCH);

		if not(prevCH = '!' or b6742) then
		do;
			if curCH = '>' then
				argNestCnt = argNestCnt - 1;

			if curCH = '<' then
				argNestCnt = argNestCnt + 1;
		end;
$ENDIF
	end;
L65B2:
	reget = 0;
	return (curChar := curCH);
end;

getChClass: procedure byte public;
	curChar = getCh;
$IF OVL4
	if b905D then
		return 0Ah;
$ENDIF

	return chClass(curChar);
end;



chkLF: procedure public;
	if lookAhead = LF then
		lookAhead = 0;
	else
	do;
$IF OVL4 
		b905E = b905E and 0FEh;
$ENDIF
		call illegalCharError;
$IF OVL4
		b905E = b905E > 0;
$ENDIF
	end;
end;

end;

asm49861.pls
asm49$861:
do;
$IF OVL4
$include(asm49.ipx)
$ELSE
$include(asm861.ipx)
$ENDIF

syntaxError: procedure public;
	call sourceError('Q');
end;

doubleDefError: procedure public;
	call sourceError('D');
end;

expressionError: procedure public;
	call sourceError('E');
end;

commandError: procedure public;
	call sourceError('C');
end;

OpcodeOperandError: procedure public;
	call sourceError('O');
end;

nameError: procedure public;
	call sourceError('R');
end;

multipleDefError: procedure public;
	call sourceError('M');
end;

valueError: procedure public;
	call sourceError('V');
end;

nestingError: procedure public;
	call sourceError('N');
end;

phaseError: procedure public;
	call sourceError('P');
end;

stackError: procedure public;
	call runtimeError(0);
end;

fileError: procedure public;
	call runtimeError(4);
end;

illegalCharError: procedure public;
	call sourceError('I');
end;

balanceError: procedure public;
	call sourceError('B');
end;

undefinedSymbolError: procedure public;
	call sourceError('U');
end;

locationError: procedure public;
	call sourceError('L');
end;

operandError: procedure public;
	call sourceError('X');
end;

haveTokens: procedure byte public;
	return tokenSP <> 0;
end;


popToken: procedure public;
	tokStart(0) = tokStart(tokenSP);
	tokenSym(0) = tokenSym(tokenSP);
	tokenType(0) = tokenType(tokenSP);
	tokenAttr(0) = tokenAttr(tokenSP);
	tokenSize(0) = tokenSize(tokenSP);
	tokenSymId(0) = tokenSymId(tokenSP);
	if haveTokens then
		tokenSP = tokenSP - 1;
end;



nestIF: procedure(arg1b) public;
	declare arg1b byte;
$IF OVL4
	macroCondStk(macroCondSP := macroCondSP + 1) = macroCondStk(0);
	if (macroCondStk(0) := arg1b) = 1 then
	do;
		if (b9063 := b9063 + 1) > 9 then
		do;
			call stackError;
			b9063 = 0;
		end;
		else
		do;
			call move(16, .macroStk(0), .macroStk(b9063));
			tmac$macroCondSP = macroCondSP;
			tmac$ifDepth = ifDepth;
			b9061 = 0FFh;
		end;
	end;
	else
$ENDIF
	do;
		if (ifDepth := ifDepth + 1) > 8 then
		do;
			call stackError;
			ifDepth = 0;
		end;
		else
		do;
			skipping(ifDepth) = skipping(0);
			inElse(ifDepth) = inElse(0);
		end;
	end;
end;


unnestIF: procedure(arg1b) public;
	declare arg1b byte;

$IF OVL4
	if arg1b <> macroCondStk(0) then
	do;
		call nestingError;
		if arg1b = 2 then
			return;
		macroCondSP = tmac$macroCondSP;
		ifDepth = tmac$ifDepth;
	end;

	macroCondStk(0) = macroCondStk(macroCondSP);
	macroCondSP = macroCondSP - 1;
	if arg1b = 1 then
	do;
		call move(16, .macroStk(b9063), .macroStk(0));
		call readM(tmac$blk);
		b9062 = tmac$mtype;
		if (b9063 := b9063 - 1) = 0 then
		do;
			expandingMacro = 0;
			w6870 = physmem + 0BFh;
		end;
	end;
$ELSE
	if ifDepth = 0 then
		call nestingError;
$ENDIF
	else
	do;
		skipping(0) = skipping(ifDepth);
		inElse(0) = inElse(ifDepth);
		ifDepth = ifDepth - 1;
	end;
end;

pushToken: procedure(type) public;
	declare type byte;

	if tokenSP >= 8 then
		call stackError;
	else
	do;
		tokenSP = tokenSP + 1;
		tokStart(tokenSP) = tokStart(0);
		tokenSym(tokenSP) = tokenSym(0);
		tokenType(tokenSP) = tokenType(0);
		tokenAttr(tokenSP) = tokenAttr(0);
		tokenSize(tokenSP) = tokenSize(0);
		tokenSymId(tokenSP) = tokenSymId(0);	
		tokStart(0) = tokStart(0) + tokenSize(0);	/* advance for next token */
		tokenType(0) = type;
		tokenAttr(0), tokenSize(0) = bZERO;
		tokenSym(0) = wZERO;
$IF OVL4
		tokenSymId(0) = wZERO;
$ELSE
		tokenSymId(0) = tokenSym(0);
$ENDIF
	end;
end;

collectByte: procedure(c) public;
	declare c byte;
	declare s address;
	declare ch based s byte;


	if (s := curTokStart + tokenSize(0)) < endLineBuf then	/* check for lineBuf overrun */
	do;
		ch = c;
		tokenSize(0) = tokenSize(0) + 1;
	end;
	else
		call stackError;
end;

getId: procedure(type) public;
	declare type byte;

	call pushToken(type);
	reget = 1;

	do while (type := getChClass) = CC$DIGIT or type = CC$LET;	/* digit or letter */
		if curChar > 60h then	/* make sure upper case */
			curChar = curChar and 0DFh;
		call collectByte(curChar);
	end;
	reget = 1;
end;


getNum: procedure public;
	declare accum address,
		(radix, digit, i) byte;
	declare chrs based curTokStart (1) byte;

	call getId(12);
	radix = chrs(tokenSize(0):= tokenSize(0) - 1);
	if radix = 'H' then
		radix = 16;

	if radix = 'D' then
		radix = 10;

	if radix = 'O' or radix = 'Q' then
		radix = 8;

	if radix = 'B' then
		radix = 2;

	if radix > 16 then
		radix = 10;
	else
		tokenSize(0)= tokenSize(0) - 1;

	accum = 0;
	do i = 0 to tokenSize(0);
		if chrs(i) = '?' or chrs(i) = '@' then
		do;
			call illegalCharError;
			digit = 0;
		end;
		else
		do;
			if (digit := chrs(i) - '0') > 9 then
				digit = digit - 7;
			if digit >= radix then
				if not (tokenType(2) = 40h) then /* risk that may be uninitialised */
				do;
					call illegalCharError;
					digit = 0;
				end;
		end;

		accum = accum * radix + digit;
	end;
	/* replace with packed number */
	tokenSize(0) = 0;
	call collectByte(low(accum));
	call collectByte(high(accum));
end;

getStr: procedure public;
	call pushToken(0Ah);

	do while getCh <> CR;
		if curChar = '''' then
			if getCh <> '''' then
				goto L6268;
		call collectByte(curChar);
	end;

	call balanceError;

L6268:
	reget = 1;
end;

end;
asm4aov0.pls
asm4A$OV0: do;
$IF OVL4
$include(asm4a.ipx)
$ELSE
$include(asmov0.ipx)
$ENDIF

declare controlTable(*) byte data(35h, 'DEBUG', 3Ah, 'MACRODEBUG',
			   34h, 'XREF', 37h, 'SYMBOLS',
			   36h, 'PAGING', 33h, 'TTY',
			   25h, 'MOD85', 35h, 'PRINT',
			   36h, 'OBJECT', 39h, 'MACROFILE',
			   29h, 'PAGEWIDTH', 2Ah, 'PAGELENGTH',
			   7, 'INCLUDE', 5, 'TITLE',
			   4, 'SAVE', 7, 'RESTORE',
			   5, 'EJECT', 14h, 'LIST',
			   13h, 'GEN', 14h, 'COND');

declare (b7463, b7464, b7465, controlError) byte;


chkParen: procedure(arg1b) byte;
	declare arg1b byte;
	call skipWhite;
	reget = 0;
	return arg1b + '(' = curChar;
end;



getTok: procedure byte;
	tokBufLen = 0;
	tokType = TT$ID;
	if isCR then
		return curChar;

	call skipWhite$2;
	if curChar > 'A'-1 and 'Z'+1 > curChar or curChar > 'a'-1 and 'z'+1 > curChar then
	do;							/* letter */
		call getId(1);
		if blankAsmErrCode and tokenSize(0) < 14 then
			call move(tokBufLen := tokenSize(0), .lineBuf, .tokBuf);
	end;
	else if curChar > '0'-1  and  '9'+1 > curChar then	/* digit ? */
	do;
		call getNum;
		if blankAsmErrCode then
		do;
			w6B1E = sub$43DD;
			tokType = TT$NUM;
			tokBuf(0) = ' ';
		end;
	end;
	else if curChar = '''' then	/* string ? */
	do;
		call getStr;
		if blankAsmErrCode then
		do;
			tokBufLen = 64;
			if tokenSize(0) < 64 then
				tokBufLen = tokenSize(0);
			tokType = TT$STR;
			if tokBufLen > 0 then
				call move(tokBufLen, .lineBuf, .tokBuf);
		end;
	end;
	else
	do;
		tokBufLen = 1;
		tokBuf(0) = curChar;
		return curChar;
	end;

	call popToken;
	return tokBuf(0);
end;



sub$6F07: procedure(arg1w) byte;
	declare arg1w address;
	declare pad address;

	if tokBufIdx = 0 then
		return 0;

	tokBuf(tokBufIdx) = 20h;
	tokBufLen = tokBufIdx;
	if isWhite then
		return chkParen(1);
	return 0FFh;
end;

sub$6F39: procedure;
	call skipWhite$2;

    do while 1;
	if isRParen or isWhite then
	do;
		if sub$6F07(.tokBuf(0)) then
			return;
		goto done;
	end;

	tokBuf(tokBufIdx) = curChar;
	tokBufIdx = tokBufIdx + 1;
	if tokBufIdx > 14 then
		goto done;
	curChar = getCh;
    end;
done:
	curFileName$p = .tokBuf;
	call fileError;
end;


getFileParam: procedure;
	tokBufIdx = 0;
	if not chkParen(0) then	/* ( */
		call fileError;
	else
	do;
		call sub$6F39;
		call move(tokBufIdx + 1, .tokBuf, curFileName$p);
		if not chkParen(1) then	/* ) */
			call fileError;
	end;
end;


getMacroFileDrive: procedure;
	call skipWhite$2;
	tokBufIdx = 0Dh;
	ii = 0;

	do while not isRParen and ii < 4;
		asmax$ref(ii) = curChar;
		ii = ii + 1;
		curChar = getCh;
	end;

	if isRParen or isWhite then
		if sub$6F07(.asmax$ref) then
			return;
	curFileName$p = .asmax$ref;
	tokBufIdx = 0;
	call fileError;
end;




sub$702B: procedure byte;
	if chkParen(0) then	/* ( */
	do;
		b7463 = getTok;
		if tokType = TT$NUM then
			return chkParen(1);	/* ) */
	end;
	return 0;
end;


lookupControl: procedure byte;
	declare (cmdIdx, cmdStartIdx, ctlVal, cmdLen, ctlFlags, noInvalid) byte,
		(control$p, nextControl$p, ctlSeen$p) address;
	declare twoch address at(.tokBuf);
	declare ch based control$p byte;
	declare ctlSeen based ctlSeen$p byte;

	setControl: procedure;
		if not noInvalid then
		do;
			controls(controlId) = ctlVal;
			if not ctlVal then
				controlId = 17;	/* no action needed */
		end;
	end;


	cmdLen = tokBufLen;
	cmdStartIdx = 0;
	ctlVal = 0FFh;
	if twoch = 'ON' then	/* NO stored with bytes swapped */
	do;
		cmdStartIdx = 2;	/* don't match the NO in the table */
		ctlVal = 0;		/* control will be set as false */
		cmdLen = tokBufLen - 2;	/* length of string to match excludes the NO */
	end;

	control$p = .controlTable;
	controlId = 0;
	cmdIdx = cmdStartIdx;

	do while controlId < 20;
		nextControl$p = control$p + (ch and 0Fh) + 1;
		if (ch and 0Fh) = cmdLen then
		do;
			ctlFlags = ch;
			do while cmdIdx < tokBufLen;
				control$p = control$p + 1;
				if ch <> tokBuf(cmdIdx) then
					cmdIdx = tokBufLen + 1;	/* cause early exit */
				else
					cmdIdx = cmdIdx + 1;	/* check next character */
			end;

			if cmdIdx = tokBufLen then		/* found it */
				goto break;
		end;
		control$p = nextControl$p;
		controlId = controlId + 1;
		cmdIdx = cmdStartIdx;
	end;
	return 255;						/* not found */

break:
$IF OVL0 
	if controlId = 1 or controlId = 12h then	/* MACRODEBUG or GEN */
	do;
		if scanCmdLine then			/* only valid on command line not $ line */
			MacroDebugOrGen = 0FFh;
		else
			return 255;			/* error otherwise */
	end;
$ENDIF
	if (noInvalid := (ctlFlags and 10h) <> 10h) and not ctlVal then
		return 255;	/* NO not supported */

	if (ctlFlags and 20h) <> 20h then		/* GENERAL control */
	do;
		call setControl;
		return controlId;
	end;

	if not primaryValid then			/* is a PRIMARY control */
		return 255;

	ctlSeen$p = .controlSeen(controlId);		/* make sure we only see a primary once */
	if ctlSeen then
		return 255;
	ctlSeen = TRUE;
	call setControl;
	return controlId;
end;

processControl: procedure;
	if controlId >= 17 or controlId < 5 then
		return;

	do case controlId - 5;
/* 0 */		do;			/* TTY */
			ctlTTY = 0FFh;
			return;
		end;
/* 1 */		do;			/* MOD85 */
			ctlMOD85 = 0FFh;
			return;
		end;
/* 2 */		do;			/* PRINT */
			w6BE2 = 2;
			curFileName$p = .lstFile;
			call getFileParam;
			return;
		end;
/* 3 */		do;			/* OBJECT */
			w6BE2 = 3;
			curFileName$p = .objFile;
			call getFileParam;
			return;
		end;
/* 4 */		do;			/* MACROFILE */
			w6BE2 = 3;
			if chkParen(0) then	/* optional drive for tmp file */
				call getMacroFileDrive;
			else
				reget = 1;
			ctlMACROFILE = 0FFh;
			return;
		end;
/* 5 */		do;			/* PAGEWIDTH */
			if sub$702B then
			do;
				ctlPAGEWIDTH = w6B1E;
				if ctlPAGEWIDTH > 132 then
					ctlPAGEWIDTH = 132;
				if ctlPAGEWIDTH < 72 then
					ctlPAGEWIDTH = 72;
				return;
			end;
		end;
/* 6 */		do;			/* PAGELENGTH */
			if sub$702B then
			do;
				ctlPAGELENGTH = w6B1E;
				if ctlPAGELENGTH < 15 then
					ctlPAGELENGTH = 15;
				return;
			end;
		end;
/* 7 */		do;			/* INCLUDE */
			if not needToOpenFile then
			do;
				w6BE2 = 1;
				if fileIdx = 5 then
					call stackError;
				else
				do;
					fileIdx = fileIdx + 1;
					curFileName$p = .files(fileIdx);
					call getFileParam;
					needToOpenFile = 0FFh;
					if scanCmdLine then
						b6C22 = 0FFh;
					return;
				end;
			end;
		end;
/* 8 */		do;			/* TITLE */
			if chkParen(0) then
			do;
				b7463 = getTok;
				if tokType = TT$STR and tokBufLen <> 0 then
				do;
					if phase <> 1 or isPhase1 and primaryValid then
					do;
						call move(tokBufLen, .tokBuf, .ctlTITLESTR);
						ctlTITLESTR(titleLen := tokBufLen) = 0;
						if chkParen(1) then
						do;
							ctlTITLE = 0FFh;
							return;
						end;
					end;
				end;
			end;
		end;
/* 9 */		do;			/* SAVE */
			if saveIdx > 7 then
				call stackError;
			else
			do;
				call move(3, .ctlLIST, .saveStack + saveIdx * 3);
				saveIdx = saveIdx + 1;
				return;
			end;
		end;
/* 10 */	do;			/* RESTORE */
			if saveIdx > 0 then
			do;
				call move(3, .saveStack + (saveIdx := saveIdx - 1) * 3, .ctlLIST);
				return;
			end;
		end;
/* 11 */	do;			/* EJECT */
			ctlEJECT = ctlEJECT + 1;
			return;
		end;
	end;
	controlError = 0FFh;
end;

parseControls: procedure public;
	b6B20$9A77 = TRUE;
	b6A6F, b7464 = ctlLIST;
$IF OVL4
	b7465 = ctlGEN;
$ENDIF
	controlError = 0;

	do while getTok <> 0Dh and not controlError;
		if tokBuf(0) = ';' then		/* skip comments */
			call skip2EOL;
		else if lookupControl = 255 then	/* error ? */
			controlError = TRUE;
		else
			call processControl;
	end;

	if controlError then
	do;
		if tokBuf(0) <> CR then
		do;
			reget = 0;
			call skip2EOL;
		end;

		if scanCmdLine then
			call runtimeError(2);	/* command error */
		else
			call commandError;
	end;

	call chkLF;			/* eat the LF */
	if ctlLIST <> b7464 then
		b6A6F = 0FFh;
$IF OVL4
	else if ctlGEN <> b7465 and expandingMacro then
		b6A6F = 0;
$ENDIF

	reget = 0;
end;

end;
asm4B.pl3
asm4B:
do;
$include(asm4b.ipx)

declare b7183(*) byte data(3Fh, 0, 4, 0, 0, 0, 8, 0, 10h),
	/* bit vector 64 - 00000000 00000100 00000000 00000000 00000000 00001000 00000000 00010000 */
	/*                 CR, COMMA, SEMI */                                  
	aMacro(*) byte data('MACRO', 0);

declare w9C75 address,
	b9C77 byte public;


sub$7192: procedure byte;
	if isCR then
	do;
		b905A = 0;
		return TRUE;
	end;

	if b905A then
		return argNestCnt = b9066;

	if isLT or (not (tmac$mtype = 1) and isGT) then
	do;
		call illegalCharError;
		return TRUE;
	end;

	return isWhite or isComma or isGT or curChar = ';';
end;



sub$71F2: procedure;
	symTab(2), endSymTab(2) = symHighMark;
	b9065, tmac$b3 = bZERO;
	b6B29 = 37h;
end;


sub$720A: procedure;

	b9062 = tmac$mtype;
	if not expandingMacro then
		expandingMacro = 1;

	if b9063 = 0 then
		expandingMacro = 0FFh;

	if b9061 then
		call move(4, .macroStk(0).buf$p, .macroStk(b9063).buf$p);

	b9061 = 0;
	tmac$w12 = w9199;
	tmac$w4 = w919B;
	w919B = w919B + tmac$b3;
	call readM(tmac$w10);
	tmac$buf$p = .macroBuf;
end;


sub$727F: procedure byte;
	if not b905E then
		return TRUE;
	b9064 = b9064 + 1;
	b6B2C = op <> 3Eh;
	b6B29 = 37h;
	return FALSE;
end;


sub$72A4: procedure(arg1b) public;	/* 1 -> IRP, 2 -> IRPC */
	declare arg1b byte;

	if sub$727F then
	do;
		call sub$71F2;
		call nestIF(1);
		tmac$w14 = 0;
		tmac$mtype = arg1b;
	end;
end;

sub$72C4: procedure;
	declare b9C79(6) byte;

	call pushToken(0Dh);
	jj = 0;

L72CE:
	b9C79(jj := jj + 1) = accum1 mod 10 + '0';
	if (accum1 := accum1 / 10) > 0 then
		goto L72CE;

	do while jj > 0;
		call collectByte(b9C79(jj));
		jj = jj - 1;
	end;
end;


sub$7327: procedure public;
	w9199 = w6870;
	b6B29 = 3Dh;
	b905D = TRUE;
	b9060 = 0;
end;


sub$733D: procedure(arg1w, arg2w) address;
	declare (arg1w, arg2w) address;
	declare ch1 based w6870 byte,
		ch2 based arg2w byte;

	do while arg1w <= arg2w;
		if w6870 <= symHighMark then
			call runtimeError(1);	/* table error */
		ch1 = ch2;
		w6870 = w6870 - 1;
		arg2w = arg2w - 1;
	end;
	return w6870;
end;


sub$7383: procedure;
	b9064 = 1;
	w906A = symHighMark;
	b905E = 1;
	w9C75 = w9114;
end;



sub$739A: procedure;
	if b6884 then
		if asmErrCode <> 55h then
			call locationError;
end;


sub$73AD: procedure public;
	declare b9C83 byte;

	b9C77 = tokenSP;
	call skipWhite;
	if not (b9C83 := curChar = 25h) then
	do;
		b9066 = argNestCnt - 1;
		if (b905A := isLT) then
			curChar = getCh;

		call pushToken(0Dh);

	L73E2:	do while not sub$7192;
			if curChar = 27h then
			do;
				if (curChar := getCh) = 27h then
				do;
					curChar = getCh;
					call skipWhite;
					if sub$7192 then
						goto L7463;
					else
					do;
						call collectByte(27h);
						call collectByte(27h);
					end;
				end;
				else
				do;
					call collectByte(27h);
					goto L73E2;
				end;
			end;
			call collectByte(curChar);
			if tmac$mtype = 2 then
				tmac$w14 = tmac$w14 + 1;

			if curChar = 21h and getCh <> 0Dh then
			do;
				call collectByte(curChar);
				curChar = getCh;
			end;
		end;

	L7463:	if b905A then
			curChar = getCh;

		call skipWhite;
		if isGT then
		do;
			curChar = getCh;
			call skipWhite;
		end;

		reget = 1;
	end;

	b905D = FALSE;
	if tmac$mtype = 4 then
	do;
		if not b905A and tokenSize(0) = 5 then
			if strUCequ(.aMacro, curTokStart) then
			do;
				b6B29 = 36h;
				call popToken;
				w9199 = tmac$w12;
				opSP = opSP - 1;
				reget = 1;
				call sub$467F(0, .extName);
				haveUserSymbol = FALSE;
				b6BDA = 0FFh;
				return;
			end;
		tmac$mtype = b9062;
		call nestIF(1);
		tmac$mtype = 0;
	end;

	if not b9C83 then
		if not testBit(curChar, .b7183) then	/* not CR, COMMA or SEMI */
		do;
			call skip2EOL;
			call syntaxError;
			reget = 1;
		end;
end;



sub$7517: procedure public;
	if sub$727F then
	do;
		b6B30 = 0;
		w9068 = curTokenSym$p + 4;
		call sub5819$5CE8(0, 3Ah);
		tmac$mtype = 0;
		call sub$71F2;
	end;
end;

sub$753E: procedure public;
	declare ch based w9068 byte;

	if haveTokens then
	do;
		if tokenType(0) = 0 then
			call multipleDefError;

		call sub$5CAD((b9065 := b9065 + 1), 0);
	end;
	else if not (tmac$mtype = 0) then
		call syntaxError;

	if not tmac$mtype = 0 then
	do;
		call skipWhite;
		if isComma then
		do;
			reget = 0;
			opType = 0;
			call sub$7327;
			if tmac$mtype = 1 then
			do;
				curChar = getCh;
				call skipWhite;
				if not isLT then
				do;
					call syntaxError;
					reget = 1;
				end;
			end;
		end;
		else
		do;
			call syntaxError;
			call sub$7383;
		end;
	end;
	else if opType = 1 then
	do;
		if not blankMorPAsmErrCode then
		do;
			tmac$mtype = 5;
			w9068 = w9068 + 2;
			if (ch and 7Fh) = 3Ah then
				ch = (asmErrCode = 4Ch) and 80h or 9;
		end;
		call sub$7383;
	end;
end;

sub$75FF: procedure public;
	declare ch based w906A byte;
	declare ch2 based w9068 byte;
	declare wrd based w9068 address;

	if b905E then
	do;
		if (b9064 := b9064 - 1) = 0 then
		do;
			b905E = 0;
			if not (tmac$mtype = 5) then
			do;
				if tmac$mtype = 2 then
					w9199 = w6870 + 3;

				do w6BE0 = w919D to w919F - 1;
					curChar = mem(w6BE0);
					if not isWhite then
						call syntaxError;
				end;

				w906A = w919D;
				ch = 1Bh;
				call sub$40B9;
				call writeM;
				symHighMark, endSymTab(2) = symTab(2);
				if tmac$mtype = 0 then
				do;
					wrd = w9C75;
					w9068 = w9068 + 3;
					ch2 = tmac$b3;
				end;
				else
				do;
					tmac$w10 = w9C75;
					call sub$720A;
					if tmac$w14 = 0 then
						call unnestIF(1);
				end;
			end;
		end;
	end;
	else
		call nestingError;
end;


sub$76CE: procedure public;
	if expandingMacro then
	do;
		if opType = 1 then
		do;
			b6B32 = 0FFh;
			macroCondSP = tmac$macroCondSP;
			ifDepth = tmac$ifDepth;
			tmac$w14 = 1;
			lookAhead = 1Bh;
			macroCondStk(0) = 1;
		end;
		else
			call syntaxError;
	end;
	else
		call nestingError;
end;


sub$770B: procedure public;
	if b9C77 + 1 <> tokenSP then
		call syntaxError;
	else if not b9060 then
	do;
		if tokenType(0) <> 0Dh then
		do;
			accum1 = sub$43DD;
			call sub$72C4;
		end;

		if tmac$mtype = 2 then
			tmac$w14 = tokenSize(0) - (tokenSize(0) = 0);

		call collectByte((tokenSize(0) + 1) or 80h);
		w6870 = sub$733D(curTokStart, curTokStart + tokenSize(0) - 1);
		call popToken;

		if tmac$mtype = 0 or tmac$mtype = 1 and argNestCnt > 0 then
			b905D = TRUE;
		else
			b9060 = 0FFh;

		if tmac$mtype = 1 then
			tmac$w14 = tmac$w14 + 1;
	end;
	else
		call syntaxError;

	if opType = 1 then
	do;
		b905D = FALSE;
		if argNestCnt > 0 then
			call balanceError;

		if not blankMorPAsmErrCode then
		do;
			call sub$739A;
			if tmac$mtype = 0 then
			do;
				call sub$720A;
				call unnestIF(1);
				return;
			end;
			else
				tmac$w14 = 0;
		end;
		else
		do;
			w6870 = sub$733D(.b$3782, .b$3783);
			if tmac$mtype = 0 then
			do;
				tmac$b3 = curTokenSym.flags;
				tmac$w10 = sub$43DD;
				call sub$720A;
			end;
			else if tmac$w14 = 0 then
				call syntaxError;
		end;

		if not (tmac$mtype = 0) then
			call sub$7383;
	end;
end;



sub$7844: procedure public;
	call sub$72A4(3);
	if (b6B29 := opType) <> 1 then
		call syntaxError;

	if not b905E then
	do;
		tmac$w14 = accum1;
		if not blankMorPAsmErrCode then
		do;
			call sub$739A;
			tmac$w14 = 0;
		end;

		call sub$7383;
	end;
end;


sub$787A: procedure public;
	if b905E = 2 then
	do;
		if haveTokens then
		do;
			if (tmac$b3 := tmac$b3 + 1) = 0 then
				call stackError;

			if tokenType(0) <> 9 then
				call multipleDefError;

			call sub$5CAD(tmac$b3, 1);
			w906A = symHighMark;
		end;
		if opType = 1 then
		do;
			b905E = 1;
			w906A = symHighMark;
		end;
	end;
	else
		call syntaxError;
end;



sub$78CE: procedure public;
	jj = mem(tmac$w12);
	bp6BE0(0) = 1 - (jj = 21h and b9062 = 2);
	if b9062 = 0 or (tmac$w14 := tmac$w14 - bp6BE0(0)) = 0 then
		call unnestIF(1);
	else
	do;
		if b9062 = 1 then
			w9199 = tmac$w12 - (jj and 7Fh);
		else
			w9199 = tmac$w12 + bp6BE0(0);

		tmac$mtype = b9062;
		call sub$720A;
	end;
	lookAhead = 0;
	b6B2C, b689C = bTRUE;
end;

end;
asm4dov1.pls
asm4D$OV1:
do;
/* to force the code generation this needs a non-standard definition
   of put2Hex
*/
put2Hex: procedure(arg1w, arg2w) external; declare arg1w address, arg2w address; end;

$IF OVL4
$include(asm4d.ipx)
$ELSE
$include(asmov1.ipx)
$ENDIF

declare aAssemblyComple(*) byte initial(CR, LF, 'ASSEMBLY COMPLETE,'),
	aNoErrors(*) byte initial('   NO ERRORS'),
	spaceLP(*) byte initial(' ('),
	space5RP(*) byte initial('     )'),
	aPublicSymbols(*) byte initial(CR, LF, 'PUBLIC SYMBOLS', CR, LF, 0),
	aExternalSymbol(*) byte initial(CR, LF, 'EXTERNAL SYMBOLS', CR, LF, 0),
	pad754E address,

	aUserSymbols(*) byte data(CR, LF, 'USER SYMBOLS', CR, LF, 0),
	lstHeader(*) byte data('  LOC  OBJ         LINE        SOURCE STATEMENT', CR, LF, LF, 0),
	symbolMsgTable(*) address data(.aPublicSymbols, .aExternalSymbol, .aUserSymbols),
	aCRLFLF(*) byte data(CR, LF, LF, 0),
	aCR(*) byte data(CR),
	topLFs(*) byte data(LF, LF, LF, 0),
	b6DC1(2) byte data(20h, 40h),
	ascLParen(*) byte data(' (', 0),
	ascRParen(*) byte data(')', 0),
	a1234(*) byte data('  1234');


out2Hex: procedure(n);
    declare n byte;
    call put2Hex(.outch, n);
end;


print2Hex: procedure(n);
    declare n byte;
    call put2Hex(.printChar, n);
end;



printStr: procedure(str) reentrant;
    declare str address;
    declare ch based str byte;

    do while ch <> 0;
        call printChar(ch);
        str = str + 1;
    end;
end;

printNStr: procedure(cnt, str) reentrant;
    declare cnt byte, str address;
    declare ch based str byte;

    do while cnt > 0;
        call printChar(ch);
        str = str + 1;
        cnt = cnt - 1;
    end;
end;


printCRLF: procedure reentrant;
    call printChar(CR);
    call printChar(LF);
end;

declare aNumStr(*) byte initial('     ', 0);


itoa: procedure(n, buf);
    declare (n, buf) address;
    declare ch based buf byte;

    call move(5, .spaces5, buf);
    buf = buf + 4;

    do while 1;
        ch = n mod 10 + '0';
        buf = buf - 1;
        if (n := n /10) = 0 then
            return;
    end;
end;


printDecimal: procedure(n) reentrant public;
    declare n address;
    call itoa(n, .aNumStr);
    call printStr(.aNumStr(1));
end;

skipToEOP: procedure public;
    do while pageLineCnt <= ctlPAGELENGTH;
        call outch(LF);
        pageLineCnt = pageLineCnt + 1;
    end;
end;


newPageHeader: procedure public;
    call printStr(.topLFs);
    call printStr(.asmHeader);
    call printDecimal(pageCnt);
    call printCRLF;
    if ctlTITLE then
        call printNStr(titleLen, .ctlTITLESTR);

    call printCRLF;
    call printCRLF;
    if not b68AE then
        call printStr(.lstHeader);
    pageCnt = pageCnt + 1;
end;


newPage: procedure public;
    if ctlTTY then
        call skipToEOP;
    else
        call outch(FF);

    pageLineCnt = 1;
    if not scanCmdLine then
        call newPageHeader;
end;


sub$6F4D: procedure public;
    if sub$465B then
    do while ctlEJECT > 0;
        call newPage;
        ctlEJECT = ctlEJECT - 1;
    end;
end;




printChar: procedure(c) reentrant;
    declare c byte;
    declare cnt byte;

    if c = FF then
    do;
        call newPage;
        return;
    end;

    if c = LF then
        if ctlPAGING then
        do;
            if (pageLineCnt := pageLineCnt + 1) >= ctlPAGELENGTH - 2 then
            do;
                if ctlTTY then
                    call outch(LF);
                if ctlEJECT > 0 then
                    ctlEJECT = ctlEJECT - 1;
                call newPage;
                return;
            end;
        end;

    if c = CR then
        curCol = 0;

    cnt = 1;
    if c = TAB then
    do;
        cnt = 8 - (curCol and 7);
        c = ' ';
    end;

    do while cnt <> 0;
        if curCol < 132 then
        do;
            if c >= ' ' then
                curCol = curCol + 1;
            if curCol > ctlPAGEWIDTH then
            do;
                call printCRLF;
                call printStr(.spaces24);
                curCol = curCol + 1;
            end;
            call outch(c);
        end;
        cnt = cnt - 1;
    end;
end;

declare segChar(*) byte initial(' CDSME');	/* seg id char */

sub7041$8447: procedure public;
    declare symGrp byte,
        flagsAndType address,
        (type, flags) byte at(.flagsAndType),
        zeroAddr byte;
    declare tokBytePair based curTokenSym$p address;

    printAddr2: procedure(printFunc);
        declare printFunc address;
        declare ch based curTokenSym$p byte;

        curTokenSym$p = curTokenSym$p - 1;	/* backup into value */
        call printFunc(ch and not zeroAddr);	/* print address or 0 */
    end;


    b68AE = TRUE;
    if not ctlSYMBOLS then
        return;

    segChar(0) = 'A';		/* show A instead of space for absolute */
    do symGrp = 0 to 2;
        jj = isPhase2Print and ctlSYMBOLS;
$IF OVL4
        ctlDEBUG = ctlDEBUG or ctlMACRODEBUG;
$ENDIF
        curTokenSym$p = symTab(1) - 2;		/* address user sym(-1).type */
        call printCRLF;
        call printStr(symbolMsgTable(symGrp));

        do while (curTokenSym$p := curTokenSym$p + 8) < endSymTab(1);
            flagsAndType = tokBytePair;
            if type <> 9 then
                if type <> 6 then
$IF OVL4
                    if sub$3FA9 then
$ENDIF
                        if symGrp <> 0 or type <> 3 then
                            if symGrp = 2 or (flags and b6DC1(symGrp)) <> 0 then
                            do;
                                call unpackToken(curTokenSym$p - 6, .tokStr);
                                if jj then
                                do;
                                    if (ctlPAGEWIDTH - curCol) < 11h then
                                        call printCRLF;

                                    call printStr(.tokStr);
                                    call printChar(' ');
$IF OVL4
                                    if type = 3Ah then
                                        call printChar('+');
                                    else
$ENDIF
				    if (zeroAddr := (flags and 40h) <> 0) then
                                        call printChar('E');
                                    else
                                        call printChar(segChar(flags and 7));

                                    call printChar(' ');
                                    call printAddr2(.print2Hex);
                                    call printAddr2(.print2Hex);
                                    curTokenSym$p = curTokenSym$p + 2;
                                    call printStr(.spaces4);
                                end;
                            end;
        end;
    end;

    if ctlDEBUG then
        b68AE = FALSE;

    if jj then
        call printCRLF;
end;

printCmdLine: procedure public;
    declare ch based actRead byte;

    call outch(FF);
    call sub$6F4D;
    ch = 0;
    call printStr(.cmdLineBuf);
    call newPageHeader;
end;


outStr: procedure(s) reentrant public;
    declare s address;
    declare ch based s byte;

    do while ch <> 0;
        call outch(ch);
        s = s + 1;
    end;
end;

outNStr: procedure(cnt, s) reentrant;
    declare cnt byte, s address,
        ch based s byte;

    do while cnt > 0;
        call outch(ch);
        s = s + 1;
        cnt = cnt - 1;
    end;
end;


sub$721E: procedure byte public;
    return w68A2 < w68A0;
end;



sub$7229: procedure public;
    declare ch based w68A2 byte;
    declare b7568 byte;

    if (b68AB := sub$721E or b68AB) then
    do;
        call out2Hex(high(w68A6));
        call out2Hex(low(w68A6));
    end;
    else
        call outStr(.spaces4);

    call outch(' ');
    do  b7568 = 1 to 4;
        if sub$721E and b6B34 then
        do;
            w68A6 = w68A6 + 1;
            call out2Hex(ch);
        end;
        else
            call outStr(.spaces2);

        w68A2 = w68A2 + 1;
    end;

    call outch(' ');
    if shr(jj := tokenAttr(spIdx), 6) then
        call outch('E');
    else if not b68AB then
        call outch(' ');
    else
        call outch(segChar(jj and 7));
end;


sub$72D8: procedure public;
    if not b689B then
        return;

    call printStr(.ascLParen);    /* " (" */
    call printNStr(4, .b6A57);
    call printStr(.ascRParen);    /* ")" */
    call printCRLF;
    call move(4, .asciiLineNo, .b6A57);
end;



ovl3: procedure public;
    declare ch based inCh$p byte;
$IF OVL4
    declare ch1 based macro$p byte;
$ENDIF
loop:
    w68A0 = (w68A2 := tokStart(spIdx)) + tokenSize(spIdx);
    if isSkipping then
        w68A0 = w68A2;

    call outch(asmErrCode);
$IF OVL4
    if b905E = 0FFh then
        call outch('-');
    else
$ENDIF
        call outch(' ');

    if not blankAsmErrCode then
    do;
        asmErrCode = ' ';
        b689B = 0FFh;
    end;
    if b6B20$9A77 then
        call outStr(.spaces15);
    else
        call sub$7229;

    if fileIdx > 0 then
    do;
        call outch(a1234(ii := needToOpenFile + fileIdx));
        if ii > 0 then    
            call outch('=');
        else
            call outch(' ');
    end;
    else
        call outStr(.spaces2);

    if b68AD then
    do;
        call outStr(.spaces4);
        call printCRLF;
    end;
    else
    do;
        b68AD = 0FFh;
        call outNStr(4, .asciiLineNo);
$IF OVL4
        if expandingMacro > 1 then
            call outch('+');
        else
$ENDIF
            call outch(' ');
$IF OVL4
        if expandingMacro > 1 then
        do;
            curCol = 24;
            ch1 = 0;
            call printStr(.macroLine);
            call printChar(LF);
        end;
        else
        do;
$ENDIF
            curCol = 24;
            call printNStr(lineChCnt, startLine$p);
	    if ch <> LF then
                 call printChar(LF);
$IF OVL4
        end;
$ENDIF
    end;

    if b6B20$9A77 then
    do;
        if ctlPAGING then
            call sub$6F4D;
    end;
    else
    do;
        do while sub$721E;
            call outStr(.spaces2);
            call sub$7229;
            call printCRLF;
        end;

        if spIdx > 0 and (inDB or inDW) then
        do;
            call sub$546F;
            goto loop;
        end;
    end;

    call sub$72D8;
end;

asmComplete: procedure public;
    if errCnt > 0 then
        call itoa(errCnt, .aNoErrors);
    call printNStr((errCnt = 1) + 32, .aAssemblyComple);
    if errCnt > 0 then
    do;
        call move(4, .b6A57, .space5RP);
        call printNStr(8, .spaceLP);
    end;
    call outch(CR);
    call outch(LF);
end;

ovl9: procedure public;
    if ctlPRINT then
        call closeF(outfd);
    outfd = 0;
    pageLineCnt = 1;
    call asmComplete;
    call flushout;
end;

ovl10: procedure public;
    declare ch based w68A6 byte;

    call closeF(infd);
$IF OVL4
    call closeF(macrofd);
    call delete(.asmax$ref, .statusIO);
    if ctlOBJECT then
        call closeF(objfd);
$ENDIF
    if ctlXREF then
    do;
        w68A6 = physmem - 1;
        ch = '0';
        if asxref$tmp(0) = ':' then
            ch = asxref$tmp(2);
    
        call load(.asxref, 0, 1, 0, .statusIO);
        call ioErrChk;
    end;

    call exit;
end;
end;
init.pls
init: do;
$IF OVL4
$include(asm4e.ipx)
$ELSEIF OVL5
$include(asm5d.ipx)
$ELSE
$include(asmov3.ipx)
$ENDIF

declare aExtents(*) byte public initial(' LSTOBJ'),
    aDebug(*) byte public initial('DEBUG');


cmdSkipWhite: procedure public;
    declare cmdch based cmdch$p byte;
    
    do while (cmdch = ' ' or cmdch = TAB) and cmdch$p <> actRead;
        cmdch$p = cmdch$p + 1;
    end;
end;

getDrive: procedure byte public;
    declare cmdch based cmdch$p byte;

    if cmdch = ':' then
    do;
        cmdch$p = cmdch$p + 2;
        return cmdch;
    end;
    else
        do ii = 0 to 4;		/* case insensitive compare to DEBUG */
        if cmdch <> aDebug(ii) and aDebug(ii) + 20h <> cmdch then
                return '0';	/* must be a file name so drive 0 */
            cmdch$p = cmdch$p + 1;
        end;
    call cmdSkipWhite;
    if cmdch <> ':' then
        return '0';
    cmdch$p = cmdch$p + 2;
    return cmdch;
end;

addExtents: procedure public;
    do ii = 1 to 3;
        lstFile(jj + ii) = aExtents(ii);
        objFile(jj + ii) = aExtents(ii+3);
    end;
end;


/* asmov3 usage include overlay file initiatisation */

getAsmFile: procedure public;
	declare cmdch based cmdch$p byte;

	cmdIsWhite: procedure byte;
		declare cmdch based cmdch$p byte;
		return cmdch = ' ' or cmdch = TAB or cmdch = CR;
	end;

$IF OVL4
	symTab(0) = .extKeywords;	/* extended key words */
$ELSE
	symTab(0) = .stdKeywords;	/* no extended key words */
$ENDIF
	symHighMark, endSymTab(0), symTab(1), endSymTab(1) =
$IF NOT OVL3
						 .MEMORY;
$ELSE
						 .EDATA;
$ENDIF
	call rescan(1, .statusIO);	/* get the command line */
	call ioErrChk;
	call read(1, .cmdLineBuf, 128, .actRead, .statusIO);
	call ioErrChk;
	actRead = actRead + .cmdLineBuf;	/* convert to pointer */
	scanCmdLine = TRUE;		/* scanning command line */
$IF OVL3
	call write(0, .signonMsg, 29h, .statusIO);
	call write(0, .signonMsg, 2, .statusIO);
	call ioErrChk;
$ENDIF
	call cmdSkipWhite;
$IF OVL3
	ovlFile(2),
$ENDIF
	asxref(2) = getDrive; 	/* tem defaults to current drive */

	do while not cmdIsWhite;
		cmdch$p = cmdch$p + 1;
	end;

	call cmdSkipWhite;
	if cmdch = CR then		/* no name !! */
		call runtimeError(4);

	infd = inOpen(cmdch$p, 1);	/* open file for reading */
	rootfd, srcfd = infd;
	ii = TRUE;
	jj = 0;

	do while not cmdIsWhite;	/* copy file name over to the files list */
		files(0).name(jj) = cmdch;
		if ii then		/* and the name for the lst and obj files */
			lstFile(jj), objFile(jj) = cmdch;
		if cmdch = '.' then
		do;
			ii = FALSE;
			call addExtents;	/* add lst and obj file extents */
		end;
		jj = jj + 1;
		cmdch$p = cmdch$p + 1;
	end;
	controls$p = cmdch$p;		/* controls start after file name */
	if ii then			/* no extent in source file */
	do;
		lstFile(jj) = '.';	/* add the . and the extents */
		objFile(jj) = '.';
		call addExtents;
	end;

	files(0).name(jj) = ' ';	/* override current drive for tmp if explict in source file */
	if lstFile(0) = ':' and lstFile(2) <> '0' then
$IF OVL4
		asmax$ref(2),
$ENDIF
		asxref$tmp(2) = lstFile(2);
end;


resetData: procedure public;	/* extended initialisation */

    call initLine;

    b6B33, scanCmdLine, skipping(0), b6B2C, inElse(0), finished, b674A(0), b674A(1), b6742,
$IF OVL4
    expandingMacro, b905C, b905E,
$ENDIF
    b6857, needToOpenFile = bZERO;
    b6743, primaryValid, ctlLIST, b6A6F,
$IF OVL4
    ctlGEN,
$ENDIF
    ctlCOND = bTRUE;
$IF OVL4
    b9063, b9064, macroCondStk(0), macroCondSP, 
$ENDIF
    saveIdx, lookAhead, activeSeg, ifDepth, opSP, opStack(0) = bZERO;
$IF OVL4
    w9114,
$ENDIF
    segSize(SEG$ABS), segSize(SEG$CODE), segSize(SEG$DATA),
    maxSegSize(SEG$ABS), maxSegSize(SEG$CODE), maxSegSize(SEG$DATA), w68A6,
$IF OVL4
    w919B,
$ENDIF
    externId, errCnt = wZERO;
    b6882 = b6882 + 1;
    srcLineCnt, opType, pageCnt, pageLineCnt = 1;
    b68AE = FALSE;
    curChar = ' ';
    do ii = 0 to 11;		/* reset all the control seen flags */
        controlSeen(ii) = 0;
    end;
$IF OVL4
    curMacroBlk = 0FFFFh;
$ENDIF
    if not isPhase1 then	/* close any open include file */
    do;
        if fileIdx <> 0 then
        do;
            call closeF(srcfd);
            call ioErrChk;
            srcfd = rootfd;
        end;

        fileIdx = bZERO;	/* reset files for another pass */
        endInBuf$p = .inBuf;
        inCh$p = endInBuf$p - 1;
        startLine$p = .inBuf;
        call seek(infd, SEEKABS, .azero, .azero, .statusIO);	/* rewind */
        call ioErrChk;
    end;

    w6870 = physmem + 0BFh;
    endOutBuf = .b6A00;
end;

initRecTypes: procedure public;
    r$content.type = OMF$CONTENT;
    r$content.len = 3;
    r$publics.type = OMF$RELOC;
    r$publics.len = 1;
    r$interseg.type = OMF$INTERSEG;
    r$interseg.len = 2;
    r$extref.type = OMF$EXTREF;
    r$extref.len = 1;
end;
end;
key4.plm
keywords: do;
declare copyright(*) byte data('(C) 1976,1977,1979,1980 INTEL CORP');

declare extKeywords(*) address public initial(
/*
	4 byte packed keyword
	byte opcode base
	byte offset to next entry or 0 if end
	byte type
	byte special location
*/
	0A528h,	00000h,	00h,	010h,	/* NE */
	063B0h,	00000h,	0CCh,	02Ch,	/* CZ */
	06E60h,	09C40h,	00h,	038h,	/* ENDM */
	0BFB6h,	00000h,	0C0h,	02Dh,	/* RNZ */
	0B354h,	00000h,	0C1h,	025h,	/* POP */
	06EE9h,	00000h,	00h,	01Dh,	/* EQU */
	0C6CDh,	00000h,	08032h,	02Ch,	/* STA */
	0A1A5h,	00000h,	08006h,	029h,	/* MVI */
	0C6CFh,	00000h,	037h,	02Dh,	/* STC */
	0C6CDh,	06158h,	00h,	01B05h,	/* STACK */
	06615h,	00000h,	027h,	02Dh,	/* DAA */
	0988Dh,	0E100h,	0Ah,	026h,	/* LDAX */
	061F6h,	00000h,	0C4h,	02Ch,	/* CNZ */
	053CFh,	00000h,	08888h,	027h,	/* ADC */
	053D0h,	00000h,	080h,	027h,	/* ADD */
	08D9Fh,	00000h,	0A0D2h,	02Ch,	/* JNC */
	00000h,	00000h,	00h,	00h,	/*  */
	00000h,	00000h,	00h,	00h,	/*  */
	00000h,	00000h,	00h,	00h,	/*  */
	06E60h,	00000h,	08800h,	020h,	/* END */
	06A40h,	00000h,	0A003h,	07h,	/* E */
	00000h,	00000h,	00h,	00h,	/*  */
	0AD70h,	00000h,	00h,	013h,	/* OR */
	0AE08h,	00000h,	0D3h,	028h,	/* OUT */
	0A088h,	00000h,	00h,	015h,	/* MOD */
	0AD83h,	00000h,	00h,	01Fh,	/* ORG */
	00000h,	00000h,	00h,	00h,	/*  */
	08F70h,	00000h,	070CAh,	02Ch,	/* JZ */
	068E9h,	076C0h,	00h,	031h,	/* DSEG */
	0C488h,	00000h,	00h,	01Eh,	/* SET */
	08BD8h,	00000h,	010DAh,	02Ch,	/* JC */
	0C521h,	00000h,	030h,	022Dh,	/* SIM */
	06618h,	00000h,	0809h,	025h,	/* DAD */
	0B16Ch,	09600h,	0E9h,	02Dh,	/* PCHL */
	0A4A1h,	06A40h,	00h,	034h,	/* NAME */
	06748h,	00000h,	0F3h,	02Dh,	/* DI */
	053D5h,	00000h,	018C6h,	028h,	/* ADI */
	06630h,	00000h,	00h,	01Ah,	/* DB */
	08DB6h,	00000h,	0C2h,	02Ch,	/* JNZ */
	0AD7Dh,	00000h,	0B0h,	027h,	/* ORA */
	0B3FBh,	00000h,	06h,	07h,	/* PSW */
	0AD85h,	00000h,	0F6h,	028h,	/* ORI */
	0A09Ah,	00000h,	0B840h,	02Bh,	/* MOV */
	08610h,	00000h,	0B800h,	021h,	/* IF */
	00000h,	00000h,	00h,	00h,	/*  */
	09938h,	06400h,	0B02Ah,	02Ch,	/* LHLD */
	09600h,	00000h,	0B005h,	07h,	/* L */
	0C6F6h,	00000h,	090h,	027h,	/* SUB */
	0C634h,	09600h,	0F9h,	02Dh,	/* SPHL */
	0C405h,	00000h,	0DEh,	028h,	/* SBI */
	00000h,	00000h,	00h,	00h,	/*  */
	0BF4Fh,	00000h,	07h,	02Dh,	/* RLC */
	05780h,	00000h,	00h,	07h,	/* B */
	00000h,	00000h,	00h,	00h,	/*  */
	0E614h,	09600h,	0E8E3h,	02Dh,	/* XTHL */
	00000h,	00000h,	00h,	00h,	/*  */
	00000h,	00000h,	00h,	00h,	/*  */
	0B11Bh,	06A40h,	02h,	05h,	/* PAGE */
	00000h,	00000h,	00h,	00h,	/*  */
	00000h,	00000h,	00h,	00h,	/*  */
	0A7C0h,	00000h,	0D800h,	041h,	/* NUL */
	08750h,	00000h,	0DBh,	028h,	/* IN */
	06E60h,	08610h,	0D000h,	023h,	/* ENDIF */
	00000h,	00000h,	00h,	00h,	/*  */
	00000h,	00000h,	00h,	00h,	/*  */
	0C3FEh,	00000h,	098h,	027h,	/* SBB */
	0C6D7h,	09A10h,	00h,	035h,	/* STKLN */
	0BFE0h,	00000h,	0F0h,	02Dh,	/* RP */
	0C078h,	00000h,	0C7h,	02Eh,	/* RST */
	0C4F8h,	06400h,	022h,	02Ch,	/* SHLD */
	09E57h,	0BFB8h,	00h,	036h,	/* MACRO */
	06231h,	00000h,	0ECh,	02Ch,	/* CPE */
	0B436h,	09957h,	0A800h,	032h,	/* PUBLIC */
	0BDA0h,	00000h,	0A817h,	02Dh,	/* RAL */
	06FF5h,	0CBE8h,	0D800h,	039h,	/* EXITM */
	06235h,	00000h,	0FEh,	028h,	/* CPI */
	0BF68h,	00000h,	0F8h,	02Dh,	/* RM */
	00000h,	00000h,	00h,	00h,	/*  */
	00000h,	00000h,	00h,	00h,	/*  */
	0BDA6h,	00000h,	01Fh,	02Dh,	/* RAR */
	0805Bh,	07D00h,	0B800h,	018h,	/* HIGH */
	06400h,	00000h,	0C802h,	07h,	/* D */
	0B447h,	07D00h,	0D0C5h,	025h,	/* PUSH */
	0C6FDh,	00000h,	08D6h,	028h,	/* SUI */
	06220h,	00000h,	0F4h,	02Ch,	/* CP */
	061A8h,	00000h,	0FCh,	02Ch,	/* CM */
	00000h,	00000h,	00h,	00h,	/*  */
	05629h,	076C0h,	00h,	02Fh,	/* ASEG */
	0BFF1h,	00000h,	0E8h,	02Dh,	/* RPE */
	0880Ch,	05DC0h,	0A800h,	03Ch,	/* IRPC */
	0BE48h,	00000h,	0C9h,	02Dh,	/* RET */
	0876Eh,	00000h,	04h,	02Ah,	/* INR */
	0BEE1h,	00000h,	020h,	022Dh,	/* RIM */
	0BFFBh,	00000h,	0E0h,	02Dh,	/* RPO */
	0C6CDh,	0E100h,	02802h,	026h,	/* STAX */
	0988Dh,	00000h,	0983Ah,	02Ch,	/* LDA */
	07000h,	0BF90h,	00h,	033h,	/* EXTRN */
	08774h,	00000h,	09003h,	025h,	/* INX */
	061B5h,	00000h,	0902Fh,	02Dh,	/* CMA */
	0876Ch,	05449h,	01h,	05h,	/* INPAGE */
	09A47h,	05500h,	09800h,	03Fh,	/* LOCAL */
	0E5BDh,	00000h,	08A8h,	027h,	/* XRA */
	080E0h,	00000h,	076h,	02Dh,	/* HLT */
	08DE0h,	00000h,	0F2h,	02Ch,	/* JP */
	09A5Bh,	00000h,	00h,	019h,	/* LOW */
	06D88h,	00000h,	0FBh,	02Dh,	/* EI */
	0623Bh,	00000h,	0E4h,	02Ch,	/* CPO */
	06676h,	00000h,	06805h,	02Ah,	/* DCR */
	0E5C5h,	00000h,	0EEh,	028h,	/* XRI */
	0555Dh,	00000h,	0A0h,	027h,	/* ANA */
	062A9h,	076C0h,	00h,	030h,	/* CSEG */
	08D68h,	00000h,	0FAh,	02Ch,	/* JM */
	05560h,	00000h,	00h,	012h,	/* AND */
	05140h,	00000h,	05807h,	07h,	/* A */
	0BE44h,	0C800h,	00h,	03Eh,	/* REPT */
	08DF1h,	00000h,	0EAh,	02Ch,	/* JPE */
	0880Ch,	00000h,	00h,	03Bh,	/* IRP */
	05565h,	00000h,	0E6h,	028h,	/* ANI */
	09B00h,	00000h,	00h,	0Ch,	/* LT */
	061B7h,	00000h,	03Fh,	02Dh,	/* CMC */
	08DFBh,	00000h,	0E2h,	02Ch,	/* JPO */
	07BC0h,	00000h,	00h,	0Eh,	/* GT */
	06978h,	00000h,	07800h,	01Bh,	/* DW */
	06EC8h,	00000h,	00h,	0Bh,	/* EQ */
	068D8h,	00000h,	04800h,	01Ch,	/* DS */
	07968h,	00000h,	0A000h,	0Fh,	/* GE */
	0A6D4h,	00000h,	00h,	02Dh,	/* NOP */
	09F01h,	0AD95h,	00h,	01C05h,	/* MEMORY */
	05FE0h,	09600h,	0CDh,	02Ch,	/* CALL */
	0BDD8h,	00000h,	0D8h,	02Dh,	/* RC */
	053ADh,	00000h,	080CEh,	028h,	/* ACI */
	0BF9Fh,	00000h,	0D0h,	02Dh,	/* RNC */
	0E36Ch,	076C0h,	0EBh,	02Dh,	/* XCHG */
	061C4h,	00000h,	08B8h,	027h,	/* CMP */
	0667Ch,	00000h,	0Bh,	025h,	/* DCX */
	0C620h,	00000h,	06h,	08h,	/* SP */
	09C40h,	00000h,	06h,	07h,	/* M */
	098A8h,	00000h,	03800h,	0Dh,	/* LE */
	06018h,	00000h,	0DCh,	02Ch,	/* CC */
	07D00h,	00000h,	05004h,	07h,	/* H */
	0C03Fh,	00000h,	0500Fh,	02Dh,	/* RRC */
	0C4F8h,	00000h,	00h,	016h,	/* SHL */
	05DC0h,	00000h,	01h,	07h,	/* C */
	0C170h,	00000h,	0C8h,	02Dh,	/* RZ */
	0E556h,	00000h,	00h,	014h,	/* XOR */
	06E1Fh,	06A40h,	00h,	022h,	/* ELSE */
	0A6D8h,	00000h,	00h,	011h,	/* NOT */
	0C4FEh,	00000h,	00h,	017h,	/* SHR */
	09BB5h,	00000h,	01h,	024h,	/* LXI */
	08D84h,	00000h,	0C3h,	02Ch,	/* JMP */
	061DFh,	00000h,	0D4h,	02Ch	/* CNC */
);


end;
makefile
ISIS=..\..\thames
V4=../../plm80v4/
V3=../../plm80v3/
TOOLS=../../tools/
F0=./

PEXFILE=asm80.pex

OVERLAY=6D4Ch

# bulk obj names
BASEOBJS = glb.obj asm801.obj asm82.obj asm83.obj asm46.obj asm85.obj\
	asm851.obj asm86.obj asm861.obj pcktkn.obj close.obj delete.obj error.obj\
       	exit.obj load.obj open.obj read.obj rescan.obj seek.obj write.obj

OBJS4 =	glb4.obj asm41.obj pcktkn.obj asm43.obj asm44.obj asm45.obj asm46.obj\
	asm47.obj asm48.obj asm49.obj asm4A.obj asm4B.obj asm4C.obj asm4D.obj asm4E.obj\
	close.obj delete.obj error.obj exit.obj\
	load.obj open.obj read.obj rescan.obj\
	seek.obj write.obj

OBJS5 =	glb5.obj asm51.obj pcktkn.obj asm82.obj asm83.obj asm55.obj asm46.obj\
	asm57.obj asm86.obj asm861.obj asmov0.obj asmov2.obj asmov1.obj asm5D.obj\
	close.obj delete.obj error.obj exit.obj\
	load.obj open.obj read.obj rescan.obj\
	seek.obj write.obj

P4SRCS = asm41.plm asm44.plm asm45.plm asm4e.plm asm51.plm asm55.plm asm5d.plm\
	asm801.plm asm83.plm asm851.plm asm861.plm asmov3.plm close.plm delete.plm\
	error.plm exit.plm glb.plm glb4.plm glb5.plm key4.plm keywrd.plm load.plm\
	open.plm read.plm rescan.plm seek.plm write.plm

P3SRCS = asm43.pl3 asm46.pl3 asm47.pl3 asm48.pl3 asm49.pl3 asm4a.pl3 asm4B.pl3 asm4c.pl3\
	asm4d.pl3 asm57.pl3 asm82.pl3 asm85.pl3 asm86.pl3 asmov0.pl3 asmov1.pl3 asmov2.pl3

ASRCS = pcktkn.asm cprite.asm memory.asm

TARGETS = asm80 asm80.ov0 asm80.ov1 asm80.ov2 asm80.ov3 asm80.ov4 asm80.ov5

#
# compilation and assembly rules
.SUFFIXES: .plm .pl3
.plm.obj:
	@SET ISIS_F0=$(F0)
	@SET ISIS_F1=$(V4)
	$(TOOLS:/=\)ngenpex $(PEXFILE) $<
	$(ISIS) :F1:PLM80 $< code
	@if not exist $*.obj exit /b 1

.pl3.obj:
	@SET ISIS_F0=$(F0)
	@SET ISIS_F1=$(V3)
	$(TOOLS:/=\)ngenpex $(PEXFILE) $<
	$(ISIS) :F1:PLM80 $< code
	@find $*.lst "     0 PROGRAM ERROR(S)" >nul || (del $*.obj & exit /b 1)

.asm.obj:
	@SET ISIS_F0=$(F0)
	@SET ISIS_F1=$(V4)
	$(ISIS) :F1:ASM80 $< 
	@find $*.lst "ASSEMBLY COMPLETE,   NO ERRORS" >nul || (del $*.obj & exit /b 1)

# the default rule will force the makefile to be up to date
all: .extract

all:
	$(MAKE) $(TARGETS)

rebuild: uclean all

.extract: asm80_all.plm
	..\..\unpack.pl
	date /t >.extract

# checking targets
# note if you change these two rules then you should do a nmake all or namke .extract first
# otherwise whilst the build will be ok the old verify/compare rules will be run

verify: all
	for %i in ($(TARGETS)) do $(TOOLS:/=\)diffbin %i $(V4)\%i

compare: all
	for %i in ($(TARGETS)) do fc /b %i $(V4)%i


# source files generated from shared code
asm43.pl3 asm82.pl3: asm4382.pls
	@SET ISIS_F0=$(F0)
	$(TOOLS:/=\)plmpp -sOVL4 -o asm43.pl3 $**
	$(TOOLS:/=\)plmpp -sBASE -o asm82.pl3 $**

asm48.pl3 asm86.pl3: asm4886.pls
	@SET ISIS_F0=$(F0)
	$(TOOLS:/=\)plmpp -sOVL4 -o asm48.pl3 $**
	$(TOOLS:/=\)plmpp -sBASE -o asm86.pl3 $**

asm49.pl3 asm861.plm: asm49861.pls
	@SET ISIS_F0=$(F0)
	$(TOOLS:/=\)plmpp -sOVL4 -o asm49.pl3 $**
	$(TOOLS:/=\)plmpp -sBASE -o asm861.plm $**

asm44.plm asm83.plm: as4483.pls
	@SET ISIS_F0=$(F0)
	$(TOOLS:/=\)plmpp -sOVL4 -o asm44.plm $**
	$(TOOLS:/=\)plmpp -sBASE -o asm83.plm $**

asm45.plm asm55.plm asm851.plm: as4555851.pls
	@SET ISIS_F0=$(F0)
	$(TOOLS:/=\)plmpp -sOVL4 -o asm45.plm $**
	$(TOOLS:/=\)plmpp -sOVL5 -o asm55.plm $**
	$(TOOLS:/=\)plmpp -sBASE -o asm851.plm $**

asm4a.pl3 asmov0.pl3: asm4aov0.pls
	@SET ISIS_F0=$(F0)
	$(TOOLS:/=\)plmpp -sOVL4 -o asm4a.pl3 $**
	$(TOOLS:/=\)plmpp -sOVL0 -o asmov0.pl3 $**

asm4d.pl3 asmov1.pl3: asm4dov1.pls
	@SET ISIS_F0=$(F0)
	$(TOOLS:/=\)plmpp -sOVL4 -o asm4d.pl3 $**
	$(TOOLS:/=\)plmpp -sOVL1 -o asmov1.pl3 $**

asm4c.pl3 asmov2.pl3: asm4cov2.pls
	@SET ISIS_F0=$(F0)
	$(TOOLS:/=\)plmpp -sOVL4 -o asm4c.pl3 $**
	$(TOOLS:/=\)plmpp -sOVL2 -o asmov2.pl3 $**

asm47.pl3 asm57.pl3 asm85.pl3: asm475785.pls
	@SET ISIS_F0=$(F0)
	$(TOOLS:/=\)plmpp -sOVL4 -o asm47.pl3 $**
	$(TOOLS:/=\)plmpp -sOVL5 -o asm57.pl3 $**
	$(TOOLS:/=\)plmpp -sBASE -o asm85.pl3 $**

asm41.plm asm51.plm asm801.plm: start.pls
	@SET ISIS_F0=$(F0)
	$(TOOLS:/=\)plmpp -sOVL4 -o asm41.plm $**
	$(TOOLS:/=\)plmpp -sOVL5 -o asm51.plm $**
	$(TOOLS:/=\)plmpp -sBASE -o asm801.plm $**

glb.plm glb4.plm glb5.plm: global.pls
	@SET ISIS_F0=$(F0)
	$(TOOLS:/=\)plmpp -sOVL4 -o glb4.plm $**
	$(TOOLS:/=\)plmpp -sOVL5 -o glb5.plm $**
	$(TOOLS:/=\)plmpp -sBASE -o glb.plm $**

asm4e.plm asm5d.plm asmov3.plm: init.pls
	@SET ISIS_F0=$(F0)
	$(TOOLS:/=\)plmpp -sOVL4 -o asm4e.plm $**
	$(TOOLS:/=\)plmpp -sOVL5 -o asm5d.plm $**
	$(TOOLS:/=\)plmpp -sOVL3 -o asmov3.plm $**

# build rules to make the program and overlays

asm80: base.abs asmov0.abs asmov1.abs asmov2.abs asmov3.abs keywrd.abs 
	@SET ISIS_F0=$(F0)
	@SET ISIS_F1=$(V4)
	$(ISIS) :F1:link base.abs,publics(asmov0.abs,asmov1.abs,asmov2.abs), "&" < <<
asmov3.abs,keywrd.abs to $*.rel &
map print($*.lin)
<<NOKEEP
	$(ISIS) :F1:locate $*.rel to $@ SYMBOLS MAP PUBLICS print($*.map) "&" < <<
STACKSIZE(0) PURGE NAME(ASM80)
exit
<<NOKEEP
	del $*.rel
	@find $*.lin "LINK MAP" >nul || (del $@ & exit /b 1)
	@(find $*.map "UNSATISFIED EXTERNAL" >nul && (del $@ & exit /b 1)) || exit /b 0)

asm80.ov0: asmov0.abs 
	@SET ISIS_F0=$(F0)
	@SET ISIS_F1=$(V4)
	$(ISIS) :F1:locate $** to $@ SYMBOLS MAP PUBLICS print(asmov0.map) "&" < <<
STACKSIZE(0) PURGE NAME(A80O0)
<<NOKEEP
	@(find $*.mo0 "UNSATISFIED EXTERNAL" >nul && (del $@ & exit /b 1)) || exit /b 0)

asm80.ov1: asmov1.abs 
	@SET ISIS_F0=$(F0)
	@SET ISIS_F1=$(V4)
	$(ISIS) :F1:locate $** to $@ SYMBOLS MAP PUBLICS print(asmov1.map) "&" < <<
STACKSIZE(0) PURGE NAME(A80O1)
<<NOKEEP	
	@(find $*.mo1 "UNSATISFIED EXTERNAL" >nul && (del $@ & exit /b 1)) || exit /b 0)


asm80.ov2: asmov2.abs 
	@SET ISIS_F0=$(F0)
	@SET ISIS_F1=$(V4)
	$(ISIS) :F1:locate $** to $@ SYMBOLS MAP PUBLICS print(asmov2.map) "&" < <<
STACKSIZE(0) PURGE NAME(A80O2)
<<NOKEEP	
	@(find $*.mo2 "UNSATISFIED EXTERNAL" >nul && (del $@ & exit /b 1)) || exit /b 0)

asm80.ov3: asmov3.abs
	@SET ISIS_F0=$(F0)
	@SET ISIS_F1=$(V4)
	$(ISIS) :F1:locate $** to $@ SYMBOLS MAP PUBLICS print(asmov3.map) "&" < <<
STACKSIZE(0) PURGE NAME(A80O3)
<<NOKEEP
	@(find $*.mo3 "UNSATISFIED EXTERNAL" >nul && (del $@ & exit /b 1)) || exit /b 0)


asm80.ov4: $(OBJS4) key4.obj
	@SET ISIS_F0=$(F0)
	@SET ISIS_F1=$(V4)
	$(ISIS) :F1:link "&" < <<
$(OBJS4: =, & 
),:f1:plm80.lib,key4.obj to asmov4.rel map print(asmov4.lin)
<<NOKEEP
	$(ISIS) :F1:locate asmov4.rel to $@ SYMBOLS NAME(A80O4) PURGE "&" < <<
MAP PUBLICS code(3780h) STACKSIZE(144) print(asmov4.map)
exit
<<NOKEEP
	@find asmov4.lin "LINK MAP" >nul || (del $@ & exit /b 1)
	@(find asmov4.map "UNSATISFIED EXTERNAL" >nul && (del $@ & exit /b 1)) || exit /b 0)


asm80.ov5: $(OBJS5) keywrd.obj
	@SET ISIS_F0=$(F0)
	@SET ISIS_F1=$(V4)
	$(ISIS) :F1:link "&" < <<
$(OBJS5: =, &
),:f1:plm80.lib,keywrd.obj to asmov5.rel map print(asmov5.lin)
<<NOKEEP
	$(ISIS) :F1:locate asmov5.rel to $@ SYMBOLS NAME(A80O5) PURGE "&" < <<
MAP PUBLICS code(3780h) STACKSIZE(144) print(asmov5.map)
exit
<<NOKEEP
	@find asmov5.lin "LINK MAP" >nul || (del $@ & exit /b 1)
	@(find asmov5.map "UNSATISFIED EXTERNAL" >nul && (del $@ & exit /b 1)) || exit /b 0)



# rules for intermediate files

base.abs: $(BASEOBJS)
	@SET ISIS_F0=$(F0)
	@SET ISIS_F1=$(V4)
	$(ISIS) :F1:link "&" < <<
$(BASEOBJS: =, & 
),:f1:plm80.lib to $*.rel print($*.lin)
<<NOKEEP
	$(ISIS) :F1:locate $*.rel to $@ SYMBOLS MAP PUBLICS STACKSIZE(120) print($*.map)
	del $*.rel
	@find $*.lin "UNRESOLVED EXTERNAL" >nul || (del $@ & exit /b 1)


keywrd.abs: keywrd.obj memory.obj
	@SET ISIS_F0=$(F0)
	@SET ISIS_F1=$(V4)
	$(ISIS) :F1:link $(**: =,) to $*.rel map print($*.lin)
	$(ISIS) :F1:locate $*.rel to $@ SYMBOLS MAP PUBLICS CODE(075A2h) STACKSIZE(0) print($*.map)
	del $*.rel
	@find $*.lin "LINK MAP" >nul || (del $@ & exit /b 1)
	@(find $*.map "UNSATISFIED EXTERNAL" >nul && (del $@ & exit /b 1)) || exit /b 0)

asmov0.abs: base.abs cprite.obj asmov0.obj
	@SET ISIS_F0=$(F0)
	@SET ISIS_F1=$(V4)
	$(ISIS) :F1:link publics(base.abs),cprite.obj,asmov0.obj to $*.rel map print($*.la0)
	$(ISIS) :F1:locate $*.rel to $@ SYMBOLS MAP PUBLICS CODE($(OVERLAY)) STACKSIZE(0) print($*.ma0)
	del $*.rel
	@find $*.la0 "LINK MAP" >nul || (del $@ & exit /b 1)


asmov1.abs: base.abs cprite.obj asmov1.obj
	@SET ISIS_F0=$(F0)
	@SET ISIS_F1=$(V4)
	$(ISIS) :F1:link publics(base.abs),cprite.obj,asmov1.obj,:F1:plm80.lib "&" < <<
to $*.rel map print($*.la1)
<<NOKEEP
	$(ISIS) :F1:locate $*.rel to $@ SYMBOLS MAP PUBLICS CODE($(OVERLAY)) STACKSIZE(0) print($*.ma1)
	del $*.rel
	@find $*.la1 "LINK MAP" >nul || (del $@ & exit /b 1)


asmov2.abs: base.abs cprite.obj asmov2.obj
	@SET ISIS_F0=$(F0)
	@SET ISIS_F1=$(V4)
	$(ISIS) :F1:link publics(base.abs),cprite.obj,asmov2.obj to $*.rel map print($*.la2)
	$(ISIS) :F1:locate $*.rel to $@ SYMBOLS MAP PUBLICS CODE($(OVERLAY)) STACKSIZE(0) print($*.ma2)
	del $*.rel
	@find $*.la2 "LINK MAP" >nul || (del $@ & exit /b 1)


asmov3.abs: base.abs cprite.obj asmov3.obj keywrd.abs
	@SET ISIS_F0=$(F0)
	@SET ISIS_F1=$(V4)
	$(ISIS) :F1:link publics(base.abs),cprite.obj,asmov3.obj,publics(keywrd.abs) "&" < <<
to $*.rel map print($*.la3)
<<NOKEEP
	$(ISIS) :F1:locate $*.rel to $@ SYMBOLS MAP PUBLICS CODE($(OVERLAY)) STACKSIZE(0) print($*.ma3)
	del $*.rel
	@find $*.la3 "LINK MAP" >nul || (del $@ & exit /b 1)

# pex file and makefile dependencies
$(P3SRCS:.pl3=.obj): $(PEXFILE) makefile
$(P4SRCS:.plm=.obj): $(PEXFILE) makefile
$(ASRCS:.asm=.obj): makefile 

# housekeeping rules
clean:
	del *.obj *lst *.map *.abs *.rel *.lin *.*~ *.la? *.ma? *.lo? *.mo? *~ *.ipx *.*~ *.lst.prn

vclean: clean
	del asm80 asm80.ov?

uclean: vclean
	del ??????.* makefile *.pls .extract

gitprep: uclean
	..\..\unpack.pl



# auto generated

close.plm
close: DO;
$include(close.ipx)

close: PROCEDURE(conn, status$p) public;
    declare (conn, status$p) address;
    CALL ISIS(ICLOSE, .conn);
end close;
end;
delete.plm
delete: DO;
$include(delete.ipx)

delete: procedure (path$p, status$p) public;
    declare (path$p, status$p) address;
    call ISIS(IDELETE, .path$p);
end delete;
end;
error.plm
error: DO;
$include(error.ipx)

error: procedure (error$num) public;
    declare (error$num) address;
    declare status address;
    status = .status;
    call ISIS(IERROR, .error$num);
end error;
end;
exit.plm
exit: DO;
$include(exit.ipx)

exit: procedure public;
    declare tmp address;
    tmp = .tmp;
    call ISIS(IEXIT, .tmp);
end exit;
end;
load.plm
load: DO;
$include(load.ipx)

load: procedure (path$p, load$offset, switch, entry$p, status$p) public;
    declare (path$p, load$offset, switch, entry$p, status$p) address;
    CALL ISIS(ILOAD, .path$p);
end load;
end;
open.plm
open: DO;
$include(open.ipx)

open: procedure (conn$p, path$p, access, echo, status$p) public;
    declare (conn$p, path$p, access, echo, status$p) address;
    CALL ISIS(IOPEN, .conn$p);
end open;
end;
read.plm
read: DO;
$include(read.ipx)

read: procedure (conn, buff$p, count, actual$p, status$p) public;
    declare (conn, buff$p, count, actual$p, status$p) address;
    call ISIS(IREAD, .conn);
end read;
end;
rescan.plm
rescan: DO;
$include(rescan.ipx)
rescan: procedure (conn, status$p) public;
    declare (conn, status$p) address;
    call ISIS(IRESCAN, .conn);
end rescan;
end;
seek.plm
seek: DO;
$include(seek.ipx)

seek: procedure (conn, mode, block$p, byte$p, status$p) public;
    declare (conn, mode, block$p, byte$p, status$p) address;
    CALL ISIS(ISEEK, .conn);
end seek;
end;
write.plm
write: DO;
$include(write.ipx)

write: procedure (conn, buff$p, count, status$p) public;
    declare (conn, buff$p, count, status$p) address;
    call ISIS(IWRITE, .conn);
end write;
end;
pcktkn.asm
	public pckTkn
	public ISIS
	extrn toksiz
	extrn tokst;

	aseg
ISIS	equ	40h	; definition of ISIS entry, here to avoid another asm file

; pckTkn - packs the token pointed by tokst, with length toksiz into 4 bytes
; packed version replaces original and toksize set to 4 bytes

	CSEG
pckTkn: lhld	tokst	; pointer to the token to pack
	xchg
	lxi	h, toksiz
	mov	c, m	; unpacked length
	mvi	m, 4	; new packed length is 4 bytes
	call pack3	; pack 3 chars into hl
	push	h
	call pack3
	pop	b
	xchg		; put the packed data into the first 4 bytes
	dcx	h
	dcx	h
	dcx	h
	mov	m, d
	dcx	h
	mov	m, e
	dcx	h
	mov	m, b
	dcx	h
	mov	m, c
	ret
pack3:
	lxi	h, 0	; get 3 chars packed into 2 bytes
	mvi	b, 3

L6291:
	push	d	; pointer to next char
	mov	d, h	; hl x 40
	mov	e, l
	dad	h
	dad	h
	dad	d
	dad	h
	dad	h
	dad	h
	pop	d	
	call pack1	; add in next char
	add	l
	mov	l, a
	mvi	a, 0
	adc	h
	mov	h, a
	dcr	b	; get the 3 chars
	jnz	L6291
	ret

pack1:	ldax	d		; pick up next character
	inx	d		; advance for next time
	dcr	c		; check it is valid
	jm	L62B7
	sui	2Fh		; /012345678  (0-9)
				; 9?@ABCDEFG  (10-19)
				; HIJKLMNOPQ  (20-29)
				; RSTUVWXYZ[  (30-39)
	cpi	10h		; digit so return
	rc
	sui	5		; exclude : ; < = >
	ret

L62B7:
	sub	a		; 0 no char
	ret

	end
cprite.asm
	CSEG
cprite:	db '(C) 1976,1977,1979,1980 INTEL CORP'
	end;
memory.asm
	public EDATA
	DSEG
EDATA	equ	$
	end



