declare lit literally 'literally',
	TRUE lit '0FFh',
	FALSE lit '0';
declare tokenSize lit 'toksiz',
	tokStart lit 'tokst',
$IF OVL=4
	IN$BUF$SIZE lit '512',
	OUT$BUF$SIZE lit '512',
$ELSEIF OVL=5
	IN$BUF$SIZE lit '2048',
	OUT$BUF$SIZE lit '2048',
$ELSE
	IN$BUF$SIZE lit '200',
	OUT$BUF$SIZE lit '128',
$ENDIF

$IF OVL=4
	mem(1) byte public at(0),
	b$8FD5(127) byte public,
	w$9054 address public,
	off$9056 address public initial(.b$8FD5),
	b$9058 byte public initial(0),
	b$9059 byte public,
	b$905A byte public,
	b$905B byte public,
	b$905C byte public,
	b$905D byte public initial(0),
	b$905E byte public,
	b$905F byte,
	b$9060 byte public,
	b$9061 byte public,
	b$9062 byte public,
	b$9063 byte public,
	b$9064 byte public,
	b$9065 byte public,
	b$9066 byte public,
	b$9067 byte public initial(0),
	w$9068 address public,
	w$906A address public,
	/*
		mtype has the following values
		1 -> IRP
		2 -> IRPC
		3 -> REPT
		4 -> ???
		5 -> ???
	*/
		
	s906CStk(10) structure(macroCondSP byte, ifDepth byte, mtype byte, b3 byte,
			     w4 address, buf$p address, blk address, w10 address,
			     w12 address, w14 address) public,
	s906C structure(macroCondSP byte, ifDepth byte, mtype byte, b3 byte,
			     w4 address, buf$p address, blk address, w10 address,
			     w12 address, w14 address) public at(.s906CStk(0)),
	s906C$blk address at(.s906C.blk) initial(0FFFFh),
	w$910C address,
	curMacroBlk address public initial(0FFFFh),
	nxtMacroBlk address public initial(0),
	maxMacroBlk address public initial(0),
	w$9114 address public,
	macroBuf(129) byte public,
	w$9197 address public,
	w$9199 address public,
	w$919B address public,
	w$919D address public,
	w$919F address public,
	b$91A1 byte public initial(0),
	b$91A2 byte public initial(0),

	b$91A3 byte public initial(81h),
	b$91A4(*) byte public initial(3Fh, 3Fh, 0, 0, 0, 0, 80h),
$ENDIF
/* ov4 compat 2C8C */
	w651F address public,
	b6521 byte public,
	w6522 address public,
	b6524 byte public,
	b6525 byte public,
	b6526(4) byte public initial(0, 0, 0, 0),
	(fix22Idx, fix24Idx, fix20Idx, fix6Idx) byte public at (.b6526),
	extNamIdx byte public initial(0),
	b652B(4) byte public initial(0FFh, 0FFh, 0FFh, 0FFh),
	b652F byte public initial(0FFh),
	rec0E(4) byte public initial(0Eh, 0, 0),
	rec18a structure(type byte, len address, dta(125) byte) public initial(18h, 0, 0),
	moduleNameLen byte public initial(6),
	rec18 structure(type byte, len address, dta(125) byte) public initial(18h, 0, 0),
	rec06 structure(type byte, len address, seg byte, addr address, dta(122) byte, crc byte) public at(.rec18),
	rec16 structure(type byte, len address, seg byte, dta(124) byte, crc byte) public initial (16h, 1, 0, 0, 0),
	rec22 structure(type byte, len address, fixtype byte, dta(62) address) public at(.rec16),
	rec24 structure(type byte, len address, seg byte, fixtype byte, dta(29) address, crc byte) public,
	rec20 structure(type byte, len address, fixtype byte, dta(30) address, crc byte) public,
	rec04 structure(type byte, len address, subtype byte, seg byte, addr address, crc byte) public initial( 4, 4, 0),
	wZERO address public initial(0),
	pad6741 byte initial(0ah),
	b6742 byte public initial(0),
	b6743 byte public initial(0),
	b6744 byte public,
	b6745 byte public initial(1),
	padb6746 byte,
	activeSeg byte public,
	b6748 byte public initial(0),
	b6749 byte public initial(0),
	b674A(2) byte public,
	alignTypes(4) byte public initial(3, 3, 3, 3),
	w6750 address public,
	w6752 address public,
	b6754 byte public initial(0),
	b6755 byte public initial(0),
	startAddr address public initial(0),
	tokenSP byte public initial(0),
	lineBuf(128) byte public,
	tokStart(9) address public initial(.lineBuf),
	curTokStart address public at(.tokStart),
	tokenSym(9) address public initial(0),
	curTokenSym$p address public at(.tokenSym(0)),
	curTokenSym based curTokenSym$p structure(w0 address, w2 address, w4 address, type byte, b7 byte),
	tokenType(9) byte public,
	tokenSize(9) byte public initial(0),
	tokenAttr(9) byte public,
	tokenSymId(9) address public,
/* end */
	endLineBuf address public initial(.tokStart),
	ifDepth byte public initial(0),
	skipping(9) byte public,
	inElse(9) byte public,
$IF OVL=4
	macroCondSP byte public initial(0),
	macroCondStk(17) byte public,
	b$94DD(2) byte,
$ENDIF
	opSP byte public,
	opStack(17) byte public,
/* ov4 compat 2CA0 */
	(accum1, accum2) address public,
	(accum1$lb, accum1$hb, accum2$lb, accum2$hb) byte public at(.accum1),
	b6855 byte public,
	b6856 byte public,
	b6857 byte public,
	b6858 byte public,
	b6859 byte public,
	w685A address public,
	w685C address public,
	curChar byte public initial(0),
	reget byte public initial(0),
	lookAhead byte public,
	pad6861 byte initial(0),
	symTab(2) address public,
	w6866 address public,
	w6868(3) address public,
	w686E address public,
	w6870 address public,
	b6872 byte public initial(0),
	b6873(6) byte public,
	b6879(6) byte public,
	b687F byte public,
	b6880 byte public,
	b6881 byte public initial(0),
	b6882 byte public initial(0),
	b6883 byte public initial(0),
	b6884 byte public initial(0),
	b6885 byte public initial(0),
	objfd address public,
	xreffd address public,
	infd address public,
	outfd address public,
	macrofd address public,
	statusIO address public,
	openStatus address public,
	pad6894 address initial(0FFFFh),
	b6896 byte public initial(20h),	
	b6897 byte public initial(0),
	b6898 byte public initial(TRUE),
/* end */
$IF OVL=0
	pad6899 byte initial(0),
$ENDIF
/* ov4 compat 2C9F */
	b689A byte public,
	b689B byte public,
	b689C byte public,
	pad689D(2) byte,
	curCol byte public initial(1),
	w68A0 address public,
	w68A2 address public,
	lineCnt address public,
	w68A6 address public,
	pageCnt address public,
	pad68AA byte,
	b68AB byte public,
	pad68AC byte,
	b68AD byte public initial(0),
	b68AE(8) byte public initial(0, 0, 0, 0, 0, 0, 0, 0),
	w68B6 address public initial(IN$BUF$SIZE),
	b68B8(IN$BUF$SIZE) byte public,
	outbuf(OUT$BUF$SIZE) byte public,
/* end */
	b6A00 byte public,
/* ov4 compat 2F57 */
	out$p address public initial(.outbuf),
	endOutBuf address public,
	pad6A05 address initial(.outbuf),
	pad6A07 byte initial(0),
	objFile(15) byte public initial('               '), /* 15 spaces */
	lstFile(15) byte public initial('               '), /* 15 spaces */
	aF0Asxref$tmp(*) byte public initial(':F0:ASXREF.TMP '),
	aF0Asxref(*) byte public initial(':F0:ASXREF '),
	aF0Asmac$tmp(*) byte public initial(':F0:ASMAC.TMP '),
	w6A4E address public initial(1),
	bp6A4E(2) byte public at(.w6A4E),
	pad6A50(2) byte initial('  '),		/* protects for very big files */
	asciiLineNo(4) byte public initial('   0'),
	b6A56 byte public,
	b6A57(4) byte public initial('   0'),
	optDEBUG byte public initial(0),	/* DEBUG */
	options(1) byte public at(.optDEBUG),
	optMACRODEBUG byte public initial(0),		/* MACRODEBUG */
	optXREF byte public initial(0),		/* XREF */
	optSYMBOLS byte public initial(0FFh),	/* SYMBOLS */
	optPAGING byte public initial(0FFh),	/* PAGING */
	optTTY byte public initial(0),		/* TTY */
	optMOD85 byte public initial(0),	/* MOD85 */
	optPRINT byte public initial(0FFh),	/* PRINT */
	optOBJECT byte public initial(0FFh),	/* OBJECT */
	optMACROFILE byte public initial(0),		/* MACROFILE */
	optPAGEWIDTH byte public initial(78h),		/* PAGEWIDTH */
	optPAGELENGTH byte public initial(42h),		/* PAGELENGTH */
	pad6A67 byte initial(0),		/* INCLUDE */
	optTITLE byte public initial(0),		/* TITLE */
	pad6A69(2) byte,			/* SAVE, RESTORE */
	optEJECT byte public initial(0),		/* EJECT */
	optLIST byte public initial(0FFh),	/* LIST */	/* SAVE/RESTORE act on next 3 opts */
	optGEN byte public initial(0FFh),	/* GEN */
	optCOND byte public initial(0FFh),	/* COND */
	b6A6F byte public initial(0FFh),
	titleLen byte public initial(0),
	b6A71 byte public,
	pad6A72(3) byte initial(78h, 0FFh),
	optionSeen(12) byte public initial(0,0,0,0,0,0,0,0,0,0,0,0),
	saveStack(24) byte public,
	saveIdx byte public initial(0),
	optTITLESTR(64) byte public,
	collectBufLen byte public,
	b6ADB byte public,
	optionId byte public,
	collectBuf(64) byte public,
	collectBufIdx byte public initial(0),
	w6B1E address public,
/* end */
$IF OVL=4
	b$9A77 byte public initial(0),
$ELSE
	b6B20 byte public initial(0),
	MacroDebugOrGen byte public initial(0),
$ENDIF
/* ov4 compat 2F56 */
	scanOptions byte public,
	b6B23 byte public,
	b6B24 byte public,
	b6B25 byte public,
	has16bitOperand byte public,
	phase byte public,
	b6B28 byte public,
	b6B29 byte public,
	opType byte public,
	b6B2B byte public,
	b6B2C byte public,
	b6B2D byte public,
	b6B2E byte public,
	b6B2F byte public,
	b6B30 byte public,
	b6B31 byte public,
	b6B32 byte public,
	b6B33 byte public,
	b6B34 byte public initial(0FFh),
	b6B35 byte public initial(0FFh),
	b6B36 byte public initial(0),
	segSize(4) address public initial(0, 0, 0, 0),	/* note treated as array */
	padw6B3E(2) byte initial(0, 0),
	w6B41(3) address public initial(0, 0, 0),
	cmdLineBuf(129) byte public,
	actRead address public,
	errCnt address public,
	padw6BCB(2) byte,
	w6BCE address public,
	pad6BD0(3) byte initial(0),
	zero address public initial(0),
	cmdch$p address public initial(.cmdLineBuf),
	options$p address public,
	b6BD9 byte public initial(0),
	b6BDA byte public,
	b6BDB byte public,
	b6BDC byte public,
	b6BDD byte public,
/* end */
$IF OVL=4
	b$9B34 byte initial(0),
$ENDIF
/* ov4 compat 2F57 */
	curFileName$p address public,
	w6BE0 address public,
	bp6BE0(2) byte public at(.w6BE0),
	w6BE2 address public;
/* end */
