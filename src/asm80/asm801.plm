$SET(ASM801)
asm80$1:
do;

$include(asm801.ipx)

declare	spaces24(*) byte public data('                        ', 0),
	ascCRLF(*) byte public data(0Dh, 0Ah, 0),
	signonMsg(*) byte public data(0Dh, 0Ah),
	aIsisIi80808085(*) byte public data('ISIS-II 8080/8085 MACRO ASSEMBLER, V4.1', 9, 9),
	aModulePage(*) byte public data('MODULE ',9, ' PAGE ', 0),
	bZERO byte public data(0),
	bTRUE byte public data(0FFh),
	aC19761977197$0(*) byte data('(C) 1976,1977,1979,1980 INTEL CORP'),
	aStack(*) byte public data(0Dh, 0Ah, 'STACK', 0),
	aTable(*) byte public data(0Dh, 0Ah, 'TABLE', 0),
	aCommand(*) byte public data(0Dh, 0Ah, 'COMMAND', 0),
	aEof(*) byte public data(0Dh, 0Ah, 'EOF', 0),
	aFile(*) byte public data(0Dh, 0Ah, 'FILE', 0),
	aMemory(*) byte public data(0Dh, 0Ah, 'MEMORY', 0),
	aError(*) byte public data(' ERROR', 0Dh, 0Ah, 0),
	aError$0(*) byte public data(' ERROR, ', 0Dh,0Ah, 0),
	errStrs(*) address public data(.aStack, .aTable, .aCommand, .aEof, .aFile, .aMemory),
	errStrsLen(*) byte public data(7, 7, 9, 5, 6, 8),
	aBadSyntax(*) byte public data('BAD SYNTAX', 0Dh, 0Ah),
	aCo(*) byte public data(':CO:', 0);

declare	loadedOvl byte initial(4),
	ovlFile(*) byte public initial(':F0:ASM80.OV0 ');

$include(as4252.pac)


start:
	call getAsmFile;
	phase = 1;
	call resetData;
	call initialControls;
	if ctlMACROFILE then
	do;
		if physmem < 8001h then
			call runtimeError(5);	 /* memory error */
		if includefd <> rootfd then
			call closeF(includefd);
		call closeF(infd);
		ovlFile(12) = '4';		/* use macro asm version */
		call load(.ovlFile, 0, 1, 0, .statusIO);
		call ioErrChk;
	end;
	if physmem > 8001h then
	do;
		if includefd <> rootfd then
			call closeF(includefd);
		call closeF(infd);
		ovlFile(12) = '5';		/* use big memory asm version */
		call load(.ovlFile, 0, 1, 0, .statusIO);
		call ioErrChk;
	end;

	if MacroDebugOrGen then			/* attempt to use macro features */
		call runtimeError(2);		/* command error */

	if ctlOBJECT then
	do;
		call delete(.objFile, .statusIO);
		objfd = inOpen(.objFile, 3);
	end;

	if ctlXREF then
	do;
		xreffd = inOpen(.aF0Asxref$tmp, 2);
		outfd = xreffd;
	end;

	call sub$540D;
	phase = 2;
	if ctlOBJECT then
	do;
		call ovlMgr(2);
		if r$extnames1.len > 0 then
			call writeRec(.r$extnames1); /* in overlay 2 */
		if w6750 = 0 then
			call writeModhdr;		/* in overlay 2 */
	end;
	if not ctlOBJECT or ctlPRINT then
	do;
		if ctlPRINT then
			outfd = inOpen(.lstFile, 2);

		call ovlMgr(3);
		call resetData;
		call initialControls;
		call sub$540D;
	end;
	if ctlPRINT then
	do;
		call ovlMgr(1);
		call asmComplete;
		call flushout;
	end;
	if ctlOBJECT then
	do;
		phase = 3;
		call ovlMgr(3);
		call resetData;
		call sub$70EE;
		call initialControls;
		call sub$540D;
		call ovlMgr(2);
		call ovl11;
		call writeModend;
	end;
	if not strUCequ(.aCo, .lstFile) then
	do;
		call ovlMgr(1);
		call ovl9;
	end;

	call ovlMgr(1);
	call ovl10;

end;
