/* isis command codes */
IOPEN	'0'
ICLOSE	'1'
IDELETE	'2'
IREAD	'3'
IWRITE	'4'
ISEEK	'5'
ILOAD	'6'
IRENAME	'7'
ICONSOL	'8'
IEXIT	'9'
IATTRIB	'10'
IRESCAN	'11'
IERROR	'12'
IWHOCON	'13'
ISPATH	'14'

LIT             'literally'
POINTER         'ADDRESS'
WORD            'ADDRESS'
BOOLEAN         'BYTE'
local           ' '
TRUE            '0FFH'
FALSE           '0'
FILE$NAME$LEN   '15'

TAB             '9'
CR              '0DH'
LF              '0AH'
QUOTE           '27H'
ISISEOF         '81H'

/* flags */
F$PUBLIC	'0'
F$EXTERNAL	'1'
F$BASED	'2'
F$INITIAL	'3'
F$REENTRANT	'4'
F$DATA	'5'
F$INTERRUPT	'6'
F$AT	'7'
F$ARRAY	'8'
F$STARDIM	'9'
F$PARAMETER	'10'
F$MEMBER	'11'
F$LABEL	'12'
F$AUTOMATIC	'13'
F$PACKED	'14'
F$ABSOLUTE	'15'
F$MEMORY	'16'
F$DECLARED	'17'
F$DEFINED	'18'
F$MODGOTO	'19'

/* token info types */
LIT$T	'0'
LABEL$T	'1'
BYTE$T	'2'
ADDRESS$T	'3'
STRUCT$T	'4'
PROC$T	'5'
BUILTIN$T	'6'
MACRO$T	'7'
UNK$T	'8'
TEMP$T	'9'

/* Lex tokens */
L$LINEINFO	'0'
L$SYNTAXERROR	'1'
L$TOKENERROR	'2'
L$LIST	'3'
L$NOLIST	'4'
L$CODE	'5'
L$NOCODE	'6'
L$EJECT	'7'
L$INCLUDE	'8'
L$STMTCNT	'9'
L$LABELDEF	'10'
L$LOCALLABEL	'11'
L$JMP	'12'
L$JMPFALSE	'13'
L$PROCEDURE	'14'
L$SCOPE	'15'
L$END	'16'
L$DO	'17'
L$DOLOOP	'18'
L$WHILE	'19'
L$CASE	'20'
L$CASELABEL	'21'
L$IF	'22'
L$STATEMENT	'23'
L$CALL	'24'
L$RETURN	'25'
L$GO	'26'
L$GOTO	'27'
L$SEMICOLON	'28'
L$ENABLE	'29'
L$DISABLE	'30'
L$HALT	'31'
L$EOF	'32'
L$AT	'33'
L$INITIAL	'34'
L$DATA	'35'
L$VARIABLE	'36'
L$NUMBER	'37'
L$STRING	'38'
L$PLUSSIGN	'39'
L$MINUSSIGN	'40'
L$PLUS	'41'
L$MINUS	'42'
L$STAR	'43'
L$SLASH	'44'
L$MOD	'45'
L$COLONEQUALS	'46'
L$AND	'47'
L$OR	'48'
L$XOR	'49'
L$NOT	'50'
L$LT	'51'	
L$LE	'52'
L$EQ	'53'
L$NE	'54'
L$GE	'55'
L$GT	'56'
L$COMMA	'57'
L$LPAREN	'58'
L$RPAREN	'59'
L$PERIOD	'60'
L$TO	'61'
L$BY	'62'
L$INVALID	'63'
L$MODULE	'64'
L$XREFINFO	'65'
L$XREF	'66'
L$EXTERNAL	'67'
L$ERROR	'68'

/* character classes */
CC$BINDIGIT	'0'
CC$OCTDIGIT	'1'
CC$DECDIGIT	'2'
CC$HEXCHAR	'3'
CC$ALPHA	'4'
CC$PLUS		'5'
CC$MINUS	'6'
CC$STAR		'7'
CC$SLASH	'8'
CC$LPAREN	'9'
CC$RPAREN	'10'
CC$COMMA	'11'
CC$COLON	'12'
CC$SEMICOLON	'13'
CC$QUOTE	'14'
CC$PERIOD	'15'
CC$EQUALS	'16'
CC$LESS		'17'
CC$GREATER	'18'
CC$WSPACE	'19'
CC$DOLLAR	'20'
CC$INVALID	'21'
CC$NONPRINT	'22'
CC$NEWLINE	'23'

/* intermediate tokens */
T$VARIABLE	'0'
T$NUMBER	'1'
T$STRING	'2'
T$PLUSSIGN	'3'
T$MINUSSIGN	'4'
T$STAR	'5'
T$SLASH	'6'
T$MOD	'7'
T$PLUS	'8'
T$MINUS	'9'
T$AND	'10'
T$OR	'11'
T$XOR	'12'
T$NOT	'13'
T$LT	'15'
T$LE	'16'
T$EQ	'17'
T$NE	'18'
T$GE	'19'
T$GT	'20'
T$COLON$EQUALS	'21'
T$COLON	'22'
T$SEMICOLON	'23'
T$PERIOD	'24'
T$LPAREN	'25'
T$RPAREN	'26'
T$COMMA	'27'
T$CALL	'28'
T$DECLARE	'29'
T$DISABLE	'30'
T$DO	'31'
T$ENABLE	'32'
T$END	'33'
T$GO	'34'
T$GOTO	'35'
T$HALT	'36'
T$IF	'37'
T$PROCEDURE	'38'
T$RETURN	'39'
T$ADDRESS	'40'
T$AT	'41'
T$BASED	'42'
T$BYTE	'43'
T$DATA	'44'
T$EXTERNAL	'45'
T$INITIAL	'46'
T$INTERRUPT	'47'
T$LABEL	'48'
T$LITERALLY	'49'
T$PUBLIC	'50'
T$REENTRANT	'51'
T$STRUCTURE	'52'
T$BY	'53'
T$CASE	'54'
T$ELSE	'55'
T$EOF	'56'
T$THEN	'57'
T$TO	'58'
T$WHILE	'59'

/* T2 codes */
T2$LT	'0'
T2$LE	'1'
T2$NE	'2'
T2$EQ	'3'
T2$GE	'4'
T2$GT	'5'
T2$ROL	'6'
T2$ROR	'7'
T2$SCL	'8'
T2$SCR	'9'
T2$SHL	'10'
T2$SHR	'11'
T2$JMPFALSE	'12'
/*	T2$13 LIT '13', */
/*	T2$14 LIT '14', */
/*	T2$15 LIT '15', */
/*	T2$16 LIT '16', */
/*	T2$17 LIT '17', */
T2$DOUBLE	'18'
T2$ADDB	'19'
T2$MINUSSIGN	'20'
T2$STAR	'21'
T2$SLASH	'22'
T2$MOD	'23'
T2$AND	'24'
T2$OR	'25'
T2$XOR	'26'
T2$BASED	'27'
T2$BYTEINDEX	'28'
T2$WORDINDEX	'29'
T2$MEMBER	'30'
T2$UNARYMINUS	'31'
T2$NOT	'32'
T2$LOW	'33'
T2$HIGH	'34'
T2$ADDRESSOF	'35'
T2$PLUS	'36'
T2$MINUS	'37'
/*	T2$38 LIT '38', */
/*	T2$39 LIT '39', */
/*	T2$40 LIT '40', */
/*	T2$41 LIT '41', */
/*	T2$42 LIT '42', */
/*	T2$43 LIT '43', */
T2$44	'44'
/*	T2$45 LIT '45', */
/*	T2$46 LIT '46', */
/*	T2$47 LIT '47', */
/*	T2$48 LIT '48', */
/*	T2$49 LIT '49', */
/*	T2$50 LIT '50', */
T2$51	'51'
/*	T2$52 LIT '52', */
/*	T2$53 LIT '53', */
/*	T2$54 LIT '54', */
/*	T2$55 LIT '55', */
T2$56	'56'
T2$TIME	'57'
T2$STKBARG	'58'
T2$STKWARG	'59'
T2$DEC	'60'
T2$STORE	'61'
T2$OUTPUT	'62'
T2$63	'63'
T2$STKARG	'64'
T2$65	'65'
/*	T2$66 LIT '66', */
/*	T2$67 LIT '67', */
/*	T2$68 LIT '68', */
T2$MOVE	'69'
/*	T2$70 LIT '70', */
T2$RETURNBYTE	'71'
T2$RETURNWORD	'72'
T2$RETURN	'73'
/*	T2$74 LIT '74', */
/*	T2$75 LIT '75', */
/*	T2$76 LIT '76', */
/*	T2$77 LIT '77', */
/*	T2$78 LIT '78', */
/*	T2$79 LIT '79', */
/*	T2$80 LIT '80', */
/*	T2$81 LIT '81', */
/*	T2$82 LIT '82', */
/*	T2$83 LIT '83', */
/*	T2$84 LIT '84', */
/*	T2$85 LIT '85', */
/*	T2$86 LIT '86', */
/*	T2$87 LIT '87', */
/*	T2$88 LIT '88', */
/*	T2$89 LIT '89', */
/*	T2$90 LIT '90', */
/*	T2$91 LIT '91', */
/*	T2$92 LIT '92', */
/*	T2$93 LIT '93', */
/*	T2$94 LIT '94', */
/*	T2$95 LIT '95', */
/*	T2$96 LIT '96', */
/*	T2$97 LIT '97', */
/*	T2$98 LIT '98', */
/*	T2$99 LIT '99', */
/*	T2$100 LIT '100', */
/*	T2$101 LIT '101', */
/*	T2$102 LIT '102', */
/*	T2$103 LIT '103', */
/*	T2$104 LIT '104', */
/*	T2$105 LIT '105', */
/*	T2$106 LIT '106', */
/*	T2$107 LIT '107', */
/*	T2$108 LIT '108', */
/*	T2$109 LIT '109', */
/*	T2$110 LIT '110', */
/*	T2$111 LIT '111', */
/*	T2$112 LIT '112', */
/*	T2$113 LIT '113', */
/*	T2$114 LIT '114', */
/*	T2$115 LIT '115', */
/*	T2$116 LIT '116', */
/*	T2$117 LIT '117', */
/*	T2$118 LIT '118', */
/*	T2$119 LIT '119', */
/*	T2$120 LIT '120', */
/*	T2$121 LIT '121', */
/*	T2$122 LIT '122', */
/*	T2$123 LIT '123', */
/*	T2$124 LIT '124', */
/*	T2$125 LIT '125', */
/*	T2$126 LIT '126', */
/*	T2$127 LIT '127', */
/*	T2$128 LIT '128', */
/*	T2$129 LIT '129', */
T2$ADDW	'130'
T2$BEGMOVE	'131'
T2$CALL	'132'
T2$CALLVAR	'133'
/*	T2$134 LIT '134', */
T2$PROCEDURE	'135'
T2$LOCALLABEL	'136'
T2$CASELABEL	'137'
T2$LABELDEF	'138'
T2$INPUT	'139'
T2$GO$TO	'140'
T2$JMP	'141'
T2$JNC	'142'
T2$JNZ	'143'
T2$SIGN	'144'
T2$ZERO	'145'
T2$PARITY	'146'
T2$CARRY	'147'
T2$DISABLE	'148'
T2$ENABLE	'149'
T2$HALT	'150'
T2$STMTCNT	'151'
T2$LINEINFO	'152'
T2$MODULE	'153'
T2$SYNTAXERROR	'154'
T2$TOKENERROR	'155'
T2$EOF	'156'
T2$LIST	'157'
T2$NOLIST	'158'
T2$CODE	'159'
T2$NOCODE	'160'
T2$EJECT	'161'
T2$INCLUDE	'162'
T2$ERROR	'163'
/*	T2$164 LIT '164', */
/*	T2$165 LIT '165', */
/*	T2$166 LIT '166', */
/*	T2$167 LIT '167', */
/*	T2$168 LIT '168', */
/*	T2$169 LIT '169', */
/*	T2$170 LIT '170', */
/*	T2$171 LIT '171', */
T2$VARIABLE	'172'
T2$NUMBER	'173'
T2$BIGNUMBER	'174'
/*	T2$175 LIT '175', */
/*	T2$176 LIT '176', */
/*	T2$177 LIT '177', */
/*	T2$178 LIT '178', */
/*	T2$179 LIT '179', */
/*	T2$180 LIT '180', */
T2$STACKPTR	'181'
T2$SEMICOLON	'182'
T2$OPTBACKREF	'183'
T2$CASE	'184'
T2$ENDCASE	'185'
T2$ENDPROC	'186'
T2$LENGTH	'187'
T2$LAST	'188'
T2$SIZE	'189'
T2$BEGCALL	'190'
/*	T2$191 LIT '191', */
/*	T2$192 LIT '192', */
/*	T2$193 LIT '193', */
/*	T2$194 LIT '194', */
/*	T2$195 LIT '195', */
/*	T2$196 LIT '196', */
/*	T2$197 LIT '197', */
/*	T2$198 LIT '198', */
/*	T2$199 LIT '199', */
/*	T2$200 LIT '200', */
/*	T2$201 LIT '201', */
/*	T2$202 LIT '202', */
/*	T2$203 LIT '203', */
/*	T2$204 LIT '204', */
/*	T2$205 LIT '205', */
/*	T2$206 LIT '206', */
/*	T2$207 LIT '207', */
/*	T2$208 LIT '208', */
/*	T2$209 LIT '209', */
/*	T2$210 LIT '210', */
/*	T2$211 LIT '211', */
/*	T2$212 LIT '212', */
/*	T2$213 LIT '213', */
/*	T2$214 LIT '214', */
/*	T2$215 LIT '215', */
/*	T2$216 LIT '216', */
/*	T2$217 LIT '217', */
/*	T2$218 LIT '218', */
/*	T2$219 LIT '219', */
/*	T2$220 LIT '220', */
/*	T2$221 LIT '221', */
/*	T2$222 LIT '222', */
/*	T2$223 LIT '223', */
/*	T2$224 LIT '224', */
/*	T2$225 LIT '225', */
/*	T2$226 LIT '226', */
/*	T2$227 LIT '227', */
/*	T2$228 LIT '228', */
/*	T2$229 LIT '229', */
/*	T2$230 LIT '230', */
/*	T2$231 LIT '231', */
/*	T2$232 LIT '232', */
/*	T2$233 LIT '233', */
/*	T2$234 LIT '234', */
/*	T2$235 LIT '235', */
/*	T2$236 LIT '236', */
/*	T2$237 LIT '237', */
/*	T2$238 LIT '238', */
/*	T2$239 LIT '239', */
/*	T2$240 LIT '240', */
/*	T2$241 LIT '241', */
/*	T2$242 LIT '242', */
/*	T2$243 LIT '243', */
/*	T2$244 LIT '244', */
/*	T2$245 LIT '245', */
/*	T2$246 LIT '246', */
/*	T2$247 LIT '247', */
/*	T2$248 LIT '248', */
/*	T2$249 LIT '249', */
/*	T2$250 LIT '250', */
/*	T2$251 LIT '251', */
/*	T2$252 LIT '252', */
/*	T2$253 LIT '253', */
T2$254	'254'

/* ICodes */
I$STRING	'0'
I$VARIABLE	'1'
I$NUMBER	'2'
I$PLUSSIGN	'3'
I$MINUSSIGN	'4'
I$PLUS	'5'
I$MINUS	'6'
I$STAR	'7'
I$SLASH	'8'
I$MOD	'9'
I$AND	'10'
I$OR	'11'
I$XOR	'12'
I$NOT	'13'
I$LT	'14'
I$LE	'15'
I$EQ	'16'
I$NE	'17'
I$GE	'18'
I$GT	'19'
I$ADDRESSOF	'20'
I$UNARYMINUS	'21'
I$STACKPTR	'22'
I$INPUT	'23'
I$OUTPUT	'24'
I$CALL	'25'
I$CALLVAR	'26'
I$BYTEINDEX	'27'
I$WORDINDEX	'28'
I$COLONEQUALS	'29'
I$MEMBER	'30'
I$BASED	'31'
I$CARRY	'32'
I$DEC	'33'
I$DOUBLE	'34'
I$HIGH	'35'
I$LAST	'36'
I$LENGTH	'37'
I$LOW	'38'
I$MOVE	'39'
I$PARITY	'40'
I$ROL	'41'
I$ROR	'42'
I$SCL	'43'
I$SCR	'44'
I$SHL	'45'
I$SHR	'46'
I$SIGN	'47'
I$SIZE	'48'
I$TIME	'49'
I$ZERO	'50'

/* AT Icodes */
ATI$AHDR	'0'
ATI$DHDR	'1'
ATI$2	'2'
ATI$STRING	'3'
ATI$DATA	'4'
ATI$END	'5'
ATI$EOF	'6'

/* CF codes */
CF$3	'3'
CF$POP	'4'
CF$XTHL	'5'
CF$6	'6'
CF$7	'7'
CF$XCHG	'14'
CF$MOVRPM	'16'
CF$MOVLRM	'18'
CF$MOVMRPR	'19'
CF$MOVMLR	'20'
CF$DW	'21'
CF$SPHL	'22'
CF$PUSH	'23'
CF$INX	'24'
CF$DCX	'25'
CF$DCXH	'26'
CF$RET	'27'
CF$SHLD	'59'
CF$STA	'60'
CF$MOVMRP	'62'
CF$67	'67'
CF$68	'68'
CF$DELAY	'97'
CF$MOVE$HL	'103'
CF$MOVLRHR	'110'
CF$MOVHRLR	'113'
CF$MOVHRM	'114'
CF$MOVMHR	'115'
CF$INXSP	'116'
CF$DCXSP	'117'
CF$JMPTRUE	'118'
CF$134	'134'
CF$EI	'149'
CF$171	'171'
CF$174	'174'



/* error codes */
ERR1	'1' /* INVALID PL/M-80 CHARACTER */
ERR2	'2' /* UNPRINTABLE ASCII CHARACTER */
ERR3	'3' /* IDENTIFIER, STRING, OR NUMBER TOO LONG, TRUNCATED */
ERR4	'4' /* ILLEGAL NUMERIC CONSTANT TYPE */
ERR5	'5' /* INVALID CHARACTER IN NUMERIC CONSTANT */
ERR6	'6' /* ILLEGAL MACRO REFERENCE, RECURSIVE EXPANSION */
ERR7	'7' /* LIMIT EXCEEDED: MACROS NESTED TOO DEEPLY */
ERR8	'8' /* INVALID CONTROL FORMAT */
ERR9	'9' /* INVALID CONTROL */
ERR10	'10' /* ILLEGAL USE OF PRIMARY CONTROL AFTER NON-CONTROL LINE */
ERR11	'11' /* MISSING CONTROL PARAMETER */
ERR12	'12' /* INVALID CONTROL PARAMETER */
ERR13	'13' /* LIMIT EXCEEDED: INCLUDE NESTING */
ERR14	'14' /* INVALID CONTROL FORMAT, INCLUDE NOT LAST CONTROL */
ERR15	'15' /* MISSING INCLUDE CONTROL PARAMETER */
ERR16	'16' /* ILLEGAL PRINT CONTROL */
ERR17	'17' /* INVALID PATH-NAME */
ERR18	'18' /* INVALID MULTIPLE LABELS AS MODULE NAMES */
ERR19	'19' /* INVALID LABEL IN MODULE WITHOUT MAIN PROGRAM */
ERR20	'20' /* MISMATCHED IDENTIFIER AT END OF BLOCK */
ERR21	'21' /* MISSING PROCEDURE NAME */
ERR22	'22' /* INVALID MULTIPLE LABELS AS PROCEDURE NAMES */
ERR23	'23' /* INVALID LABELLED END IN EXTERNAL PROCEDURE */
ERR24	'24' /* INVALID STATEMENT IN EXTERNAL PROCEDURE */
ERR25	'25' /* UNDECLARED PARAMETER */
ERR26	'26' /* INVALID DECLARATION, STATEMENT OUT OF PLACE */
ERR27	'27' /* LIMIT EXCEEDED: NUMBER OF DO BLOCKS */
ERR28	'28' /* MISSING 'THEN' */
ERR29	'29' /* ILLEGAL STATEMENT */
ERR30	'30' /* LIMIT EXCEEDED: NUMBER OF LABELS ON STATEMENT */
ERR31	'31' /* LIMIT EXCEEDED: PROGRAM TOO COMPLEX */
ERR32	'32' /* INVALID SYNTAX, TEXT IGNORED UNTIL ';' */
ERR33	'33' /* DUPLICATE LABEL DECLARATION */
ERR34	'34' /* DUPLICATE PROCEDURE DECLARATION */
ERR35	'35' /* LIMIT EXCEEDED: NUMBER OF PROCEDURES */
ERR36	'36' /* MISSING PARAMETER */
ERR37	'37' /* MISSING ') ' AT END OF PARAMETER LIST */
ERR38	'38' /* DUPLICATE PARAMETER NAME */
ERR39	'39' /* INVALID ATTRIBUTE OR INITIALIZATION, NOT AT MODULE LEVEL */
ERR40	'40' /* DUPLICATE ATTRIBUTE */
ERR41	'41' /* CONFLICTING ATTRIBUTE */
ERR42	'42' /* INVALID INTERRUPT VALUE */
ERR43	'43' /* MISSING INTERRUPT VALUE */
ERR44	'44' /* ILLEGAL ATTRIBUTE, 'INTERRUPT' WITH PARAMETERS */
ERR45	'45' /* ILLEGAL ATTRIBUTE, 'INTERRUPT' WITH TYPED PROCEDURE */
ERR46	'46' /* ILLEGAL USE OF LABEL */
ERR47	'47' /* MISSING ') ' AT END OF FACTORED DECLARATION */
ERR48	'48' /* ILLEGAL DECLARATION STATEMENT SYNTAX */
ERR49	'49' /* LIMIT EXCEEDED: NUMBER OF ITEMS IN FACTORED DECLARE */
ERR50	'50' /* INVALID ATTRIBUTES FOR BASE */
ERR51	'51' /* INVALID BASE, SUBSCRIPTING ILLEGAL */
ERR52	'52' /* INVALID BASE, MEMBER OF BASED STRUCTURE OR ARRAY OF STRUCTURES */
ERR53	'53' /* INVALID STRUCTURE MEMBER IN BASE */
ERR54	'54' /* UNDECLARED BASE */
ERR55	'55' /* UNDECLARED STRUCTURE MEMBER IN BASE */
ERR56	'56' /* INVALID MACRO TEXT, NOT A STRING CONSTANT */
ERR57	'57' /* INVALID DIMENSION, ZERO ILLEGAL */
ERR58	'58' /* INVALID STAR DIMENSION IN FACTORED DECLARATION */
ERR59	'59' /* ILLEGAL DIMENSION ATTRIBUTE */
ERR60	'60' /* MISSING ') ' AT END OF DIMENSION */
ERR61	'61' /* MISSING TYPE */
ERR62	'62' /* INVALID STAR DIMENSION WITH 'STRUCTURE' OR 'EXTERNAL' */
ERR63	'63' /* INVALID DIMENSION WITH THIS ATTRIBUTE */
ERR64	'64' /* MISSING STRUCTURE MEMBERS */
ERR65	'65' /* MISSING ') ' AT END OF STRUCTURE MEMBER LIST */
ERR66	'66' /* INVALID STRUCTURE MEMBER, NOT AN IDENTIFIER */
ERR67	'67' /* DUPLICATE STRUCTURE MEMBER NAME */
ERR68	'68' /* LIMIT EXCEEDED: NUMBER OF STRUCTURE MEMBERS */
ERR69	'69' /* INVALID STAR DIMENSION WITH STRUCTURE MEMBER */
ERR70	'70' /* INVALID MEMBER TYPE, 'STRUCTURE' ILLEGAL */
ERR71	'71' /* INVALID MEMBER TYPE, 'LABEL' ILLEGAL */
ERR72	'72' /* MISSING TYPE FOR STRUCTURE MEMBER */
ERR73	'73' /* INVALID ATTRIBUTE OR INITIALIZATION, NOT AT MODULE LEVEL */
ERR74	'74' /* INVALID STAR DIMENSION, NOT WITH 'DATA' OR 'INITIAL' */
ERR75	'75' /* MISSING ARGUMENT OF 'AT' , 'DATA' , OR 'INITIAL' */
ERR76	'76' /* CONFLICTING ATTRIBUTE WITH PARAMETER */
ERR77	'77' /* INVALID PARAMETER DECLARATION, BASE ILLEGAL */
ERR78	'78' /* DUPLICATE DECLARATION */
ERR79	'79' /* ILLEGAL PARAMETER TYPE, NOT BYTE OR ADDRESS */
ERR80	'80' /* INVALID DECLARATION, LABEL MAY NOT BE BASED */
ERR81	'81' /* CONFLICTING ATTRIBUTE WITH 'BASE' */
ERR82	'82' /* INVALID SYNTAX, MISMATCHED '(' */
ERR83	'83' /* LIMIT EXCEEDED: DYNAMIC STORAGE */
ERR84	'84' /* LIMIT EXCEEDED: BLOCK NESTING */
ERR85	'85' /* LONG STRING ASSUMED CLOSED AT NEXT SEMICOLON OR QUOTE */
ERR86	'86' /* LIMIT EXCEEDED: SOURCE LINE LENGTH */
ERR87	'87' /* MISSING 'END' , END-OF-FILE ENCOUNTERED */
ERR88	'88' /* INVALID PROCEDURE NESTING, ILLEGAL IN REENTRANT PROCEDURE */
ERR89	'89' /* MISSING 'DO' FOR MODULE */
ERR90	'90' /* MISSING NAME FOR MODULE */
ERR91	'91' /* ILLEGAL PAGELENGTH CONTROL VALUE */
ERR92	'92' /* ILLEGAL PAGEWIDTH CONTROL VALUE */
ERR93	'93' /* MISSING 'DO' FOR 'END' , 'END' IGNORED */
ERR94	'94' /* ILLEGAL CONSTANT, VALUE > 65535 */
ERR95	'95' /* ILLEGAL RESPECIFICATION OF PRIMARY CONTROL IGNORED */
ERR96	'96' /* COMPILER ERROR: SCOPE STACK UNDERFLOW */
ERR97	'97' /* COMPILER ERROR: PARSE STACK UNDERFLOW */
ERR98	'98' /* INCLUDE FILE IS NOT A DISKETTE FILE */
ERR99	'99' /* ?? unused */
ERR100	'100' /* INVALID STRING CONSTANT IN EXPRESSION */
ERR101	'101' /* INVALID ITEM FOLLOWS DOT OPERATOR */
ERR102	'102' /* MISSING PRIMARY OPERAND */
ERR103	'103' /* MISSING ') ' AT END OF SUBEXPRESSION */
ERR104	'104' /* ILLEGAL PROCEDURE INVOCATION WITH DOT OPERATOR */
ERR105	'105' /* UNDECLARED IDENTIFIER */
ERR106	'106' /* INVALID INPUT/OUTPUT PORT NUMBER */
ERR107	'107' /* ILLEGAL INPUT/OUTPUT PORT NUMBER, NOT NUMERIC CONSTANT */
ERR108	'108' /* MISSING ') ' AFTER INPUT/OUTPUT PORT NUMBER */
ERR109	'109' /* MISSING INPUT/OUTPUT PORT NUMBER */
ERR110	'110' /* INVALID LEFT OPERAND OF QUALIFICATION, NOT A STRUCTURE */
ERR111	'111' /* INVALID RIGHT OPERAND OF QUALIFICATION, NOT IDENTIFIER */
ERR112	'112' /* UNDECLARED STRUCTURE MEMBER */
ERR113	'113' /* MISSING ') ' AT END OF ARGUMENT LIST */
ERR114	'114' /* INVALID SUBSCRIPT, MULTIPLE SUBSCRIPTS ILLEGAL */
ERR115	'115' /* MISSING ') ' AT END OF SUBSCRIPT */
ERR116	'116' /* MISSING '=' IN ASSIGNMENT STATEMENT */
ERR117	'117' /* MISSING PROCEDURE NAME IN CALL STATEMENT */
ERR118	'118' /* INVALID INDIRECT CALL, IDENTIFIER NOT AN ADDRESS SCALAR */
ERR119	'119' /* LIMIT EXCEEDED: PROGRAM TOO COMPLEX */
ERR120	'120' /* LIMIT EXCEEDED: EXPRESSION TOO COMPLEX */
ERR121	'121' /* LIMIT EXCEEDED: EXPRESSION TOO COMPLEX */
ERR122	'122' /* LIMIT EXCEEDED: PROGRAM TOO COMPLEX */
ERR123	'123' /* INVALID DOT OPERAND, BUILT-IN PROCEDURE ILLEGAL */
ERR124	'124' /* MISSING ARGUMENTS FOR BUILT-IN PROCEDURE */
ERR125	'125' /* ILLEGAL ARGUMENT FOR BUILT-IN PROCEDURE */
ERR126	'126' /* MISSING ') ' AFTER BUILT-IN PROCEDURE ARGUMENT LIST */
ERR127	'127' /* INVALID SUBSCRIPT ON NON-ARRAY */
ERR128	'128' /* INVALID LEFT-HAND OPERAND OF ASSIGNMENT */
ERR129	'129' /* ILLEGAL 'CALL' WITH TYPED PROCEDURE */
ERR130	'130' /* ILLEGAL REFERENCE TO OUTPUT FUNCTION */
ERR131	'131' /* ILLEGAL REFERENCE TO UNTYPED PROCEDURE */
ERR132	'132' /* ILLEGAL USE OF LABEL */
ERR133	'133' /* ILLEGAL REFERENCE TO UNSUBSCRIPTED ARRAY */
ERR134	'134' /* ILLEGAL REFERENCE TO UNSUBSCRIPTED MEMBER ARRAY */
ERR135	'135' /* ILLEGAL REFERENCE TO AN UNQUALIFIED STRUCTURE */
ERR136	'136' /* INVALID RETURN FOR UNTYPED PROCEDURE, VALUE ILLEGAL */
ERR137	'137' /* MISSING VALUE IN RETURN FOR TYPED PROCEDURE */
ERR138	'138' /* MISSING INDEX VARIABLE */
ERR139	'139' /* INVALID INDEX VARIABLE TYPE, NOT BYTE OR ADDRESS */
ERR140	'140' /* MISSING '=' FOLLOWING INDEX VARIABLE */
ERR141	'141' /* MISSING 'TO' CLAUSE */
ERR142	'142' /* MISSING IDENTIFIER FOLLOWING GOTO */
ERR143	'143' /* INVALID REFERENCE FOLLOWING GOTO, NOT A LABEL */
ERR144	'144' /* INVALID GOTO LABEL, NOT AT LOCAL OR MODULE LEVEL */
ERR145	'145' /* MISSING 'TO' FOLLOWING 'GO' */
ERR146	'146' /* MISSING ') ' AFTER 'AT' RESTRICTED EXPRESSION */
ERR147	'147' /* MISSING IDENTIFIER FOLLOWING DOT OPERATOR */
ERR148	'148' /* INVALID QUALIFICATION IN RESTRICTED REFERENCE */
ERR149	'149' /* INVALID SUBSCRIPTING IN RESTRICTED REFERENCE */
ERR150	'150' /* MISSING ') ' AT END OF RESTRICTED SUBSCRIPT */
ERR151	'151' /* INVALID OPERAND IN RESTRICTED EXPRESSION */
ERR152	'152' /* MISSING ') ' AFTER CONSTANT LIST */
ERR153	'153' /* INVALID NUMBER OF ARGUMENTS IN CALL, TOO MANY */
ERR154	'154' /* INVALID NUMBER OF ARGUMENTS IN CALL, TOO FEW */
ERR155	'155' /* INVALID RETURN IN MAIN PROGRAM */
ERR156	'156' /* MISSING RETURN STATEMENT IN TYPED PROCEDURE */
ERR157	'157' /* INVALID ARGUMENT, ARRAY REQUIRED FOR LENGTH OR LAST */
ERR158	'158' /* INVALID DOT OPERAND, LABEL ILLEGAL */
ERR159	'159' /* COMPILER ERROR: PARSE STACK UNDERFLOW */
ERR160	'160' /* COMPILER ERROR: OPERAND STACK UNDERFLOW */
ERR161	'161' /* COMPILER ERROR: ILLEGAL OPERAND STACK EXCHANGE */
ERR162	'162' /* COMPILER ERROR: OPERATOR STACK UNDERFLOW */
ERR163	'163' /* COMPILER ERROR: GENERATION FAILURE */
ERR164	'164' /* COMPILER ERROR: SCOPE STACK OVERFLOW */
ERR165	'165' /* COMPILER ERROR: SCOPE STACK UNDERFLOW */
ERR166	'166' /* COMPILER ERROR: CONTROL STACK OVERFLOW */
ERR167	'167' /* COMPILER ERROR: CONTROL STACK UNDERFLOW */
ERR168	'168' /* COMPILER ERROR: BRANCH MISSING IN 'IF' STATEMENT */
ERR169	'169' /* ILLEGAL FORWARD CALL */
ERR170	'170' /* ILLEGAL RECURSIVE CALL */
ERR171	'171' /* INVALID USE OF DELIMITER OR RESERVED WORD IN EXPRESSION */
ERR172	'172' /* INVALID LABEL: UNDEFINED */
ERR173	'173' /* INVALID LEFT SIDE OF ASSIGNMENT: VARIABLE DECLARED WITH DATA ATTRIBUTE */
ERR174	'174' /* INVALID NULL PROCEDURE */
ERR175	'175' /* unused */
ERR176	'176' /* INVALID INTVECTOR INTERVAL VALUE */
ERR177	'177' /* INVALID INTVECTOR LOCATION VALUE */
ERR178	'178' /* INVALID 'AT' RESTRICTED REFERENCE, EXTERNAL ATTRIBUTE CONFLICTS WITH PUBLIC ATTRIBUTE */
ERR179	'179' /* OUTER 'IF' MAY NOT HAVE AN 'ELSE' PART */
ERR180	'180' /* MISSING OR INVALID CONDITIONAL COMPILATION PARAMETER */
ERR181	'181' /* MISSING OR INVALID CONDITIONAL COMPILATION CONSTANT */
ERR182	'182' /* MISPLACED ELSE OR ELSEIF OPTION */
ERR183	'183' /* MISPLACED ENDIF OPTION */
ERR184	'184' /* CONDITIONAL COMPILATION PARAMETER NAME TOO LONG */
ERR185	'185' /* MISSING OPERATOR IN CONDITIONAL COMPILATION EXPRESSION */
ERR186	'186' /* INVALID CONDITIONAL COMPILATION CONSTANT, TOO LARGE */
ERR187	'187' /* LIMIT EXCEEDED: NUMBER OF SAVE LEVELS > 5 */
ERR188	'188' /* MISPLACED RESTORE OPTION */
ERR189	'189' /* NULL STRING NOT ALLOWED */
ERR200	'200' /* LIMIT EXCEEDED: STATEMENT SIZE */
ERR201	'201' /* INVALID DO CASE BLOCK, AT LEAST ONE CASE REQUIRED */
ERR202	'202' /* LIMIT EXCEEDED: NUMBER OF ACTIVE CASES */
ERR203	'203' /* LIMIT EXCEEDED: NESTING OF TYPED PROCEDURE CALLS */
ERR204	'204' /* LIMIT EXCEEDED: NUMBER OF ACTIVE PROCEDURES AND DO CASE GROUPS */
ERR205	'205' /* ILLEGAL NESTING OF BLOCKS, ENDS NOT BALANCED */
ERR206	'206' /* LIMIT EXCEEDED: CODE SEGMENT SIZE */
ERR207	'207' /* LIMIT EXCEEDED: SEGMENT SIZE */
ERR208	'208' /* LIMIT EXCEEDED: STRUCTURE SIZE */
ERR209	'209' /* ILLEGAL INITIALIZATION OF MORE SPACE THAN DECLARED */
ERR210	'210' /* ILLEGAL INITIALIZATION OF A BYTE TO A VALUE > 255 */
ERR211	'211' /* INVALID IDENTIFIER IN 'AT' RESTRICTED REFERENCE */
ERR212	'212' /* INVALID RESTRICTED REFERENCE IN 'AT' , BASE ILLEGAL */
ERR213	'213' /* UNDEFINED RESTRICTED REFERENCE IN 'AT' */
ERR214	'214' /* COMPILER ERROR: OPERAND CANNOT BE TRANSFORMED */
ERR215	'215' /* COMPILER ERROR: EOF READ IN FINAL ASSEMBLY */
ERR216	'216' /* COMPILER ERROR: BAD LABEL ADDRESS */
ERR217	'217' /* ILLEGAL INITIALIZATION OF AN EXTERNAL VARIABLE */
ERR218	'218' /* ILLEGAL SUCCESSIVE USES OF RELATIONAL OPERATORS */
ERR219	'219' /* LIMIT EXCEEDED: NUMBER OF EXTERNALS > 255 */

/* standard structures */
FILE$P1         'AFTN ADDRESS, sNam(6) BYTE, fNam(16) BYTE'
FILE$P2         'BUF$P ADDRESS, BSIZE ADDRESS, ACTUAL ADDRESS, CUROFF ADDRESS'
FILE$T          'STRUCTURE(FILE$P1, FILE$P2)'
SYM$ST	'STRUCTURE(link ADDRESS, info$p ADDRESS, name(1) BYTE)'
INFO$P1	'len BYTE, type BYTE, sym ADDRESS, scope ADDRESS, ilink ADDRESS, flag(3) BYTE'
INFO$P2	'extId BYTE, dim ADDRESS, baseoff ADDRESS, parent ADDRESS'
INFO$P3	'dtype BYTE, intno BYTE, pcnt BYTE, procId BYTE'
INFO$ST	'STRUCTURE(INFO$P1, INFO$P2, INFO$P3)'
LIT$ST	'STRUCTURE(len BYTE, type BYTE, sym ADDRESS, scope ADDRESS, ilink ADDRESS, litAddr ADDRESS)'
LOC$ST	'STRUCTURE(blk ADDRESS, byt ADDRESS)'
CMD$ST	'STRUCTURE(link ADDRESS, pstr(1) BYTE)'
MAC$ST	'STRUCTURE(inChr$p ADDRESS, info$p ADDRESS)'
LINFO$ST 'STRUCTURE(type BYTE, lineCnt ADDRESS, stmtCnt ADDRESS, blkCnt ADDRESS)'
TX1ITEM$ST	'structure(type byte, dataw(129) address)'

VAL2$SIZE        '1'
VAL6$SIZE        '1'
VAL8$SIZE        '1'
VAL10$SIZE       '1'
VAL12$SIZE       '1'
VAL14$SIZE       '1'
VAL16$SIZE       '1'
VAL18$SIZE       '1'
VAL20$SIZE       '1'
VAL22$SIZE       '1'
VAL24$SIZE       '1'
VAL26$SIZE       '1'
VAL28$SIZE       '1'

REC2$ST          'structure(type byte, len address, val(VAL2$SIZE) byte)'
REC4$ST          'structure(type byte, len address, subtype byte, seg byte, addr address, crc byte)'
REC6$ST          'structure(type byte, len address, seg byte, addr address, val(VAL6$SIZE) byte)'
REC8$ST          'structure(type byte, len address, val(VAL8$SIZE) byte)'
REC12$ST         'structure(type byte, len address, val(VAL12$SIZE) byte)'
REC16$ST         'structure(type byte, len address, val(VAL16$SIZE) byte)'
REC18$ST         'structure(type byte, len address, val(VAL18$SIZE) byte)'
REC20$ST         'structure(type byte, len address, val(VAL20$SIZE) byte)'
REC22$ST         'structure(type byte, len address, val(VAL22$SIZE) byte)'
REC24$ST         'structure(type byte, len address, val(VAL24$SIZE) byte)'


/* plm main */

/* $file(main.plm) */
$file(main.plm,plm0a.plm,plm1a.plm.plm6b.plm)
fatalError      P(B err)

$file(plmA.plm)
cmdText$p       A
sub$40AC        P

$file(plmb.plm)
sub$4767        P

$file(plmc.plm)
verno           BS

$file(plmd.plm)
setMarginAndTabW P(B b1,B b2)
setPageNo       P(A v)
setTitle        P(A str,B len)

$file(plmd.plm,lstsp4.plm,lstsp5.plm,lstsp6.plm)
setMarkerInfo   P(B arg1b,B arg2b,B arg3b)

$file(plmd.plm,plm0h.plm)
setDate         P(A str,B len)
setPageLen      P(A len)
setPageWidth    P(A width)

$file(plmE.plm)
builtins        BS
ioBuffer        BS
keywords        BS


/* plm overlay 0 */
$file(main0.plm)
resetPt         L

$file(plm0A.plm)
cClass          BS
curBlkCnt       A
curDoBlkCnt     B
curMacroInfo$p  A
curProcData     A
curProcId       B
curStmtCnt      A
doBlkCnt        A
ifDepth         A
inbuf           BS
inChr$p         A
isNonCtrlLine   B
labelBrkSymbol  A
labelBrkToken   B
lastch          B
lblBrkTxiCode   B
lineBuf         BS
lineInfoToWrite B
macroDepth      A
macroPtrs       AS
markedSymbol$p  A
skippingCOND    B
state           B
stateIdX        A
stateStack      AS
stmtLabelCnt    A
stmtLabels      AS
stmtStartCode   B
tok2oprMap      BS
tokenStr        BS
tokenType       B
tokenVal        A
yyAgain         B
createTxi1File  P
popDO           P
pushBlock       P(A idAndLevel)
sub$4119        P
syntaxError     P(B err)
tokenError      P(B err,A sym$p)
tokenErrorAt    P(B err)
wrBuf           P(A buf,A len)
wrByte          P(B v)
writeLineInfo   P
writeTx1        P(A buf,A len)
wrOffset        P(A addr)
wrOprAndValue   P
wrWord          P(A v)
wrXrefDef       P
wrXrefUse       P

$file(plm0A.plm,main1.plm)
curProcInfo$p   A
linfo           "LINFO$ST"

$file(plm0A.plm,pdata4.plm)
ocurch          A
olstch          A

$file(plm0A.plm,plm3a.plm,pdata4.plm)
tx1Buf          BS

$file(plm0b.plm)
acceptRPAR      P
badCmdTail      P(B err)
doCONDcompile   P(A pch)
do$Control      P(A pch)
nxtCh           P
skipToRPARorEOL P
skipWhite       P
unknownCtrl     P

$file	(plm0c.asm)
gnxtch		P
ingetc		P
trunc		B
rSrcLn		P

$file(plm0d.plm)
getlin          P

$file(plm0e.plm)
parseDcl        P
parseExpresion  P(B endTok)
parseProcDcl    P
setYyAgain      P
yylex           P
yylexMatch      P(B token)"BOOLEAN"
yylexNotMatch   P(B token)"BOOLEAN"

$file(plm0f.plm)
curState        A
endSeen         B
sub$6F00        P

$file(plm0g.plm)
createLit       P(A pstr)A

/* $file(plm0h.plm) */

/* plm overlay 1 */
$file(main1.plm)
b88B3           B
b91C0           B
cleanup         L
curStmtNum      A
markedStSP      A
regetTx1Item    B
T2CntForStmt    A
tx1Aux1         B
tx1Aux2         B
tx1Item         "TX1ITEM$ST"
tx1RdBuf        BS
tx2Buf          BS
varArrayIndex   A
varInfoOffset   A
varNestedArrayIndex A
varVal          A
xrfBuf          BS

$file(main1.plm,plm3a.plm)
atBuf           BS

$file(plm1a.plm)
b402F           BS
b40B7           BS
b413F           BS
b4172           BS
builtinsMap     BS
ex1Stack        BS
ex2Stack        BS
ex3Stack        AS
exSP            A
operatorSP      A
operatorStack   AS
parseSP         A
parseStack      AS
st1Stack        BS
st2Stack        BS
st3Stack        AS
stSP            A
mapLtoT2        P
optWrXrf        P
rdTx1Item       P
setRegetTx1Item P
sub$42EF        P(A arg1w)A
wrTx2Error      P(B arg1b)
wrTx2ExtError   P(B arg1b)
wrTx2File       P(A buf,B cnt)
wrTx2Item       P(B arg1b)A
wrTx2Item1Arg   P(B arg1b,A arg2w)A
wrTx2Item2Arg   P(B arg1b,A arg2w,A arg3w)A
wrTx2Item3Arg   P(B arg1b,A arg2w,A arg3w,A arg4w)A

$file(plm1b.pl3)
expectRPAREN    P(B arg1b)
getTx1Item      P
matchTx2AuxFlag P(B arg1b)B
matchTx2Item    P(B arg1b)B
notMatchTx2Item P(B arg1b)B
resyncRPAREN    P
sub$4599        P
sub$45E0        P
sub$4631        P
sub$467D        P
wrAtFile        P(A buf,A cnt)
wrAtFileByte    P(B arg1b)
wrAtFileWord    P(A arg1w)

$file(plm1c.plm)
acceptOpAndArgs P
exprMakeNode    P(B arg1b,B arg2b)
exprPop         P
exprPush2       P(B arg1b,A arg2w)
getCallArgCnt   PB
getRestrictedExpr P
mkIndexNode     P
moveExpr2Stmt   P
parseDataItems  P(A arg1w)A
parsePortNum    P(B arg1b)
popOperatorStack P
popParseStack   P
pushOperator    P(B arg1b)
pushParseByte   P(B arg1b)
pushParseWord   P(A arg1w)
resetStacks     P
sub$4CFD        P(A arg1w)
sub$4D2C        P
sub$4D38        P
sub$4DCF        P(B arg1b)
sub$50D5        P
sub$512E        P(A arg1w)B
sub$521B        P

$file(plm1d.plm)
exprParse       P
exprParse0      P
exprParse1      P
exprParse10     P
exprParse11     P
exprParse12     P
exprParse13     P
exprParse14     P
exprParse15     P
exprParse16     P
exprParse17     P
exprParse18     P
exprParse19     P
exprParse2      P
exprParse20     P
exprParse3      P
exprParse4      P
exprParse5      P
exprParse6      P
exprParse7      P
exprParse8      P
exprParse9      P

$file(plm1e.plm)
stmtParse       P(A arg1w)A
sub$5945        PB
sub$59D4        PB
sub$5AD8        P
sub$6523        P

$file(plm1f.plm)
sub$6EE0        P

/* plm overlay 2 */
$file(main2.plm)
bC045           BS
bC04E           BS
bC0A8           BS
bC0B1           B
bC0B2           B
bC0B3           BS
bC0B5           BS
bC0B7           BS
bC0B9           BS
bC0BB           BS
bC0BD           BS
bC0BF           BS
bC0C1           BS
bC0C3           BS
bC140           BS
bC1BD           B
bC1BF           B
bC1D2           B
bC1D9           B
bC1DB           B
bC1E6           B
bC209           BS
blkCurInfo      AS
blkOverCnt      B
blkSP           B
boC057          BS
boC060          BS
boC069          BS
boC072          BS
boC07B          BS
boC1CC          B
boC1CD          B
boC1D8          B
boC20F          B
buf$C1E7        BS
cfrag1          B
curExtProcId    B
curOp           B
eofSeen         B
extProcId       BS
finalise        L
padC1D3         B
pc              A
procCallDepth   B
procChainId     B
procChainNext   BS
tx2Aux1b        BS
tx2Aux2b        BS
tx2Auxw         AS
tx2op1          AS
tx2op2          AS
tx2op3          AS
tx2opc          BS
tx2qEnd         B
tx2qp           B
wAF54           AS
wB488           AS
wB4B0           AS
wB4D8           AS
wB528           AS
wB53C           AS
wC084           AS
wC096           AS
wC1C3           A
wC1C5           A
wC1C7           A
wC1CF           A
wC1D6           A
wC1DC           AS

$file(plm2a.plm)
b3FCD           BS
b4029           BS
b4128           BS
b413B           BS
b418C           BS
b425D           BS
b4273           BS
b42F9           BS
b43F8           BS
b44F7           BS
b46EB           BS
b499B           BS
b4A21           BS
b4C15           BS
b4C2D           BS
b4C45           BS
b4CB4           BS
b4D23           BS
b4FA3           BS
b5012           BS
b5048           BS
b50AD           BS
b5112           BS
b5124           BS
b51E3           BS
b5202           BS
b5221           BS
b5286           BS
b528D           BS
b52B5           BS
b52DD           BS
unused          BS
w48DF           AS
w493D           AS
w502A           AS
emitTopItem     P
encodeFragData  P(B arg1b)
enterBlk        PB
exitBlk         PB
fillTx2Q        P
getTx2Item      P
putTx1Byte      P(B arg1b)
putTx1Word      P(A arg1w)
sub$5679        P(B arg1b)B
sub$56A0        P(B arg1b,B arg2b)
sub$5748        P(B arg1b)B
sub$575E        P(A arg1w)A
sub$5795        P(A arg1w)
sub$58F5        P(B arg1b)
sub$597E        P
sub$5B96        P(B arg1b,B arg2b)
sub$5C1D        P(B arg1b)
sub$5C97        P(B arg1b)
sub$5D27        P(B arg1b)
sub$5D6B        P(B arg1b)
sub$5E66        P(B arg1b)
sub$5EE8        P
sub$5F4B        P(A arg1w,A arg2w,B arg3b,B arg4b)
sub$5FBF        P(B arg1b,A arg2w$p,A arg3w$p)
sub$611A        P
sub$61A9        P(B arg1b)
sub$61E0        P(B arg1b)
sub$636A        P(B arg1b)
sub$63AC        P(B arg1b)
sub$6416        P(B arg1b)
sub$652B        P
sub$67A9        P
tx2SyntaxError  P(B arg1b)
wrFragData      P

$file(plm2b.pl3)
sub$689E        P

$file(plm2c.plm)
sub$6BD6        P

$file(plm2d.plm)
sub$717B        P
sub$7550        P

$file(plm2e.plm)
sub$7A85        P
sub$7DA9        P
sub$84ED        P

$file(plm2f.plm)
sub$87CB        P
sub$9457        P

$file(plm2g.pl3)
findParamInfo   P(B arg1b)
inxh            P
movDEM          P
opB             P(B arg1b)
opD             P(B arg1b)
sub$9514        P
sub$9560        P
sub$9624        P(A arg1w)
sub$9646        P(A arg1w)
sub$9706        P
sub$975F        P
sub$978E        P
sub$981C        P
sub$994D        P

$file(plm2h.plm)
sub$9BB0        P
sub$9D06        P
sub$9DD7        P
sub$9EF8        P
sub$9F14        P
sub$9F2F        P
sub$9F9F        P
sub$A072        P(B arg1b)
sub$A0C4        P
sub$A10A        P
sub$A153        P

/* plm overlay 3 */
/* $file(main3.plm) no externals */

$file(plm3a.plm)
b4789           BS
b47B7           BS
b4813           BS
b7199           B
nmsBuf          BS
rec12           "REC12$ST"
rec16$1         "REC16$ST"
rec16$2         "REC16$ST"
rec16$3         "REC16$ST"
rec16$4         "REC16$ST"
rec18           "REC18$ST"
rec2            "REC2$ST"
rec6            "REC6$ST"
w7197           A
sub$4889        P
sub$48BA        P(A arg1w,B arg2b,B arg3b,A arg4b$p)
sub$4908        P(A arg1w$p,A arg2w,B arg3b)
sub$4938        PA
sub$4984        PA
sub$49BC        P(A arg1w,A arg2w,A arg3w)
sub$49F9        P

$file(plm3a.plm,pdata4.plm)
objBuf          BS
rec20           "REC20$ST"
rec22           "REC22$ST"
rec24$1         "REC24$ST"
rec24$2         "REC24$ST"
rec24$3         "REC24$ST"

$file(plm3b.plm,wrec.plm)
recAddByte      P(A rec$p,B arg2b,B arg3b)
recAddWord      P(A arg1w,B arg2b,A arg3w)
writeRec        P(A rec$p,B arg2b)

/* $file(lstsp4.plm) */
$file(lstsp4.plm,lstsp6.plm)
setStartAndTabW P(B arg1b,B arg2b)

$file(lstsp4.plm,lstsp5.plm,lstsp6.plm)
flushLstBuf     P
newLineLst      P
newPageNextChLst P
setSkipLst      P(B arg1b)
tabLst          P(B arg1b)
xnumLst         P(A num,B width,B radix)
xputstr2cLst    P(A str,B endch)
xwrnstrLst      P(A str,B cnt)

/* plm overlay 4 */
/* $file(main4.plm) */
$file(main4.plm,main6.plm)
errCont         L

/* $file(page.plm) */
$file(page.plm,page1.plm)
newpgl          P

$file(page.plm,page2.plm)
nlLead          P

$file(pdata4.plm)
b9692           B
b969C           B
b969D           B
b96B0           B
b96B1           BS
b96D6           B
baseAddr        A
bo812B          B
bo813B          B
bo813C          B
cfCode          B
commentStr      BS
curExtId        B
depth           A
dstRec          B
endHelperId     B
helperId        B
helperModId     B
helperStr       BS
line            BS
lineLen         B
locLabStr       BS
lstLine         BS
opByteCnt       B
opBytes         BS
rec4            "REC4$ST"
rec6$4          "REC6$ST"
rec8            "REC8$ST"
stmtNo          A
sValAry         AS
w812F           A
w969E           A
w96D7           A
wa8125          AS
wValAry         AS

$file(pdata4.plm,main5.plm,pdata6.plm)
lstBuf          BS

$file(pdata4.plm,pdata6.plm)
codeOn          B
lineNo          A
listing         B
listOff         B
lstLineLen      B
srcbuf          BS

$file(plm4a.plm)
b42A8           BS
b42D6           BS
b4304           BS
b4332           BS
b4431           BS
b4444           BS
b4495           BS
b4566           BS
b457C           BS
b4602           BS
b473D           BS
b475E           BS
b4774           BS
b478A           BS
b47A0           BS
b4A03           BS
b4A78           BS
opcodes         BS
regIdx          BS
regNo           BS
stack$origin    BS
stkRegIdx       BS
stkRegNo        BS
w47C1           AS
w4919           AS
w506F           AS
sub$54BA        P

$file(plm4b.plm)
addWrdDisp      P(A str$p,A arg2w)
emitLabel       P
emitStatementNo P
flushRecs       P
sub$5BD3        P
sub$5E1B        P(B arg1b)
sub$5E3E        P

$file(plm4b.plm,plm6b.plm)
emitError       P
getSourceLine   P

$file(plm4c.plm)
sub$5FE7        P(A arg1w,B arg2b)
sub$668B        P

/* $file(wrec.plm) */

/* $file(lstsp5.plm) */

$file(main5.plm)
b3F0B           B
b66D8           B
dictionary$p    A
dictSize        A
dictTop$p       A
maxSymLen       B
w66D2           A
w66D4           A
xrefItem$p      A
dictionary      AS..dictionary$p
xrefItem        AS..xrefItem$p


/* $file(page1.plm) */

/* $file(page2.plm) */

$file(plm5a.plm)

/* $file(lstsp6.plm) */

/* $file(main6.plm) */

/* $file(page.plm) */

$file(pdata6.plm)
b7AD9           B
b7ADA           B
b7AE4           B
b7AF1           B
b7AF2           B
ERRNum          A
offCurCh        A
offLastCh       A
STMTNum         A
w7AE0           A
w7AE5           A
w7AE9           A
w7AEB           A

$file(plm6a.plm)
sub$42E7        P

$file(plm6b.plm)
sub$6550        P


/* files in common dir */
/* friendly names for the controls */
PRINT	 'CONTROLS(0)'
XREF	 'CONTROLS(1)'
SYMBOLS	 'CONTROLS(2)'
DEBUG	 'CONTROLS(3)'
PAGING	 'CONTROLS(4)'
OBJECT	 'CONTROLS(5)'
OPTIMIZE 'CONTROLS(6)'
IXREF	 'CONTROLS(7)'

cursym          "SYM$ST"..curSymbol$p
info            "INFO$ST"..curInfo$p
litinfo         "LIT$ST"..curInfo$p
cmd             "CMD$ST"..cmdLine$p
inChr           B..inChr$p
curScope        A..curProcData


$file(adninf.plm)
advNxtInfo      P

$file(alloc.plm)
alloc           P(A size1,A size2)

$file(allocs.plm)
allocSymbol     P(A spc)A

$file(backup.plm)
backup          P(A loc$p,A cnt)

$file(chain.plm)
chain           P(A fNam)

$file(ciflag.plm)
clrInfoFlag     P(B flag)

$file(close.plm)
close           P(A conn,A status$p)

$file(closef.plm)
closeF          P(A file$p)

$file(clrflg.plm)
clrFlag         P(A base,B flag)

$file(cpyflg.plm)
cpyFlags        P(A base)

$file(cpytil.plm)
cpyTill         P(A src$p,A dst$p,A cnt,B endch)

$file(creatf.plm)
creatf          P(A fp,A buf,A bsize,B mode)

$file(creati.plm)
allocInfo       P(A infosize)A
createInfo      P(A val,B type)

$file(data.plm)
atFile          "FILE$T"
b3CF2           B
b3CFB           B
b3CFC           B
b3CFD           B
b3CFF           B
blk1Used        A
blk2Used        A
blkSize1        A
blkSize2        A
blockDepth      A
botInfo         A
botMem          A
botSymbol       A
cmdLine$p       A
col             B
conFile         "FILE$T"
CONTROLS        BS
csegSize        A
curInfo$p       A
curSymbol$p     A
DATE            BS
debugFlag       B
debugSwitches   BS
dsegSize        A
fatalErrorCode  B
hasErrors       B
hashChains$p    A
haveModule      B
helpers$p       A
intVecLoc       A
intVecNum       B
invokeName      BS
ISIS            A
ixiFile         "FILE$T"
ixiFileName     BS
IXREFSet        B
lbuf$p          A
lBufSz          A
lChCnt          A
LEFTMARGIN      A
lfOpen          B
linesRead       A
linlft          B
localLabelCnt   A
localLabels$p   A
lstFil          "FILE$T"
lstFileName     BS
margin          B
nmsFile         "FILE$T"
objBlk          A
objByte         A
OBJECTSet       B
objFile         "FILE$T"
objFileName     BS
offNxtCmdChM1   A
ov0             BS
ov6             BS
overlay1        BS
overlay2        BS
overlay3        BS
overlay4        BS
overlay5        BS
overlay6        BS
pad3C43         B
pad$3C4E        BS
PAGELEN         B
pageNo          A
plm80Compiler   BS
PRINTSet        B
procChains      AS
procCnt         A
procInfo        AS
programErrCnt   A
PWIDTH          B
REBOOTVECTOR    A
srcFil          "FILE$T"
srcFileIdx      A
srcFileTable    AS
srcStemLen      B
srcStemName     BS
standAlone      B
startCmdLine$p  A
tblBitFlags     BS
tblOffsets      BS
TITLE           BS
TITLELEN        B
topInfo         A
topMem          A
topSymbol       A
tWidth          B
tx1File         "FILE$T"
tx2File         "FILE$T"
unexpectedEOF   B
version         BS
w381E           A
w3822           A
w382A           A
w3C34           A
w3C44           A
xrfFile         "FILE$T"

$file(delete.plm)
delete          P(A path$p,A status$p)

$file(deletf.plm)
deletf          P(A file$p)

$file(endcom.plm)
endCompile      P

$file(error.plm)
error           P(A error$num)

$file(exit.plm)
exit            P

$file(fatal.plm)
fatal           P(A str,B len)

$file(fatlio.plm)
fatlIO          P(A file$p,A errnum)

$file(fflush.plm)
fflush          P(A fp)

$file(fi.plm)
findInfo        P

$file(fill.asm)
fill            P(A cnt,A dst,B val)
fillx           P(A cnt,A dst,A val)

$file(findmi.plm)
findMemberInfo  P

$file(fiscop.plm)
findScopedInfo  P(A scp)

$file(fread.asm)
fread           P(A file,A buf,A cnt)

$file(fwrite.asm)
fwrite          P(A file,A buf,A cnt)

$file(gibin.plm)
getBuiltinId    PB

$file(gibseo.plm)
getBaseOffset   PA

$file(gibsev.plm)
getBaseVal      PA

$file(gicond.plm)
getCondFlag     PB

$file(gidim.plm)
getDimension    PA

$file(gidim2.plm)
getDimension2   PA

$file(gidtyp.plm)
getDataType     PB

$file(gieid.plm)
getExternId     PB

$file(giintn.plm)
getIntrNo       PB

$file(gilen.plm)
getLen          PB

$file(gilit.plm)
getLitaddr      PA

$file(gilnko.plm)
getLinkOffset   PA

$file(gilnkv.plm)
getlinkVal      PA

$file(giparo.plm)
getParentOffset PA

$file(giparv.plm)
getParentVal    PA

$file(gipcnt.plm)
getParamCnt     PB

$file(gipid.plm)
getProcId       PB

$file(giscop.plm)
getscope        PA

$file(gisym.plm)
getSymbol       PA

$file(gitype.plm)
getType         PB

$file(initf.plm)
initF           P(A file$p,A sNam,A fNam)

$file(itoa.plm)
num2Asc         P(A num,B width,B radix,A buf$p)B

$file(load.plm)
load            P(A path$p,A load$offset,A switch,A entry$p,A status$p)

$file(lookup.plm)
lookup          P(A pstr)

$file(lstinf.plm)
lstModuleInfo   P

$file(lstlin.plm)
lstLineNo       P

$file(memchk.asm)
memchk          PA

$file(movmem.asm)
movmem          P(A cnt,A src,A dst)

$file(open.plm)
open            P(A conn$p,A path$p,A access,A echo,A status$p)

$file(openf.plm)
openF           P(A file$p,B access)

$file(prints.plm)
printStr        P(A str,B len)

$file(putlst.asm)
putLst          P(B ch)

$file(read.plm)
read            P(A conn,A buff$p,A count,A actual$p,A status$p)

$file(readf.plm)
readf           P(A file$p,A buf$p,A len,A actual$p)

$file(rename.plm)
rename          P(A old$p,A new$p,A status$p)

$file(rescan.plm)
rescan          P(A conn,A status$p)

$file(rewind.plm)
rewind          P(A file$p)

$file(seek.plm)
seek            P(A conn,A mode,A block$p,A byte$p,A status$p)

$file(seekf.plm)
seekF           P(A file$p,A loc$p)

$file(sekend.plm)
sekEnd          P(A file$p)

$file(setflg.plm)
setFlag         P(A base,B flag)

$file(sibin.plm)
setBuiltinId    P(B id)

$file(sibseo.plm)
setBaseOffset   P(A base$p)

$file(sibsev.plm)
setBaseVal      P(A val)

$file(sicond.plm)
setCondFlag     P(B flag)

$file(sidim.plm)
setDimension    P(A dim)

$file(sidtyp.plm)
setDataType     P(B dtype)

$file(sieid.plm)
setExternId     P(B id)

$file(siflag.plm)
setInfoFlag     P(B flag)

$file(siintn.plm)
setIntrNo       P(B intNo)

$file(silen.plm)
setLen          P(B len)

$file(silit.plm)
setLitaddr      P(A litaddr)

$file(silnko.plm)
setLinkOffset   P(A link)

$file(silnkv.plm)
setLinkVal      P(A val)

$file(siparo.plm)
setParentOffset P(A parent)

$file(sipcnt.plm)
setParamCnt     P(B cnt)

$file(sipid.plm)
setProcId       P(B id)

$file(siscop.plm)
setScope        P(A scope)

$file(sisym.plm)
setSymbol       P(A symbol)

$file(sitype.plm)
setType         P(B type)

$file(strcmp.plm)
strncmp         P(A s1$p,A s2$p,B cnt)B

$file(tellF.plm)
tellF           P(A file$p,A loc$p)

$file(tiflag.plm)
testInfoFlag    P(B flag)B

$file(tstflg.plm)
testFlag        P(A base,B flag)B

$file(wr2lst.plm)
wr2cLst         P(A arg1w)

$file(wrclst.asm)
wrcLst          P(B ch)

$file(write.plm)
write           P(A conn,A buff$p,A count,A status$p)

$file(writef.plm)
writeF          P(A fp,A buf,A count)

$file(wrslst.plm)
wrnstrLst       P(A str$p,A cnt)

$file(zerflg.plm)
clrFlags        P(A base)
