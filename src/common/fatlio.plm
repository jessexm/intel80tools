fatlIO: DO;

DECLARE CR LITERALLY '0DH',
	LF LITERALLY '0AH',
	FILE$T LITERALLY
 'STRUCTURE(AFTN ADDRESS, sNam(6) BYTE, fNam(16) BYTE, BUF$P ADDRESS, BSIZE ADDRESS, ACTUAL ADDRESS, CUROFF ADDRESS)';

DECLARE
	errHeader(*) BYTE DATA(CR, LF, LF, 'PL/M-80 I/O ERROR --', CR, LF, '  FILE: '),
	aName(*) BYTE DATA(CR, LF, '  NAME: '),
	aError(*) BYTE DATA(CR, LF, '  ERROR: '),
	aTerminate(*) BYTE DATA(CR, LF, 'COMPILATION TERMINATED', CR, LF, LF),
	errStrTable(*) BYTE DATA(
	4, 'ILLEGAL FILENAME SPECIFICATION', 0,
	5, 'ILLEGAL OR UNRECOGNIZED DEVICE SPECIFICATION IN FILENAME', 0,
	0Ch, 'ATTEMPT TO OPEN AN ALREADY OPEN FILE', 0,
	0Dh, 'NO SUCH FILE', 0,
	0Eh, 'FILE IS WRITE PROTECTED', 0,
	13h, 'FILE IS NOT ON A DISKETTE', 0,
	16h, 'DEVICE TYPE NOT COMPATIBLE WITH INTENDED FILE USE', 0,
	17h, 'FILENAME REQUIRED ON DISKETTE FILE', 0,
	1Ch, 'NULL FILE EXTENSION', 0,
	0FEh, 'ATTEMPT TO READ PAST EOF', 0,
   	0),
	REBOOTVECTOR ADDRESS EXTERNAL,
	debugFlag BYTE EXTERNAL;


$include(:f3:prints.pex)
$include(:f3:itoa.pex)
$include(:f3:exit.pex)

fatlIO: PROCEDURE(file$p, errnum) PUBLIC;
	DECLARE (file$p, errnum) ADDRESS;
	DECLARE file BASED file$p FILE$T;
	DECLARE buf(5) BYTE, len BYTE;
	DECLARE off ADDRESS, slen ADDRESS;

	findErrStr: PROCEDURE;
		DECLARE (j, i) ADDRESS;

		i = 0;
		do while errStrTable(i) <> 0;	
			j = i;
			do while errStrTable(i) <> 0;
				i = i + 1;
			end;
			if errstrTable(j) = errnum then
			do;
				off = j + 1;
				slen = i - off;
				return;
			end;
			i = i + 1;
		end;
		slen = 0;
	end findErrStr;


	call printStr(.errHeader, length(errHeader));
	call printStr(.file.sNam, 6);
	call printStr(.aName, length(aName));	
	call printStr(.file.fnam, 15);
	call printStr(.aError, length(aError));
	len = num2Asc(errnum, 0, 10, .buf);
	call printStr(.buf, len);
	call findErrStr;
	if slen <> 0 then
	do;
		call printStr(.('--'), 2);
		call printStr(.errStrTable(off), slen);
	end;
	call printStr(.aTerminate, length(aTerminate));
	if debugFlag then
		call REBOOTVECTOR;
	else
		call Exit;
end fatlIO;

END;
