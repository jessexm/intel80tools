/* common source for lstsp[456].plm */

flushLstBuf: procedure public;
	if lChCnt <> 0 then
	do;
		if not lfOpen then
		do;
			call openf(.lstFil, 2);
			lfOpen = true;
		end;
		call writef(.lstFil, lbuf$p, lChCnt);
		lChCnt = 0;
	end;
end;

newLineLst: procedure public;
	if col = 0 then
		if linlft = 0 then
			call newPgl;
	call wr2cLst(0d0ah);
	linlft = linlft - 1;
	col = 0;
end;


tabLst: procedure(arg1b) public;
	declare arg1b byte;
	if arg1b > 7fh then
	do;
		arg1b = -arg1b;
		if col >= arg1b then
			call newLineLst;
		arg1b = arg1b - col - 1;
	end;
	do while arg1b <> 0;
		call putLst(' ');
		arg1b = arg1b - 1;
	end;
end;


newPageNextChLst: procedure public;
	linlft = 0;
end;

setMarkerInfo: procedure(arg1b, arg2b, arg3b) public;
	declare (arg1b, arg2b, arg3b) byte;
	b3CFB = arg1b;
	b3CFC = arg2b;
	b3CFD = arg3b;
end;

$if OVL<>5
setStartAndTabW: procedure(arg1b, arg2b) public;
	declare (arg1b, arg2b) byte;
	margin = arg1b - 1;
	tWidth = arg2b;
end;
$endif

setSkipLst: procedure(arg1b) public;
	declare arg1b byte;
	b3CFF = arg1b;
end;


xputstr2cLst: procedure(str, endch) public;
	declare str address, endch byte,
		ch based str byte;
	do while ch <> endch;
		call putLst(ch);
		str = str + 1;
	end;
end;

xwrnstrLst: procedure(str, cnt) public;
	declare str address, cnt byte,
		ch based str byte;
	do while cnt <> 0;
		call putLst(ch);
		str=  str + 1;
		cnt = cnt - 1;
	end;
end;


xnumLst: procedure(num, width, radix) public;
	declare num address, (width, radix) byte;
	declare i byte, buf(7) byte;

	i = num2Asc(num, width, radix, .buf);
	call xwrnstrLst(.buf, i);
end;
