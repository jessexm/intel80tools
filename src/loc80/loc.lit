DECLARE	LIT LITERALLY 'LITERALLY';
DECLARE	SPATH$T LIT 'STRUCTURE (deviceId BYTE, name(6) BYTE, ext(3) BYTE, deviceType BYTE, driveType BYTE)',
        DESC4$T LIT 'STRUCTURE (saddr ADDRESS, eaddr ADDRESS)',
	DESC6$T LIT 'STRUCTURE (flags BYTE, seg BYTE, start ADDRESS, len ADDRESS)';
DECLARE	ERR2 LIT '2', /* ILLEGAL AFTN ARGUMENT */
	ERR3 LIT '3', /* TOO MANY OPEN	FILES */
	ERR4 LIT '4', /* INCORRECTLY SPECIFIED	FILE */
	ERR5 LIT '5', /* UNRECOGNIZED DEVICE NAME */
	ERR9 LIT '9', /* DISK DIRECTORY FULL */
	ERR12 LIT '12', /* FILE IS ALREADY OPEN */
	ERR13 LIT '13', /* NO SUCH FILE */
	ERR14 LIT '14', /* WRITE	PROTECTED */
	ERR17 LIT '17', /* NOT A	DISK FILE */
	ERR19 LIT '19', /* ATTEMPTED SEEK ON NON-DISK FILE */
	ERR20 LIT '20', /* ATTEMPTED BACK SEEK TOO FAR */
	ERR21 LIT '21', /* CAN'T RESCAN */
	ERR22 LIT '22', /* ILLEGAL ACCESS MODE TO OPEN */
	ERR23 LIT '23', /* MISSING FILENAME */
	ERR27 LIT '27', /* ILLEGAL SEEK COMMAND */
	ERR28 LIT '28', /* MISSING EXTENSION */
	ERR31 LIT '31', /* CAN'T SEEK ON WRITE ONLY FILE */
	ERR32 LIT '32', /* CAN'T DELETE OPEN FILE */
	ERR35 LIT '35', /* SEEK PAST EOF */
	ERR203 LIT '203', /* INVALID SYNTAX */
	ERR204 LIT '204', /* PREMATURE EOF */
	ERR208 LIT '208', /* CHECKSUM ERROR */
	ERR210 LIT '210', /* INSUFFICIENT MEMORY */
	ERR211 LIT '211', /* RECORD TOO LONG */
	ERR212 LIT '212', /* ILLEGAL RELO RECORD */
	ERR213 LIT '213', /* FIXUP	BOUNDS ERROR */
	ERR218 LIT '218', /* ILLEGAL RECORD FORMAT */
	ERR224 LIT '224', /* BAD RECORD SEQUENCE */
	ERR225 LIT '225', /* INVALID NAME */
	ERR226 LIT '226', /* NAME TOO LONG */
	ERR227 LIT '227', /* LEFT PARENTHESIS EXPECTED */
	ERR228 LIT '228', /* RIGHT	PARENTHESIS EXPECTED */
	ERR229 LIT '229', /* UNRECOGNIZED CONTROL */
	ERR233 LIT '233', /* 'TO' EXPECTED */
	ERR237 LIT '237', /* COMMON NOT FOUND */
	ERR238 LIT '238', /* ILLEGAL STACK	CONTENT	RECORD */
	ERR239 LIT '239', /* NO MODULE HEADER RECORD */
	ERR240 LIT '240'; /* PROGRAM EXCEEDS 64K */

DECLARE	startSeen LIT 'seen(0)',
	stackSizeSet LIT 'seen(1)',
	restart0Seen LIT 'seen(2)',
	MapSeen LIT 'seen(3)',
	PublicsSeen LIT 'seen(4)',
	SymbolsSeen LIT 'seen(5)',
	LinesSeen LIT 'seen(6)',
	PurgeSeen LIT 'seen(7)',
	nameArgSeen LIT 'seen(8)';

mem$mov: PROCEDURE(cnt, src, dst) EXTERNAL;
	DECLARE cnt ADDRESS, src ADDRESS, dst ADDRESS;
END mem$mov;	
