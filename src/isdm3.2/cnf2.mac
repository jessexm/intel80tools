%'
%' *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'	TITLE:   extend_addressing
%'	INPUTS: board_name - the address of the port used for enabling
%'		protection.
%'	OUTPUTS: NONE
%'	ABSTRACT:
%'	This macro allows the user to configure the port that the processor
%'	will use to enable protected mode on the 80286 and 80386.
%'
%' *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'
%DEFINE(extend_addressing_code) ()
%'
%*DEFINE(extend_addressing(parameters)) (%DEFINE(tail) (%parameters)%'
%'
%DEFINE(board_name)(%arg)%'
%'
%DEFINE(extend_addressing_code) (
%'
%IF (%EQS(%board_name,386/3x) OR %EQS(%board_name,386/3X)) THEN (%'
%'
	mov	al,1
	out	0e0h,al
%'
%'
) ELSE (%IF (%EQS(%board_name,386/1xx) OR %EQS(%board_name,386/1XX)) THEN (%'
%'
%'
) ELSE (%IF (%EQS(%board_name,286/110)) THEN (%'
%'
	CALL	init_286110
%'
) ELSE (%IF (%EQS(%board_name,286/100)) THEN (%'
%'
	out	0cah,ax
	call	set_lbx_max
%'
) ELSE (%IF (%EQS(%board_name,286/10) OR %EQS(%board_name,286/10a) OR %'
%'	   '%EQS(%board_name,286/12)) THEN (%'
%'
	out	0cah,ax
%'
) ELSE (%'
%'	'ERROR -- %board_name is an invalid Intel board type

)FI )FI )FI )FI )FI ))%'
%'
%'
%'	END OF extend_addressing MACRO
%'
%' *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'
%'	Title:	initialize_port
%'
%'	Inputs:
%'	  port_addr	- address of I/O port to send initialization
%'				  value to
%'	  value		- initializatin value to write to port
%'	  delay		- number of millisecond units to wait after
%'			    writing initialization value
%'	  control	- value which defines desired action
%'
%'	Outputs:
%'	  initialization table	- table of initialization values; each invocation
%'				  adds an entry to table
%'	  num_init_entries	- macro-time count of entries in initialization table
%'		
%'	Abstract:
%'	  This macro is used to add an entry to the initialization table.
%'	  Each entry in the table is used by the monitor to perform the
%'	  restart initialization of its hardware environment.
%'
%' *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%SET(num_init_entries, 0)
%'
%*DEFINE(initialize_port(parameters)) (%DEFINE(tail) (%parameters)%'
%'
%DEFINE(port_addr) (%ARG)%'
%DEFINE(value) (%ARG)%'
%DEFINE(delay) (%ARG)%'
%DEFINE(control) (%ARG)%'
%'
%IF (%LEN(%control) eq 0) THEN (%'
%'	'%SET(control, %BYTE_INIT)%'
)FI %'
%'
%IF (%EQS(%omf,%omf86)) THEN
	(code	segment	public	'code')FI


%IF (%EQS(%omf,%omf286)) THEN
	(code		segment	er)FI
%IF (%EQS(%omf,%omf86)) THEN
	(assume cs:code)FI


%'
%'    '%IF (%num_init_entries eq 0) THEN (%'
init_table:
%'    ')FI %'
%'
	DW	%port_addr
	DW	%value
	DW	%delay
	DB	%control
code	ends
%'
%SET(num_init_entries, %EVAL(%num_init_entries + 1))
%'
)%' END OF INITIALIZE_PORT MACRO
%'
%'*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'
%'	Title:	add_channel
%'
%'	Inputs:
%'	    chan_type -		type code for channel.  Valid values are:
%'				0	= interconnect channel
%'				10H	= 8274 channel
%'				11H	= 82530 channel
%'				12H	= 8251A channel
%'	    status_prt -	address of channel devices status port
%'	    data_prt   -	address of channel devices data port
%'	    count      -	count which produces baud rate of 19200
%'	    count_prt  -	address of baud rate timers count port
%'	    ci_proc    -	address of channels ci procedure
%'	    co_proc    -	address of channels co procedure
%'	    csts_proc  -	address of channels csts procedure
%'
%'	Outputs:
%'	    channel_table -	table of data describing hardware channels
%'				available to monitor; each invocation adds
%'				an entry to the channel table
%'	    num_channels  -	macro-time count of entries in channel table
%'
%'	Abstract:
%'	    This macro builds the channel table.  Each entry in this table
%'	    describes a communication channel configured into the monitor
%'	    with the COMMUNICATION_CHANNEL macro.  This table is used by the
%'	    monitor when scanning for a console channel.
%'
%'*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'
%SET(num_channels,0)
%DEFINE(channel_table) ()
%'
%*DEFINE(add_channel(chan_type,status_prt,data_prt,count,count_prt,ci_proc,%'
%'			'co_proc,csts_proc)) (%'
%'
%DEFINE(channel_table) (%channel_table%'
%'		'	DB	%chan_type
%'		'	DW	%status_prt
%'		'	DW	%data_prt
%'		'	DW	%count
%'		'	DW	%count_prt
%'		'	DW	%ci_proc
%'		'	DW	%co_proc
%'		'	DW	%csts_proc
)%'
%'
%SET(num_channels,%EVAL(%num_channels + 1))%'
%'
)%' END OF ADD CHANNEL MACRO
%'
%'*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'
%'	Title:  communication_channel
%'
%'	Inputs: 
%'	  chan_type		- channel type code; valid values are:
%'					INTERCONNECT
%'					8274
%'					82530
%'					8251A
%'	  chan_base_port	- base port of channel device
%'	  chan_port_delta	- distance between ports on channel device
%'	  count			- count value which produces 19200 baud
%'	  timer_type		- baud timer type code; valid values are:
%'					8253
%'					8254
%'					80186
%'	  timer_base_port	- base port of timer device
%'	  timer_port_delta	- distance between ports on timer device
%'	  timer_cntr_num	- counter number on timer device
%'
%'	Outputs:
%'	  entries in initialization table
%'	  entry in channel table
%'	  default_chan_count	- macro-time variable that holds baud count
%'				  value of first serial channel configured
%'
%'	Abstract:
%'	  This macro is used to configure a console communication channel.
%'	  It creates several entries in the initialization table (via the
%'	  initialize_port macro) to initialize channel device (if needed).
%'	  It also creates an entry in the channel_table to describe channel.
%'	  The first serial-type channel configured will be used as the
%'	  default channel by MBII master boards.  Its baud rate count value
%'	  is saved in default_chan_count, for use by the CHANNEL_SCAN macro
%'	  when calculating the baud count needed for the default fixed baud rate.
%'
%'*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'
%SET(default_chan_count, 0)
%'
%*DEFINE(communication_channel(parameters)) (%DEFINE(tail) (%parameters)%'
%'
%DEFINE(chan_type) (%ARG)%'
%DEFINE(chan_base_port) (%ARG)%'
%DEFINE(chan_port_delta) (%ARG)%'
%DEFINE(count) (%ARG)%'
%DEFINE(timer_type) (%ARG)%'
%DEFINE(usart_chan) (%timer_type)%'
%DEFINE(timer_base_port) (%ARG)%'
%DEFINE(timer_port_delta) (%ARG)%'
%DEFINE(timer_cntr_num) (%ARG)%'

%IF (%EQS(%chan_type,INTERCONNECT) OR %EQS(%chan_type,interconnect)) THEN (%'

%'	'%IF (%bus eq %MBII) THEN (%'
%'	    '%add_channel(%TYPE_INTERCONNECT,0,0,0,0,ci_interconnect,%'
%'			 'co_interconnect,csts_interconnect)%'

%'	') ELSE (%'
%'	    'ERROR -- %chan_type, invalid channel type for Multibus I system

%'	')FI%'


) ELSE (%IF (%EQS(%chan_type,82530)) THEN (%'

%'	'%IF (%chan_port_delta le 0h) THEN (%'
%'	    'ERROR -- invalid port delta for the serial Port

%'      ') ELSE (%'
%'	    '%SET(status_port, %chan_base_port)%'
%'	    '%SET(data_port, %EVAL(%chan_base_port + %chan_port_delta))%'

%'	    '%initialize_port(%status_port, 009h, 5)%'
%'
%'	    '%IF (%EQS(%usart_chan,A) OR %EQS(%usart_chan,a)) THEN (%'
%'		'%initialize_port(%status_port, 080h, 5)%'
%'
%'	    ') ELSE (%IF (%EQS(%usart_chan,B) OR %EQS(%usart_chan,b)) THEN (%'
%'		'%initialize_port(%status_port, 040h, 5)%'
%'
%'	    ') ELSE (%'
%'		'ERROR -- %usart_chan, invalid 82530 channel
%'
%'	    ')FI)FI%'

%'	    '%initialize_port(%status_port, 004h, 5)%'
%'	    '%initialize_port(%status_port, 044h, 5)%'

%'	    '%initialize_port(%status_port, 001h, 5)%'
%'	    '%initialize_port(%status_port, 000h, 5)%'

%'	    '%initialize_port(%status_port, 002h, 5)%'
%'	    '%initialize_port(%status_port, 000h, 5)%'

%'	    '%initialize_port(%status_port, 003h, 5)%'
%'	    '%initialize_port(%status_port, 0C0h, 5)%'

%'	    '%initialize_port(%status_port, 005h, 5)%'
%'	    '%initialize_port(%status_port, 0EAh, 5)%'

%'	    '%initialize_port(%status_port, 006h, 5)%'
%'	    '%initialize_port(%status_port, 000h, 5)%'

%'	    '%initialize_port(%status_port, 007h, 5)%'
%'	    '%initialize_port(%status_port, 000h, 5)%'

%'	    '%initialize_port(%status_port, 009h, 5)%'
%'	    '%initialize_port(%status_port, 000h, 5)%'

%'	    '%initialize_port(%status_port, 00Ah, 5)%'
%'	    '%initialize_port(%status_port, 000h, 5)%'

%'	    '%initialize_port(%status_port, 00Bh, 5)%'
%'	    '%initialize_port(%status_port, 052h, 5)%'

%'	    '%initialize_port(%status_port, 00Eh, 5)%'
%'	    '%initialize_port(%status_port, 002h, 5)%'

%'	    '%initialize_port(%status_port, 00Fh, 5)%'
%'	    '%initialize_port(%status_port, 000h, 5)%'

%'	    '%add_channel(%TYPE_82530,%status_port,%data_port,%count,%status_port,%'
%'			 'ci_82530,co_82530,csts_82530)%'

%'	')FI%'

%'	'%IF (%default_chan_count EQ 0) THEN (%'
%'		'%SET(default_chan_count,%count)%'
%'		'%SET(default_chan_type,%TYPE_82530)%'
%'	')FI


) ELSE (%IF (%EQS(%chan_type,8274)) THEN (%'

%'	'%IF ((%EQS(%timer_type,8253)) OR (%EQS(%timer_type,8254))) THEN (%'
%'	    '%SET(timer_cntl_port,%EVAL(%timer_base_port +(3 * %timer_port_delta)))%'

%'	    '%IF (%timer_cntr_num eq 0) THEN (%'
%'	    	'%SET(baud_port,%timer_base_port)%'
%'              '%initialize_port(%timer_cntl_port, 036h, 0)%'

%'	    ') ELSE (%IF (%timer_cntr_num eq 1) THEN (%'
%'	    	'%SET(baud_port,(%timer_base_port +%timer_port_delta))%'
%'              '%initialize_port(%timer_cntl_port, 076h, 0)%'

%'	    ') ELSE (%IF (%timer_cntr_num eq 2) THEN (%'
%'		'%SET(baud_port,(%timer_base_port + (2 * %timer_port_delta)))%'
%'              '%initialize_port(%timer_cntl_port, 0B6h, 0)%'

%'	    ') ELSE (%'
%'		'ERROR -- baud rate counter number is not 0, 1 or 2.
%'		'%SET(baud_port,0)%'
%'	    ')FI )FI )FI%'
%'
%'        ') ELSE (%IF (%EQS(%timer_type,80130)) THEN (%'
%'                '%SET(timer_cntl_port,%timer_base_port+(7*%timer_port_delta))%'
%'                '%IF(%EQS(%timer_cntr_num,2)) THEN (%'
%'                        '%SET(baud_port,%timer_base_port+(6*%timer_port_delta))%'
%'                        '%initialize_port(%timer_cntl_port,0b6h,0)%'
%'	          ') ELSE (%'
%''ERROR --  invalid 80130 counter
%'                ')FI%'
%'        ') ELSE (%'
%'            'ERROR -- %timer_type, invalid baud rate timer type
%'        ')FI )FI%'
%'
%'        '%IF (%chan_port_delta le 0h) THEN (%'
%'            'ERROR -- invalid port delta for the serial Port

%'      ') ELSE (%'
%'            '%SET(data_port, %chan_base_port)%'
%'            '%SET(status_port, %EVAL(%chan_base_port + %chan_port_delta))%'

%'            '%initialize_port(%status_port, 018h, 0)%'
%'            '%initialize_port(%status_port, 018h, 0)%'

%'            '%initialize_port(%status_port, 004h, 0)%'
%'            '%initialize_port(%status_port, 044h, 0)%'

%'            '%initialize_port(%status_port, 005h, 0)%'
%'            '%initialize_port(%status_port, 0EAh, 0)%'

%'            '%initialize_port(%status_port, 003h, 0)%'
%'            '%initialize_port(%status_port, 0C1h, 0)%'

%'            '%add_channel(%TYPE_8274,%status_port,%data_port,%count,%baud_port,%'
%'			 'ci_8274,co_8274,csts_8274)%'

%'	    '%IF (%default_chan_count EQ 0) THEN (%'
%'		'%SET(default_chan_count,%count)%'
%'		'%SET(default_chan_type,%TYPE_8274)%'
%'	    ')FI

%'	')FI%'

%'

) ELSE (%IF ((%EQS(%chan_type,8251A)) OR (%EQS(%chan_type,8251a))) THEN (%'

%'	'%IF ((%EQS(%timer_type,8253)) OR (%EQS(%timer_type,8254))) THEN (%'
%'	    '%SET(timer_cntl_port,%EVAL(%timer_base_port +(3 * %timer_port_delta)))%'

%'	    '%IF (%timer_cntr_num eq 0) THEN (%'
%'	    	'%SET(baud_port,%timer_base_port)%'
%'              '%initialize_port(%timer_cntl_port, 036h, 0)%'

%'	    ') ELSE (%IF (%timer_cntr_num eq 1) THEN (%'
%'	    	'%SET(baud_port,(%timer_base_port +%timer_port_delta))%'
%'              '%initialize_port(%timer_cntl_port, 076h, 0)%'

%'	    ') ELSE (%IF (%timer_cntr_num eq 2) THEN (%'
%'		'%SET(baud_port,(%timer_base_port + (2 * %timer_port_delta)))%'
%'              '%initialize_port(%timer_cntl_port, 0B6h, 0)%'

%'	    ') ELSE (%'
%'		'ERROR -- baud rate counter number is not 0, 1 or 2.
%'		'%SET(baud_port,0)%'
%'	    ')FI )FI )FI%'

%'
%'        ') ELSE (%IF (%EQS(%timer_type,80130)) THEN (%'
%'                '%SET(timer_cntl_port,%timer_base_port+(7*%timer_port_delta))%'
%'                '%IF(%EQS(%timer_cntr_num,2)) THEN (%'
%'                        '%SET(baud_port,%timer_base_port+(6*%timer_port_delta))%'
%'                        '%initialize_port(%timer_cntl_port,0b6h,0)%'
%'                ') ELSE (%'
%''ERROR --  invalid 80130 counter
%'                ')FI%'
%'+++
%'        ')FI )FI%'

%'	'%IF (%chan_port_delta le 0h) THEN (%'
%'	    'ERROR -- invalid port delta for the serial Port

%'      ') ELSE (%'
%'	    '%SET(data_port, %chan_base_port)%'
%'	    '%SET(status_port, %EVAL(%chan_base_port + %chan_port_delta))%'

%'		  '%initialize_port(%status_port, 080h, 5)%'
%'	 	  '%initialize_port(%status_port, 000h, 5)%'
%'  		  '%initialize_port(%status_port, 000h, 5)%'
%'   		  '%initialize_port(%status_port, 000h, 5)%'
%'		  '%initialize_port(%status_port, 040h, 5)%'
%'      	  '%initialize_port(%status_port, 04Eh, 5)%'
%'      	  '%initialize_port(%status_port, 037h, 5)%'

%'	    '%add_channel(%TYPE_8251A,%status_port,%data_port,%count,%baud_port,%'
%'			 'ci_8251,co_8251,csts_8251)%'

%'	    '%IF (%default_chan_count EQ 0) THEN (%'
%'		'%SET(default_chan_count,%count)%'
%'		'%SET(default_chan_type,%TYPE_8251A)%'
%'	    ')FI

%'	')FI%'

) ELSE (%'
%'
%'	'ERROR -- %chan_type, invalid channel type
%'
)FI )FI )FI )FI %'

)%' END OF COMMUNICATION CHANNEL MACRO
%'
%' *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'	Title:	channel_scan
%'
%'	Inputs:
%'	  max_scans	 number of scans to perform when choosing a
%'			 communication channel.  Valid values are:
%'			 FOREVER   -	scan until activity found on channel
%'			 1 - 65534 -	scan specified number of times looking
%'					for activity; if none found, choose
%'					fixed channel
%'			 NONE      -	do no scan; choose fixed channel
%'
%'	  fixed_baud_rate	 baud rate to use for fixed serial channel
%'
%'	Outputs:
%'	  max_scans	 value describing scanning action chosen:
%'			 0FFFFH     = FOREVER
%'			 1 - 0FFFEH = number of scans
%'			 0	    = NONE
%'
%'	  fixed_baud_count value to program baud rate counter with to generate
%'			   desired fixed baud rate
%'
%'	ABSTRACT:
%'	  This macro is used to define the action taken by the monitor to
%'	  choose a console communication channel.  Options are offered to
%'	  scan channels until activity is detected on one; scan channels
%'	  until activity is detected or a fixed number of scans has expired;
%'	  or simply choose a fixed channel.  If a fixed channel may potentialy
%'	  be chosen, and a serial channel has been configured with the
%'	  COMMUNICATION_CHANNEL macro, the the count value needed to generate
%'	  the fixed baud rate specified for the channel is calculated.
%'
%' *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'
%SET(fixed_baud_count,0)
%'
%*DEFINE(channel_scan(parameters)) (%DEFINE(tail) (%parameters) %'
%'
%DEFINE(max_scans) (%ARG)%'
%DEFINE(fixed_baud_rate) (%ARG)%'

%IF ((%EQS(%max_scans,FOREVER)) OR (%EQS(%max_scans,forever))) THEN(%'
%'	'%SET(max_scans,0FFFFH)%'

) ELSE (%IF ((%EQS(%max_scans,NONE)) OR (%EQS(%max_scans,none))) THEN (%'
%'	'%SET(max_scans,0)%'

) ELSE (%IF (NOT ((%max_scans GT 0) AND (%max_scans LT 0FFFFH))) THEN (%'
%'	'ERROR - %max_scans, invalid max scans value

)FI )FI )FI%'

%IF (%max_scans LT 0FFFFH) THEN (%'
%'
%'	'%IF (%LEN(%fixed_baud_rate) EQ 0) THEN (%'

%'		'%IF (%default_chan_count NE 0) THEN (%'
%'			'ERROR - no fixed baud rate for default serial channel
%'		')FI%'

%'	') ELSE (%IF (%fixed_baud_rate EQ 19200) THEN (%'
%'		'%SET(br_x,1)%'
%'		'%SET(br_a,0)%'

%'	') ELSE (%IF (%fixed_baud_rate EQ 9600) THEN (%'
%'		'%SET(br_x,2)%'
%'		'%SET(br_a,2)%'

%'	') ELSE (%IF (%fixed_baud_rate EQ 4800) THEN (%'
%'		'%SET(br_x,4)%'
%'		'%SET(br_a,6)%'

%'	') ELSE (%IF (%fixed_baud_rate EQ 2400) THEN (%'
%'		'%SET(br_x,8)%'
%'		'%SET(br_a,14)%'

%'	') ELSE (%IF (%fixed_baud_rate EQ 1200) THEN (%'
%'		'%SET(br_x,16)%'
%'		'%SET(br_a,30)%'

%'	') ELSE (%IF (%fixed_baud_rate EQ 600) THEN (%'
%'		'%SET(br_x,32)%'
%'		'%SET(br_a,62)%'

%'	') ELSE (%IF (%fixed_baud_rate EQ 300) THEN (%'
%'		'%SET(br_x,64)%'
%'		'%SET(br_a,126)%'

%'	') ELSE (%IF (%fixed_baud_rate EQ 150) THEN (%'
%'		'%SET(br_x,128)%'
%'		'%SET(br_a,254)%'

%'	') ELSE (ERROR -- %fixed_baud_rate, invalid baud rate 
%'
%'	')FI )FI )FI )FI )FI )FI )FI )FI )FI%'

%'	'%SET(fixed_baud_count, %EVAL(%default_chan_count * %br_x))%'
%'
%'	'%IF (%default_chan_type EQ %TYPE_82530) THEN (%'
%'		'%SET(fixed_baud_count, %EVAL(%fixed_baud_count + %br_a))%'
%'	')FI%'

)FI %'

)%'	END OF THE CHANNEL SCAN MACRO
%'
%' *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'
%'	Title:   CUSTOM_INIT_CODE_REAL
%'
%'	Inputs:
%'		custom_real_base_p  -  The base of the custom code
%'		custom_real_offset_p-  The offset of the custom code
%'
%'	Outputs:
%'		custom_real_base
%'		custom_real_offset
%'
%'	Abstract:
%'		This macro initializes the base and offset of custom
%'		code that will be executed every time on power up reset 
%'		and warm reset of the monitor.  This facility is for real
%'		mode code but moving into protected mode within the custom
%'		code is allowed following the standard iSDM practices of
%'		going into protected mode using standard iSDM interfaces.
%'
%' *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'

%'
%'
%SET(custom_real_base,0FFFFh)
%SET(custom_real_offset,0FFFFh)
%'
%*DEFINE(CUSTOM_INIT_CODE_REAL(custom_real_base_p:custom_real_offset_p))(%'
%'
%DEFINE(custom_real_base) (%custom_real_base_p%(h))%'
%DEFINE(custom_real_offset) (%custom_real_offset_p%(h))%'
%'
)%'	END OF THE CUSTOM_INIT_CODE_REAL MACRO
%'
%'
%' *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'
%'	Title:   custom_init_code_pvam
%'
%'	Inputs:
%'		custom_rom_ldt	-  Where the LDT for the custom code is to
%'				   go in EPROM
%'		custom_ram_ldt	-  Where the LDT for the custom code is
%'				   to go in ram
%'
%'	Outputs:
%'		custom_ram_ldt_hiword
%'		custom_ram_ldt_loword
%'		custom_rom_ldt_hiword
%'		custom_rom_ldt_loword
%'
%'	Abstract:
%'		This macro allows custom code to execute every time the
%'		monitor is switched into protected mode, either programmatically
%'		or interactively.
%'
%' *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'

%'
%'
%SET(custom_ram_ldt_hiword,0FFFFh)
%SET(custom_ram_ldt_loword,0FFFFh)
%'
%SET(custom_rom_ldt_hiword,0FFFFh)
%SET(custom_rom_ldt_loword,0FFFFh)
%'
%*DEFINE(custom_init_code_pvam(parameters))(%DEFINE(tail)(%parameters)%'
%'
%DEFINE(custom_rom_ldt)(%ARG)%'
%DEFINE(custom_ram_ldt)(%ARG)%'
%'
%IF (%LEN(%custom_ram_ldt) NE 0) THEN (%'
%DEFINE(custom_ram_ldt_hiword) (%(0)%substr(%custom_ram_ldt,1,%len(%custom_ram_ldt)-4)%(h))%'
%DEFINE(custom_ram_ldt_loword) (%(0)%substr(%custom_ram_ldt,%len(%custom_ram_ldt)-3,4)%(h))%'
)ELSE (%IF (%cpu_type_val EQ %type_80386) THEN(%'
%'   'ERROR -- The 80386 CPU requires a ram LDT address
%'
)FI )FI%'
%'
%'
%DEFINE(custom_rom_ldt_hiword) (%(0)%substr(%custom_rom_ldt,1,%len(%custom_rom_ldt)-4)%(h))%'
%DEFINE(custom_rom_ldt_loword) (%(0)%substr(%custom_rom_ldt,%len(%custom_rom_ldt)-3,4)%(h))%'
%'
)%'	END OF THE CUSTOM_INIT_CODE_PVAM MACRO
%'
%' *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'
%'	Title:   INTERRUPT_CONTROLLER
%'
%'	Inputs:
%'	  type - the type of interrupt controller on the
%'		 processor board.  It may have a type of NONE.
%'	  base - the base port of the interrupt controller
%'	  port_delta - the spacing to the interupt controller ports
%'	  slave_number - one of:
%'		  7 - identifies a slave interrupt controller
%'			with the specified slave number
%'		  M - specifies a master interrupt controller
%'		  N - specifies no cascaded interrupts
%'
%'	Outputs:
%'	  Causes several entries to be built in the initialization table
%'	  master_configured	flag to indicate master PIC has been configured
%'	  pic_configured	flag to indicate a PIC has been configured
%'	  slave_levels -	bit encoded byte which indicates which master
%'				PIC levels have slaves attached; bit n set means
%'				slave PIC on level n
%'
%'	Abstract:
%'	  This macro defines the configuration values used for the 
%'	  interrupt controller and places them in the initialization table.
%'	  The monitor initializes the interrupt controller so
%'	  that unrequested or spurious interrupts will not cause problems.
%'	  The interrupt controller is programmed in the following state:
%'		8086 edge mode
%'		4 bytes per interrupt in interrupt vector
%'		vector table begins at vector 32
%'		normal eoi
%'	  The 8259A is the only supported type.
%' *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%SET(slave_levels, 0)
%SET(pic_configured, %FALSE)
%SET(master_configured, %FALSE)
%'
%*DEFINE(interrupt_controller(parameters))(%DEFINE(tail)(%parameters)%'
%'
%DEFINE(type)(%ARG)%'
%'
%IF ((%EQS(%type,8259A)) OR (%EQS(%type,8259a))) THEN (%'
%'      '%DEFINE(pic_porta)(%ARG)%'
%'      '%DEFINE(port_delta)(%ARG)%'
%'
%'      '%IF (%port_delta le 0h ) THEN (%'
ERROR -- invalid port delta for the interrupt controller
%'      ')FI%'
%'
%'      '%SET(pic_portb, %EVAL(%pic_porta + %port_delta))%'
%'      '%DEFINE(slave_number)(%ARG)%'
%'
%'	'%IF ((%EQS(%slave_number,N)) OR (%EQS(%slave_number,n))) THEN (%'
%'
%'	    '%IF (%pic_configured) THEN (%'
ERROR -- multiple interrupt controllers without cascaded interrupts
%'
%'	    ') ELSE (%'
%'		'%initialize_port(%pic_porta, 013h, 0)%'
%'		'%initialize_port(%pic_portb, 020h, 0)%'
%'		'%initialize_port(%pic_portb, 011h, 0)%'
%'	    ')FI%'
%'
%'	') ELSE (%IF ((%EQS(%slave_number,M)) OR (%EQS(%slave_number,m))) THEN (%'
%'          '%initialize_port(%pic_porta, 011h, 0)%'
%'          '%initialize_port(%pic_portb, 020h, 0)%'
%'          '%initialize_port(%pic_portb, %slave_levels, 0)%'
%'          '%initialize_port(%pic_portb, 01Dh, 0)%'
%'	    '%SET(master_configured, %TRUE) %'
%'
%'	') ELSE (%'
%'	    '%SET(slave_levels, %EVAL(%slave_levels OR (01h SHL %slave_number)))%'
%'
%'	    '%IF (%master_configured) THEN (%'
ERROR -- master interrupt controller not configured last
%'
%'	    ') ELSE (%'
%'		'%initialize_port(%pic_porta, 011h, 0)%'
%'		'%initialize_port(%pic_portb, %EVAL(%slave_number*8 + 028h), 0)%'
%'		'%initialize_port(%pic_portb, %slave_number, 0)%'
%'		'%initialize_port(%pic_portb, 019h, 0)%'
%'	    ')FI%'
%'
%'	')FI )FI%'
%'
%'      '%initialize_port(%pic_portb, 0FFH, 0)%'
%'	'%SET(pic_configured, %TRUE) %'
%'
) ELSE (%IF (%EQS(%type,80130)) THEN (%'
%'      '%DEFINE(pic_porta)(%ARG)%'
%'      '%DEFINE(port_delta)(%ARG)%'
%'
%'      '%IF (%port_delta le 0h ) THEN (%'
ERROR -- invalid port delta for the interrupt controller
%'      ')FI%'
%'
%'      '%SET(pic_portb, %EVAL(%pic_porta + %port_delta))%'
%'      '%DEFINE(slave_number)(%ARG)%'
%'
%'	'%IF ((%EQS(%slave_number,N)) OR (%EQS(%slave_number,n))) THEN (%'
%'
%'	    '%IF (%pic_configured) THEN (%'
ERROR -- multiple interrupt controllers without cascaded interrupts
%'
%'	    ') ELSE (%'
%'		'%initialize_port(%pic_porta, 013h, 0)%'
%'		'%initialize_port(%pic_portb, 020h, 0)%'
%'		'%initialize_port(%pic_portb, 011h, 0)%'
%'	    ')FI%'
%'
%'	') ELSE (%IF ((%EQS(%slave_number,M)) OR (%EQS(%slave_number,m))) THEN (%'
%'          '%initialize_port(%pic_porta, 011h, 0)%'
%'          '%initialize_port(%pic_portb, 020h, 0)%'
%'          '%initialize_port(%pic_portb, %slave_levels, 0)%'
%'          '%initialize_port(%pic_portb, 01Dh, 0)%'
%'	    '%SET(master_configured, %TRUE) %'
%'
%'	') ELSE (%'
%'	    '%SET(slave_levels, %EVAL(%slave_levels OR (01h SHL %slave_number)))%'
%'
%'	    '%IF (%master_configured) THEN (%'
ERROR -- master interrupt controller not configured last
%'
%'	    ') ELSE (%'
%'		'%initialize_port(%pic_porta, 011h, 0)%'
%'		'%initialize_port(%pic_portb, %EVAL(%slave_number*8 + 028h), 0)%'
%'		'%initialize_port(%pic_portb, %slave_number, 0)%'
%'		'%initialize_port(%pic_portb, 019h, 0)%'
%'	    ')FI%'
%'
%'	')FI )FI%'
%'
%'      '%initialize_port(%pic_portb, 0FFH, 0)%'
%'	'%SET(pic_configured, %TRUE) %'
%'
) ELSE (%IF (%EQS(%type,80186)) THEN (%'
%'      '%DEFINE(pic_porta)(%ARG)%'
%'      '%DEFINE(port_delta)(%ARG)%'
%'
%'      '%IF (%port_delta le 0h ) THEN (%'
ERROR -- invalid port delta for the interrupt controller
%'      ')FI%'
%'
%'      '%SET(pic_portb, %EVAL(%pic_porta + %port_delta))%'
%'      '%DEFINE(slave_number)(%ARG)%'
%'
%'	'%IF ((%EQS(%slave_number,N)) OR (%EQS(%slave_number,n))) THEN (%'
%'
%'	    '%IF (%pic_configured) THEN (%'
ERROR -- multiple interrupt controllers without cascaded interrupts
%'
%'	    ') ELSE (%'
%'		'%initialize_port(%pic_porta, 013h, 0)%'
%'		'%initialize_port(%pic_portb, 020h, 0)%'
%'		'%initialize_port(%pic_portb, 011h, 0)%'
%'	    ')FI%'
%'
%'	') ELSE (%IF ((%EQS(%slave_number,M)) OR (%EQS(%slave_number,m))) THEN (%'
%'          '%initialize_port(%pic_porta, 011h, 0)%'
%'          '%initialize_port(%pic_portb, 020h, 0)%'
%'          '%initialize_port(%pic_portb, %slave_levels, 0)%'
%'          '%initialize_port(%pic_portb, 01Dh, 0)%'
%'	    '%SET(master_configured, %TRUE) %'
%'
%'	') ELSE (%'
%'	    '%SET(slave_levels, %EVAL(%slave_levels OR (01h SHL %slave_number)))%'
%'
%'	    '%IF (%master_configured) THEN (%'
ERROR -- master interrupt controller not configured last
%'
%'	    ') ELSE (%'
%'		'%initialize_port(%pic_porta, 011h, 0)%'
%'		'%initialize_port(%pic_portb, %EVAL(%slave_number*8 + 028h), 0)%'
%'		'%initialize_port(%pic_portb, %slave_number, 0)%'
%'		'%initialize_port(%pic_portb, 019h, 0)%'
%'	    ')FI%'
%'
%'	')FI )FI%'
%'
%'      '%initialize_port(%pic_portb, 0FFH, 0)%'
%'	'%SET(pic_configured, %TRUE) %'
) ELSE (%'
ERROR -- %type, invalid interrupt controller type
)FI )FI )FI%'
%'
)%'	END OF THE INTERRUPT CONTROLLER MACRO.
%'
%'*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'
%'	Title:  initialize_interconnect
%'
%'	Inputs: 
%'	  brd_type	- board class id + subclass id
%'	  brd_instance	- instance number of board type
%'	  rec_type	- type code of desired record on board
%'	  reg		- offset of register within record
%'	  value		- value to write to interconnect register
%'	  delay		- minimum number of mSec to wait after writing value
%'
%'	Outputs:
%'	  entries in initialization table
%'	  last_brd_type -	saves type of last board initialized
%'	  last_brd_instance -	saves instance number of last board initialized
%'	  last_rec_type -	saves type of last interconnect record initialized
%'
%'
%'	Abstract:
%'	  This macro  creates entries in the intialization table that instruct
%'	  the monitors initialization code to write a value to a specified
%'	  register on a specified board.  Initializing an interconnect register
%'	  requires either one or two initialization table entries.  The first
%'	  entry specifies which board and which record on the board are to be
%'	  initialized.  The second entry specifies the register, value, and delay
%'	  to be used for the initialization.  The class id, instance and record
%'	  type of the last board initialized are saved between invocations of this
%'	  macro so, if a subsequent invocation specifies the same board and record,
%'	  only one initialization table entry must be generated to initialize the
%'	  interconnect record.
%'
%'*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'
%SET(last_brd_type,0FFFFH)
%SET(last_brd_instance,0FFFFH)
%SET(last_rec_type,0FFFFH)
%'
%*DEFINE(initialize_interconnect(parameters)) (%DEFINE(tail)(%parameters)%'
%'
%DEFINE(brd_type) (%ARG) %'
%DEFINE(brd_instance) (%ARG) %'
%DEFINE(rec_type) (%ARG) %'
%DEFINE(reg) (%ARG) %'
%DEFINE(val) (%ARG) %'
%DEFINE(dely) (%ARG) %'
%'
%IF (%bus eq %MBI) THEN (%'
%'	'ERROR -- interconnect initialization not allowed in Multibus I system
)FI%'
%'
%IF ((%EQS(%brd_type,SELF)) OR (%EQS(%brd_type,self))) THEN (%'
%'	'%DEFINE(brd_type) (0FFH)%'
%'	'%DEFINE(brd_instance) (0FFH)%'
)FI%'
%'
%IF ((%brd_type EQ %last_brd_type) AND (%brd_instance EQ %last_brd_instance)) THEN (%'
%'
%'	'%IF (%rec_type NE %last_rec_type) THEN (%'
%'		'%initialize_port(0,%rec_type,0,%INTERCONNECT_SETUP)%'
%'	')FI%'
%'
) ELSE (%'
%'	'%initialize_port(%EVAL((%brd_instance SHL 8) OR %brd_type),%rec_type,%'
%'			' 0,%INTERCONNECT_SETUP)%'
%'
)FI%'
%'
%initialize_port(%reg,%val,%dely,%INTERCONNECT_INIT)%'
%'
%SET(last_brd_type,%brd_type)%'
%SET(last_brd_instance,%brd_instance)%'
%SET(last_rec_type,%rec_type)
%'
)%' END OF INITIALIZE_INTERCONNECT MACRO
%'
%'*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'
%'	Title:	auto_configure_memory
%'
%'	Inputs:
%'	  config_mode_p		- type of configuration desired; valid values are:
%'					LBX
%'					LBX+PSB
%'					PSB
%'	  start_address		- starting address when configuring only PSB memory
%'
%'	Outputs:
%'	  mem_config_mode	- macro-time variable that specifies option chosen:
%'					0	no auto configuration
%'					1	LBX only
%'					2	PSB only
%'					3	LBX and PSB
%'	  mem_start_address		- macro-time variable that specifes start address
%'				  always zero if LBX memory is configured
%'
%'	Abstract:
%'	  This macro specifes the automatic MBII memory configuration option.
%'
%'*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'
%SET(config_mode,0)
%SET(start_address,0)
%'
%*DEFINE (auto_configure_memory(parameters)) (%DEFINE(tail) (%parameters) %'
%'
%DEFINE(config_mode_p) (%ARG)%'
%DEFINE(start_address_p) (%ARG)%'
%'
%IF (%bus EQ %MBI) THEN (%'
%'	'ERROR -- automatic memory configuration not allowed in Multibus I system
)FI%'
%'
%IF (%EQS(%config_mode_p,LBX)) THEN (%'
%'	'%SET(config_mode,1) %'
%'	'%SET(start_address,0h)%'
%'
) ELSE ( %IF (%EQS(%config_mode_p,LBX+PSB)) THEN (%'
%'	'%SET(config_mode,3) %'
%'	'%SET(start_address,0h)%'
%'
) ELSE ( %IF (%EQS(%config_mode_p,PSB)) THEN (%'
%'	'%SET(config_mode,2) %'
%'	'%IF (%EQS(%start_address_p,0)) THEN (%'
ERROR - zero is not a valid starting address
%'	') ELSE (%'
%'		'%SET(start_address,%start_address_p)%'
%'	')FI%'
) ELSE (%'
ERROR - %config_mode_p, invalid interface type
%'
)FI )FI )FI%'
%'
)%' END OF AUTO_CONFIGURE_MEMORY MACRO
%'*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'
%'	Title:	bootstrap
%'
%'	Inputs:
%'	  boot_base_p	- base part of bootstrap loader entry address
%'	  boot_offset_p	- offset part of bootstrap loader entry address
%'	  boot_option_p	- flag to specify action taken by monitor:
%'				MANUAL	= boot only when B command entered
%'				AUTO	= boot immediately after monitor initialization
%'
%'	Outputs:
%'	  boot_base	- base part of bootstrap loader entry address
%'	  boot_offset	- offset part of bootstrap loader entry address
%'	  boot_option_p	- flag to specify action taken by monitor:
%'				0	= boot only when B command entered
%'				1	= boot immediately after monitor initialization
%'
%'	Abstract:
%'	  This macro configures the "B" command into the iSDM 286
%'	  monitor and specifies the starting address of the Bootstrap Loader.
%'*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'
%DEFINE(boot_base) (0F824h)
%DEFINE(boot_offset) (bad_cmd)
%DEFINE(boot_option) (0)
%'
%*DEFINE(BOOTSTRAP(boot_base_p:boot_offset_p,boot_option_p))(%'
%'
%DEFINE(boot_base) (%boot_base_p%(h))%'
%DEFINE(boot_offset) (%boot_offset_p%(h))%'
%'
%IF ((%EQS(%boot_option_p,MANUAL)) OR (%EQS(%boot_option_p,manual)) OR %'
%'  '(%LEN(%boot_option_p) EQ 0)) THEN (%'
%'	'%DEFINE(boot_option) (%MANUAL_BOOT_OPTION)%'
%'
) ELSE (%IF ((%EQS(%boot_option_p,AUTO)) OR (%EQS(%boot_option_p,auto))) THEN (%'
%'	'%DEFINE(boot_option) (%AUTO_BOOT_OPTION)%'
%'
) ELSE (%'
ERROR - %boot_option_p, invalid option
%'
)FI )FI%'
%'
)%'	END OF THE BOOTSTRAP MACRO
%'
%'*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'
%'	Title:	bist
%'
%'	Inputs:
%'	  bist_base_p	- base part of BIST entry address
%'	  bist_offset_p - offset part of BIST entry address
%'
%'	Outputs:
%'	  bist_base	- base part of BIST entry address
%'	  bist_offset	- offset part of BIST entry address
%'
%'	ABSTRACT:
%'	  This macro configures BIST support into the iSDM 286
%'	  monitor and specifies the starting address of the BIST.
%'	  An address value of FFFF:FFFF indicates no BIST support.
%'
%'*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'
%SET(bist_base,0FFFFh)
%SET(bist_offset,0FFFFh)
%'
%*DEFINE(BIST(bist_base_p:bist_offset_p))(%'
%'
%DEFINE(bist_base) (%bist_base_p%(h))%'
%DEFINE(bist_offset) (%bist_offset_p%(h))%'
%'
)%'	END OF THE BIST MACRO
%' *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'
%'	Title: system_configuration_pointer
%'
%'	Inputs: sysbus - 1 if 8 bit bus, 0 if 16 bit bus
%'			ptr_20 - the segment portion of a 20 bit address
%'			ptr_24 - an absolute 24 bit address
%'
%'	Outputs: An absolute segment containing the input info.
%'
%'	Abstract: This macro checks the validity of the input info.
%'	and if valid declares it as data in an absolute segment at ffff.
%'
%' *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'
%*DEFINE(SYSTEM_CONFIGURATION_POINTER(parameters))(%DEFINE(tail)(%parameters)%'
%DEFINE(sysbus)(%ARG)%'
%DEFINE(p20)(%ARG)%'
%DEFINE(p24)(%ARG)%'
%'
%IF ((%sysbus NE 0) AND (%sysbus NE 1)) THEN (%'
%'	'ERROR -- System Bus parameter must be 0 (16 bit bus) or 1 (8 bit bus)
%'	'%SET(sysbus,0)%'
)FI%'
%'
%IF ((%EQS(%p20,none)) OR (%EQS(%p20,NONE))) THEN(%'
%'	'%SET(ptr_20,0)%'
) ELSE (%DEFINE(ptr_20)(%p20))FI%'
%'
%IF ((%EQS(%p24,none)) OR (%EQS(%p24,NONE))) THEN(%'
%'	'%SET(ptr_24,0)%'
) ELSE (%DEFINE(ptr_24)(%p24))FI%'

scp_segment	segment at 0ffffh

	org	6		; locate beyond the restart vector

	DB	%sysbus
	DB	0
	DW	0
	DW	%ptr_20
	DD	%ptr_24

scp_segment	ends
)%'	END OF THE SYSTEM CONFIGURATION POINTER MACRO
%'
%' *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'
%'	Title:	end
%'
%'	Inputs:
%'	  channel_table	- macro-time variable containing channel table
%'	  num_channels	- macro-time variable containing number of channels
%'	  num_init_ent	- macro-time variable containing number of
%'			  initialization table entries
%'	  max_scans	- macro-time variable containing maximum number of scans
%'	  fixed_baud_count - macro-time variable containing fixed baud count
%'	  boot_offset	- macro-time variable containing BSL address offset
%'	  boot_base	- macro-time variable containing BSL address base
%'	  boot_option	- macro-time variable containing BSL option chosen
%'	  bist_offset	- macro-time variable containing BIST address offset
%'	  bist_base	- macro-time variable containing BIST address base
%'	  config_mode	- macro-time variable containing memory configuration
%'			  option chosen
%'	  start_address	- macro-time variable containing memory start address
%'	  bus		- macro-time variable containing bus type code
%'	    
%'	Outputs:
%'	  channel_table	- table of communication channels available to monitor
%'	  num_channels	- number of channels in table
%'	  num_init_ent	- number of initialization table entries
%'	  max_scans	- maximum number of channel scans
%'	  fixed_baud_count - fixed baud count of default channel
%'	  boot_address	- Boot Strap Loader address
%'	  boot_option	- BSL option chosen
%'	  bist_address	- Built-In Self Test address
%'	  mem_config_mode- memory configuration option chosen
%'	  mem_start_address- memory configuration start address
%'	  bus_type	- bus type flag
%'	  config_value	- A word value used to determine how many time
%'			  to execute the delay loop in MS_DELAY.
%'	  npx_installed - A boolean that is used to skip around NPX 
%'			  initialization instructions.  A value of true
%'			  executes the NPX instructions and a value of false
%'			  jumps around those instructions.
%'	    
%'	ABSTRACT:
%'	    This macro defines a number of public constants needed by the
%'	    monitor.
%'
%' *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
%'
%*DEFINE(end) (%'
%'
%IF (%cpu_macro_not_configured) THEN (%'
%'       'ERROR -- The CPU macro must be configured.)FI
%IF (%EQS(%omf,%omf86)) THEN
	(code	segment	public	'code')FI


%IF (%EQS(%omf,%omf286)) THEN
	(code		segment	er )FI
%IF (%EQS(%omf,%omf86)) THEN
	(assume cs:code)FI


	extrn	bad_cmd:		near
	extrn	ci_82530:		near
	extrn	co_82530:		near
	extrn	csts_82530:		near
	extrn	ci_8274:		near
	extrn	co_8274:		near
	extrn	csts_8274:		near
	extrn	ci_8251:		near
	extrn	co_8251:		near
	extrn	csts_8251:		near
	extrn	set_lbx_max:		near
	extrn	init_286110:		near


	public	cpu_type
	public	channel_table
	public	num_channels
	public	init_table
	public	num_init_entries
	public	max_scans
	public	fixed_baud_count
	public	boot_address
	public	boot_option
	public	bist_address
	public  custom_config_real
	public  custom_config_ram_ldt
	public  custom_config_rom_ldt
	public	mem_config_mode
	public	mem_start_address
	public	bus_type
	public	npx_installed

channel_table		%channel_table
num_channels		DB	%num_channels
num_init_entries	DW	%num_init_entries
max_scans		DW	%max_scans
fixed_baud_count	DW	%fixed_baud_count
boot_address		DW	%boot_offset, %boot_base
boot_option		DB	%boot_option
bist_address		DW	%bist_offset, %bist_base
custom_config_real	DW	%custom_real_offset, %custom_real_base
custom_config_rom_ldt	DW	%custom_rom_ldt_loword, %custom_rom_ldt_hiword
custom_config_ram_ldt	DW	%custom_ram_ldt_loword, %custom_ram_ldt_hiword
mem_config_mode		DB	%config_mode
mem_start_address	DW	%start_address
bus_type		DB	%bus
cpu_type		DB	%cpu_type_val
config_value		DW	%delay_value
npx_installed		DB	%true


	public	ic_ptr_reg_low
	public	ic_ptr_reg_hi_BIC
	public	ic_ptr_reg_hi_DOCKET
	public	ic_data_reg

ic_ptr_reg_low		DW	030H
ic_ptr_reg_hi_BIC	DW	034H
ic_ptr_reg_hi_DOCKET	DW	031H	
ic_data_reg		DW	03CH


;	init hardware for PVAM
	
	public 	init_hardware
init_hardware proc near

	%extend_addressing_code
	ret
init_hardware endp
;***********************************************************************
;
;  Title:  MS_DELAY
;
;  Parameters:
;		None
;
;  Global variables:
;		config_value	- The number of times to execute the delay
;				  loop.
;		loop_body	- A macro expansion that fills in the body
;				  of the delay loop.
;
;  Abstract:  This procedure will delay for approximately one millisecond
;	before returning.  The value of the CX register is preserved.
;
;***********************************************************************
	
	public 	MS_DELAY
ms_delay proc near
	push	cx
	push	ax
	mov	cx, config_value
	%loop_body
	nop
	pop	ax
	pop	cx
	ret
ms_delay endp
	


code	ends
	END)

%IF (%EQS(%omf,%omf86)) THEN
	(code	segment	public	'code')FI


%IF (%EQS(%omf,%omf286)) THEN
	(code		segment	er public)FI
%IF (%EQS(%omf,%omf86)) THEN
	(assume cs:code)FI
code	ends
